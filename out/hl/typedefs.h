// Generated by HLC 4.0.0 (HL v4)
// Types definitions
typedef struct _hl__BaseType *hl__BaseType;
typedef struct _hl__Class *hl__Class;
typedef struct _String *String;
typedef struct _hl__$BaseType *hl__$BaseType;
typedef struct _$String *$String;
typedef struct _$Date *$Date;
typedef struct _Date *Date;
typedef struct _$EReg *$EReg;
typedef struct _hl__types__$ArrayAccess *hl__types__$ArrayAccess;
typedef struct _hl__types__$ArrayBase *hl__types__$ArrayBase;
typedef struct _hl__types__ArrayAccess *hl__types__ArrayAccess;
typedef struct _hl__types__ArrayBase *hl__types__ArrayBase;
typedef struct _hl__types__ArrayBytes_Int *hl__types__ArrayBytes_Int;
typedef struct _hl__types__ArrayBytes_hl_UI16 *hl__types__ArrayBytes_hl_UI16;
typedef struct _hl__types__ArrayBytes_Single *hl__types__ArrayBytes_Single;
typedef struct _hl__types__ArrayBytes_Float *hl__types__ArrayBytes_Float;
typedef struct _$StringBuf *$StringBuf;
typedef struct _haxe__ds__$ObjectMap *haxe__ds__$ObjectMap;
typedef struct _haxe__ds__$IntMap *haxe__ds__$IntMap;
typedef struct _hl__$Enum *hl__$Enum;
typedef struct _hl__Enum *hl__Enum;
typedef struct _hl_bytes_map hl_bytes_map;
typedef struct _hl__types__ArrayObj *hl__types__ArrayObj;
typedef struct _h3d__mat__$DepthFormat *h3d__mat__$DepthFormat;
typedef struct _h3d__mat__$DepthBuffer *h3d__mat__$DepthBuffer;
typedef struct _h3d__mat__DepthBuffer *h3d__mat__DepthBuffer;
typedef struct _dx_resource dx_resource;
typedef struct _dx_pointer dx_pointer;
typedef struct _h3d__mat__$Wrap *h3d__mat__$Wrap;
typedef struct _h3d__mat__$Filter *h3d__mat__$Filter;
typedef struct _h3d__mat__$MipMap *h3d__mat__$MipMap;
typedef struct _hxd__$PixelFormat *hxd__$PixelFormat;
typedef struct _h3d__$Indexes *h3d__$Indexes;
typedef struct _h3d__Indexes *h3d__Indexes;
typedef struct _h3d__impl__MemoryManager *h3d__impl__MemoryManager;
typedef struct _h3d__impl__Driver *h3d__impl__Driver;
typedef struct _h3d__impl___ManagedBuffer__$FreeCell *h3d__impl___ManagedBuffer__$FreeCell;
typedef struct _h3d__impl__$ManagedBuffer *h3d__impl__$ManagedBuffer;
typedef struct _h3d__impl__$Driver *h3d__impl__$Driver;
typedef struct _h3d__$BufferFlag *h3d__$BufferFlag;
typedef struct _h3d__impl__$MemoryManager *h3d__impl__$MemoryManager;
typedef struct _haxe__io__$Encoding *haxe__io__$Encoding;
typedef struct _haxe__io__$Bytes *haxe__io__$Bytes;
typedef struct _haxe__io__Bytes *haxe__io__Bytes;
typedef struct _hxd__$Pixels *hxd__$Pixels;
typedef struct _hxd__Pixels *hxd__Pixels;
typedef struct _hxd__$BitmapInnerDataImpl *hxd__$BitmapInnerDataImpl;
typedef struct _hxd__$BitmapData *hxd__$BitmapData;
typedef struct _hxd__BitmapInnerDataImpl *hxd__BitmapInnerDataImpl;
typedef struct _hxd__BitmapData *hxd__BitmapData;
typedef struct _h3d__mat__$Texture *h3d__mat__$Texture;
typedef struct _h3d__mat__Texture *h3d__mat__Texture;
typedef struct _haxe__ds__IntMap *haxe__ds__IntMap;
typedef struct _hl_int_map hl_int_map;
typedef struct _h3d___Engine__$TargetTmp *h3d___Engine__$TargetTmp;
typedef struct _dx__$Window *dx__$Window;
typedef struct _haxe__ds___List__$ListNode *haxe__ds___List__$ListNode;
typedef struct _haxe__ds__$List *haxe__ds__$List;
typedef struct _hxd__$Window *hxd__$Window;
typedef struct _hxd__Window *hxd__Window;
typedef struct _haxe__ds__List *haxe__ds__List;
typedef struct _haxe__ds___List__ListNode *haxe__ds___List__ListNode;
typedef struct _dx__Window *dx__Window;
typedef struct _dx_window dx_window;
typedef struct _h3d__$Vector *h3d__$Vector;
typedef struct _h3d__Vector *h3d__Vector;
typedef struct _h3d__$Engine *h3d__$Engine;
typedef struct _h3d__Engine *h3d__Engine;
typedef struct _h3d___Engine__TargetTmp *h3d___Engine__TargetTmp;
typedef struct _haxe__ds__ObjectMap *haxe__ds__ObjectMap;
typedef struct _hl_obj_map hl_obj_map;
typedef struct _hxd__$EventKind *hxd__$EventKind;
typedef struct _hxd__$Event *hxd__$Event;
typedef struct _hxd__$SceneEvents *hxd__$SceneEvents;
typedef struct _h2d__$Object *h2d__$Object;
typedef struct _h2d__Object *h2d__Object;
typedef struct _h2d__filter__Filter *h2d__filter__Filter;
typedef struct _h2d__Drawable *h2d__Drawable;
typedef struct _hxsl__ShaderList *hxsl__ShaderList;
typedef struct _hxsl__Shader *hxsl__Shader;
typedef struct _hxsl__SharedShader *hxsl__SharedShader;
typedef struct _hxsl__ShaderConst *hxsl__ShaderConst;
typedef struct _hxsl__ShaderInstance *hxsl__ShaderInstance;
typedef struct _h2d__$Layers *h2d__$Layers;
typedef struct _h3d__impl__$RenderContext *h3d__impl__$RenderContext;
typedef struct _h2d__$BlendMode *h2d__$BlendMode;
typedef struct _hxsl__$VarKind *hxsl__$VarKind;
typedef struct _hxsl__$Prec *hxsl__$Prec;
typedef struct _hxsl__$VarQualifier *hxsl__$VarQualifier;
typedef struct _hxsl__$VecType *hxsl__$VecType;
typedef struct _hxsl__$SizeDecl *hxsl__$SizeDecl;
typedef struct _hxsl__$Type *hxsl__$Type;
typedef struct _hxsl__$Const *hxsl__$Const;
typedef struct _hxsl__$TGlobal *hxsl__$TGlobal;
typedef struct _haxe__macro__$Binop *haxe__macro__$Binop;
typedef struct _haxe__macro__$Unop *haxe__macro__$Unop;
typedef struct _hxsl__$Component *hxsl__$Component;
typedef struct _hxsl__$TExprDef *hxsl__$TExprDef;
typedef struct _hxsl__$FunctionKind *hxsl__$FunctionKind;
typedef struct _hxsl__$ShaderInstance *hxsl__$ShaderInstance;
typedef struct _hxsl__$ShaderConst *hxsl__$ShaderConst;
typedef struct _hxsl__$ShaderGlobal *hxsl__$ShaderGlobal;
typedef struct _hxsl__$SharedShader *hxsl__$SharedShader;
typedef struct _hxsl__$Shader *hxsl__$Shader;
typedef struct _hxsl__$ShaderList *hxsl__$ShaderList;
typedef struct _h2d__$Drawable *h2d__$Drawable;
typedef struct _h3d__mat__$StencilOp *h3d__mat__$StencilOp;
typedef struct _h3d__mat__$Compare *h3d__mat__$Compare;
typedef struct _h3d__mat__$Stencil *h3d__mat__$Stencil;
typedef struct _h3d__mat__$Operation *h3d__mat__$Operation;
typedef struct _h3d__mat__$Blend *h3d__mat__$Blend;
typedef struct _h3d__mat__$Face *h3d__mat__$Face;
typedef struct _h3d__mat__$Pass *h3d__mat__$Pass;
typedef struct _h3d__$Buffer *h3d__$Buffer;
typedef struct _h3d__Buffer *h3d__Buffer;
typedef struct _h3d__impl__ManagedBuffer *h3d__impl__ManagedBuffer;
typedef struct _h3d__impl___ManagedBuffer__FreeCell *h3d__impl___ManagedBuffer__FreeCell;
typedef struct _h3d__shader__$ShaderBuffers *h3d__shader__$ShaderBuffers;
typedef struct _h3d__shader__$Buffers *h3d__shader__$Buffers;
typedef struct _hxsl__$ShaderInstanceDesc *hxsl__$ShaderInstanceDesc;
typedef struct _hxsl__$AllocGlobal *hxsl__$AllocGlobal;
typedef struct _hxsl__$AllocParam *hxsl__$AllocParam;
typedef struct _hxsl__$RuntimeShaderData *hxsl__$RuntimeShaderData;
typedef struct _hxsl__$RuntimeShader *hxsl__$RuntimeShader;
typedef struct _haxe__ds__$StringMap *haxe__ds__$StringMap;
typedef struct _hxsl__$SearchMap *hxsl__$SearchMap;
typedef struct _hxsl__$Cache *hxsl__$Cache;
typedef struct _hxsl__Cache *hxsl__Cache;
typedef struct _hxsl__SearchMap *hxsl__SearchMap;
typedef struct _hxsl__RuntimeShader *hxsl__RuntimeShader;
typedef struct _hxsl__RuntimeShaderData *hxsl__RuntimeShaderData;
typedef struct _hxsl__AllocParam *hxsl__AllocParam;
typedef struct _hxsl__AllocGlobal *hxsl__AllocGlobal;
typedef struct _haxe__ds__StringMap *haxe__ds__StringMap;
typedef struct _hxsl__$Globals *hxsl__$Globals;
typedef struct _h3d__pass__$ShaderManager *h3d__pass__$ShaderManager;
typedef struct _h3d__shader__$Base2d *h3d__shader__$Base2d;
typedef struct _h2d__col__$Point *h2d__col__$Point;
typedef struct _h2d__col__$Bounds *h2d__col__$Bounds;
typedef struct _h2d__col__Bounds *h2d__col__Bounds;
typedef struct _h2d__col__Point *h2d__col__Point;
typedef struct _h3d__impl__$TextureCache *h3d__impl__$TextureCache;
typedef struct _h2d__$RenderContext *h2d__$RenderContext;
typedef struct _h2d__$Mask *h2d__$Mask;
typedef struct _hxd__$CustomCursor *hxd__$CustomCursor;
typedef struct _hxd__$Cursor *hxd__$Cursor;
typedef struct _h2d__$Interactive *h2d__$Interactive;
typedef struct _h2d__filter__$Filter *h2d__filter__$Filter;
typedef struct _h2d__$Scene *h2d__$Scene;
typedef struct _h3d__scene__$Object *h3d__scene__$Object;
typedef struct _h3d__pass__$Base *h3d__pass__$Base;
typedef struct _h3d__pass__$Default *h3d__pass__$Default;
typedef struct _h3d__pass___HardwarePick__$FixedColor *h3d__pass___HardwarePick__$FixedColor;
typedef struct _h3d__scene__$Light *h3d__scene__$Light;
typedef struct _h3d__pass__$Object *h3d__pass__$Object;
typedef struct _h3d__scene__$LightSystem *h3d__scene__$LightSystem;
typedef struct _h3d__scene___RenderContext__$SharedGlobal *h3d__scene___RenderContext__$SharedGlobal;
typedef struct _h3d__$Matrix *h3d__$Matrix;
typedef struct _h3d__Matrix *h3d__Matrix;
typedef struct _h3d__col__$Point *h3d__col__$Point;
typedef struct _h3d__col__$Ray *h3d__col__$Ray;
typedef struct _h3d__col__Point *h3d__col__Point;
typedef struct _h3d__col__Ray *h3d__col__Ray;
typedef struct _h3d__col__$Bounds *h3d__col__$Bounds;
typedef struct _h3d__col__Bounds *h3d__col__Bounds;
typedef struct _h3d__$Camera *h3d__$Camera;
typedef struct _h3d__scene__$RenderContext *h3d__scene__$RenderContext;
typedef struct _h3d__pass__$HardwarePick *h3d__pass__$HardwarePick;
typedef struct _h3d__scene__$Interactive *h3d__scene__$Interactive;
typedef struct _hxd__impl__$AnyProps *hxd__impl__$AnyProps;
typedef struct _h3d__scene__$RenderMode *h3d__scene__$RenderMode;
typedef struct _hxd__prefab__$Prefab *hxd__prefab__$Prefab;
typedef struct _hxd__prefab__Prefab *hxd__prefab__Prefab;
typedef struct _hxd__prefab__rfx__$RendererFX *hxd__prefab__rfx__$RendererFX;
typedef struct _h3d__scene__$Renderer *h3d__scene__$Renderer;
typedef struct _h3d__$Quat *h3d__$Quat;
typedef struct _h3d__scene__$Mesh *h3d__scene__$Mesh;
typedef struct _h3d__scene__$MultiMaterial *h3d__scene__$MultiMaterial;
typedef struct _h3d__scene___Graphics__$GPoint *h3d__scene___Graphics__$GPoint;
typedef struct _h3d__shader__$LineShader *h3d__shader__$LineShader;
typedef struct _h3d__prim__$Primitive *h3d__prim__$Primitive;
typedef struct _h3d__prim__$BigPrimitive *h3d__prim__$BigPrimitive;
typedef struct _h3d__scene__$Graphics *h3d__scene__$Graphics;
typedef struct _h3d__shader__$SkinBase *h3d__shader__$SkinBase;
typedef struct _h3d__anim__$Joint *h3d__anim__$Joint;
typedef struct _h3d__anim___Skin__$Influence *h3d__anim___Skin__$Influence;
typedef struct _h3d__anim__$Skin *h3d__anim__$Skin;
typedef struct _h3d__mat__$BaseMaterial *h3d__mat__$BaseMaterial;
typedef struct _h3d__shader__$SpecularTexture *h3d__shader__$SpecularTexture;
typedef struct _h3d__shader__$Texture *h3d__shader__$Texture;
typedef struct _hxd__fs__$FileEntry *hxd__fs__$FileEntry;
typedef struct _hxd__res__$Resource *hxd__res__$Resource;
typedef struct _h3d__shader__$NormalMap *h3d__shader__$NormalMap;
typedef struct _h3d__shader__$BaseMesh *h3d__shader__$BaseMesh;
typedef struct _h3d__mat__$Material *h3d__mat__$Material;
typedef struct _hxd__impl__AnyProps *hxd__impl__AnyProps;
typedef struct _h3d__mat__BaseMaterial *h3d__mat__BaseMaterial;
typedef struct _h3d__mat__Pass *h3d__mat__Pass;
typedef struct _h3d__mat__Stencil *h3d__mat__Stencil;
typedef struct _h3d__mat__Material *h3d__mat__Material;
typedef struct _h3d__shader__BaseMesh *h3d__shader__BaseMesh;
typedef struct _h3d__shader__NormalMap *h3d__shader__NormalMap;
typedef struct _hxd__res__Resource *hxd__res__Resource;
typedef struct _hxd__fs__FileEntry *hxd__fs__FileEntry;
typedef struct _h3d__shader__Texture *h3d__shader__Texture;
typedef struct _h3d__shader__SpecularTexture *h3d__shader__SpecularTexture;
typedef struct _h3d__scene__$Skin *h3d__scene__$Skin;
typedef struct _h3d__anim__$AnimatedObject *h3d__anim__$AnimatedObject;
typedef struct _h3d__anim__$Animation *h3d__anim__$Animation;
typedef struct _h3d__scene__$Scene *h3d__scene__$Scene;
typedef struct _hxd__$App *hxd__$App;
typedef struct _haxe__$MainEvent *haxe__$MainEvent;
typedef struct _haxe__$Timer *haxe__$Timer;
typedef struct _haxe__Timer *haxe__Timer;
typedef struct _haxe__MainEvent *haxe__MainEvent;
typedef struct _hxd__$Timer *hxd__$Timer;
typedef struct _haxe__$Log *haxe__$Log;
typedef struct _hl__types__ArrayDyn *hl__types__ArrayDyn;
typedef struct _hxd__res__$Loader *hxd__res__$Loader;
typedef struct _hxd__res__Loader *hxd__res__Loader;
typedef struct _hxd__fs__$EmbedFileSystem *hxd__fs__$EmbedFileSystem;
typedef struct _EReg *EReg;
typedef struct _ereg ereg;
typedef struct _h2d__$Tile *h2d__$Tile;
typedef struct _h2d__Tile *h2d__Tile;
typedef struct _h2d___TileGroup__$TileLayerContent *h2d___TileGroup__$TileLayerContent;
typedef struct _h2d__$TileGroup *h2d__$TileGroup;
typedef struct _h2d__$Align *h2d__$Align;
typedef struct _h2d__$Kerning *h2d__$Kerning;
typedef struct _h2d__$FontChar *h2d__$FontChar;
typedef struct _hxd__$Charset *hxd__$Charset;
typedef struct _hxd__Charset *hxd__Charset;
typedef struct _h2d__$Font *h2d__$Font;
typedef struct _h2d__$Text *h2d__$Text;
typedef struct _h2d__$Bitmap *h2d__$Bitmap;
typedef struct _$Main *$Main;
typedef struct _hxd__res__$Image *hxd__res__$Image;
typedef struct _$Math *$Math;
typedef struct _$Std *$Std;
typedef struct _hl_random hl_random;
typedef struct _$StringTools *$StringTools;
typedef struct _$SysError *$SysError;
typedef struct _$Sys *$Sys;
typedef struct _$ValueType *$ValueType;
typedef struct _$Xml *$Xml;
typedef struct _Xml *Xml;
typedef struct _dx__$LayoutElement *dx__$LayoutElement;
typedef struct _dx__$RenderTargetDesc *dx__$RenderTargetDesc;
typedef struct _dx__$RasterizerDesc *dx__$RasterizerDesc;
typedef struct _dx__$Texture2dDesc *dx__$Texture2dDesc;
typedef struct _dx__$DepthStencilDesc *dx__$DepthStencilDesc;
typedef struct _dx__$RenderTargetBlendDesc *dx__$RenderTargetBlendDesc;
typedef struct _dx__$SamplerDesc *dx__$SamplerDesc;
typedef struct _dx__$ShaderResourceViewDesc *dx__$ShaderResourceViewDesc;
typedef struct _dx__$Event *dx__$Event;
typedef struct _dx__$Loop *dx__$Loop;
typedef struct _dx__Event *dx__Event;
typedef struct _dx__$ResourceBox *dx__$ResourceBox;
typedef struct _haxe__io__$Input *haxe__io__$Input;
typedef struct _format__gif__$Reader *format__gif__$Reader;
typedef struct _format__gif__$Version *format__gif__$Version;
typedef struct _format__gif__$DisposalMethod *format__gif__$DisposalMethod;
typedef struct _format__gif__$ApplicationExtension *format__gif__$ApplicationExtension;
typedef struct _format__gif__$Extension *format__gif__$Extension;
typedef struct _format__gif__$Block *format__gif__$Block;
typedef struct _haxe__io__$Output *haxe__io__$Output;
typedef struct _haxe__io__$BytesBuffer *haxe__io__$BytesBuffer;
typedef struct _haxe__io__$BytesOutput *haxe__io__$BytesOutput;
typedef struct _format__gif__$Tools *format__gif__$Tools;
typedef struct _format__mp3__$MPEGVersion *format__mp3__$MPEGVersion;
typedef struct _format__mp3__$Bitrate *format__mp3__$Bitrate;
typedef struct _format__mp3__$SamplingRate *format__mp3__$SamplingRate;
typedef struct _format__mp3__$Layer *format__mp3__$Layer;
typedef struct _format__mp3__$MPEG *format__mp3__$MPEG;
typedef struct _format__mp3__$CLayer *format__mp3__$CLayer;
typedef struct _format__mp3__$ChannelMode *format__mp3__$ChannelMode;
typedef struct _format__mp3__$Emphasis *format__mp3__$Emphasis;
typedef struct _format__tools__$BitsInput *format__tools__$BitsInput;
typedef struct _format__mp3__$Reader *format__mp3__$Reader;
typedef struct _format__mp3__$FrameType *format__mp3__$FrameType;
typedef struct _haxe__io__$Eof *haxe__io__$Eof;
typedef struct _format__png__$Color *format__png__$Color;
typedef struct _format__png__$Chunk *format__png__$Chunk;
typedef struct _format__png__$Writer *format__png__$Writer;
typedef struct _haxe__crypto__$Crc32 *haxe__crypto__$Crc32;
typedef struct _format__tga__$Reader *format__tga__$Reader;
typedef struct _format__tga__$ImageOrigin *format__tga__$ImageOrigin;
typedef struct _format__tga__$ImageType *format__tga__$ImageType;
typedef struct _format__wav__$Reader *format__wav__$Reader;
typedef struct _format__wav__$WAVEFormat *format__wav__$WAVEFormat;
typedef struct _h2d__col__$Matrix *h2d__col__$Matrix;
typedef struct _h2d__col__Matrix *h2d__col__Matrix;
typedef struct _h3d__mat__$TextureFlags *h3d__mat__$TextureFlags;
typedef struct _hxd__impl__$ArrayIterator_h2d_Object *hxd__impl__$ArrayIterator_h2d_Object;
typedef struct _h3d__shader__$ColorAdd *h3d__shader__$ColorAdd;
typedef struct _h3d__shader__$ColorKey *h3d__shader__$ColorKey;
typedef struct _h3d__shader__$ColorMatrix *h3d__shader__$ColorMatrix;
typedef struct _hxsl___ShaderList__$ShaderIterator *hxsl___ShaderList__$ShaderIterator;
typedef struct _hxd__CustomCursor *hxd__CustomCursor;
typedef struct _hxd__$Platform *hxd__$Platform;
typedef struct _hxd__$SystemValue *hxd__$SystemValue;
typedef struct _hxd__$System *hxd__$System;
typedef struct _ui_sentinel ui_sentinel;
typedef struct _hxsl__$Output *hxsl__$Output;
typedef struct _h3d__impl__$Feature *h3d__impl__$Feature;
typedef struct _h2d__col__$IPoint *h2d__col__$IPoint;
typedef struct _h2d__col__$IBounds *h2d__col__$IBounds;
typedef struct _h2d__col__IBounds *h2d__col__IBounds;
typedef struct _h2d__col__IPoint *h2d__col__IPoint;
typedef struct _h3d__$BufferOffset *h3d__$BufferOffset;
typedef struct _h3d__col__$Plane *h3d__col__$Plane;
typedef struct _h3d__col__Plane *h3d__col__Plane;
typedef struct _h3d__col__$Frustum *h3d__col__$Frustum;
typedef struct _h3d__impl__$PipelineKind *h3d__impl__$PipelineKind;
typedef struct _h3d__impl__$PipelineState *h3d__impl__$PipelineState;
typedef struct _h3d__impl___DirectXDriver__$ShaderContext *h3d__impl___DirectXDriver__$ShaderContext;
typedef struct _h3d__impl___DirectXDriver__$CompiledShader *h3d__impl___DirectXDriver__$CompiledShader;
typedef struct _h3d__impl__$DirectXDriver *h3d__impl__$DirectXDriver;
typedef struct _h3d__impl__$InstanceBuffer *h3d__impl__$InstanceBuffer;
typedef struct _h3d__scene__$Joint *h3d__scene__$Joint;
typedef struct _h3d__anim__$LinearFrame *h3d__anim__$LinearFrame;
typedef struct _h3d__anim__$LinearObject *h3d__anim__$LinearObject;
typedef struct _h3d__anim__$LinearAnimation *h3d__anim__$LinearAnimation;
typedef struct _h3d__shader__$UVDelta *h3d__shader__$UVDelta;
typedef struct _h3d__anim___Skin__$Permut *h3d__anim___Skin__$Permut;
typedef struct _h3d__col__$Sphere *h3d__col__$Sphere;
typedef struct _h3d__col__$OptimizedCollider *h3d__col__$OptimizedCollider;
typedef struct _h3d__col__$GroupCollider *h3d__col__$GroupCollider;
typedef struct _h3d__col__$FPoint *h3d__col__$FPoint;
typedef struct _h3d__col__$ObjectCollider *h3d__col__$ObjectCollider;
typedef struct _h3d__col__$TriPlane *h3d__col__$TriPlane;
typedef struct _h3d__col__$Polygon *h3d__col__$Polygon;
typedef struct _h3d__col__$PolygonBuffer *h3d__col__$PolygonBuffer;
typedef struct _h3d__col__$SkinCollider *h3d__col__$SkinCollider;
typedef struct _h3d__impl__$RenderFlag *h3d__impl__$RenderFlag;
typedef struct _h3d__impl__$QueryKind *h3d__impl__$QueryKind;
typedef struct _haxe__ds__$BalancedTree *haxe__ds__$BalancedTree;
typedef struct _haxe__ds__$TreeNode *haxe__ds__$TreeNode;
typedef struct _haxe__ds__$EnumValueMap *haxe__ds__$EnumValueMap;
typedef struct _hxsl__$HlslOut *hxsl__$HlslOut;
typedef struct _haxe__ds__BalancedTree *haxe__ds__BalancedTree;
typedef struct _haxe__ds__TreeNode *haxe__ds__TreeNode;
typedef struct _haxe__ds__EnumValueMap *haxe__ds__EnumValueMap;
typedef struct _h3d__mat__$Defaults *h3d__mat__$Defaults;
typedef struct _h3d__shader__$Shadow *h3d__shader__$Shadow;
typedef struct _h3d__shader__$VolumeDecal *h3d__shader__$VolumeDecal;
typedef struct _h3d__mat__$MaterialDatabase *h3d__mat__$MaterialDatabase;
typedef struct _h3d__mat__$MaterialSetup *h3d__mat__$MaterialSetup;
typedef struct _h3d__mat__MaterialSetup *h3d__mat__MaterialSetup;
typedef struct _h3d__mat__MaterialDatabase *h3d__mat__MaterialDatabase;
typedef struct _haxe__format__$JsonParser *haxe__format__$JsonParser;
typedef struct _hxd__res__$Any *hxd__res__$Any;
typedef struct _hxd__res__Any *hxd__res__Any;
typedef struct _hxd__fs__$NotFound *hxd__fs__$NotFound;
typedef struct _hxd__fs__$LocalFileSystem *hxd__fs__$LocalFileSystem;
typedef struct _h3d__pass__$Shadows *h3d__pass__$Shadows;
typedef struct _h3d__pass__$DirShadowMap *h3d__pass__$DirShadowMap;
typedef struct _h3d__shader__$ScreenShader *h3d__shader__$ScreenShader;
typedef struct _h3d__pass__$ScreenFx *h3d__pass__$ScreenFx;
typedef struct _h3d__pass__$Border *h3d__pass__$Border;
typedef struct _hxsl__$Channel *hxsl__$Channel;
typedef struct _h3d__shader__$DirShadow *h3d__shader__$DirShadow;
typedef struct _h3d__pass__$Blur *h3d__pass__$Blur;
typedef struct _h3d__pass__$RenderMode *h3d__pass__$RenderMode;
typedef struct _h3d__pass__$DefaultShadowMap *h3d__pass__$DefaultShadowMap;
typedef struct _h3d__scene__$DefaultRenderer *h3d__scene__$DefaultRenderer;
typedef struct _h3d__mat__$TextureArray *h3d__mat__$TextureArray;
typedef struct _h3d__shader__$Blur *h3d__shader__$Blur;
typedef struct _h3d__pass___Border__$BorderShader *h3d__pass___Border__$BorderShader;
typedef struct _h3d__prim__$RawPrimitive *h3d__prim__$RawPrimitive;
typedef struct _h3d__pass___Copy__$CopyShader *h3d__pass___Copy__$CopyShader;
typedef struct _h3d__pass__$Copy *h3d__pass__$Copy;
typedef struct _h3d__pass___CubeCopy__$CubeCopyShader *h3d__pass___CubeCopy__$CubeCopyShader;
typedef struct _h3d__pass__$CubeCopy *h3d__pass__$CubeCopy;
typedef struct _h3d__shader__$MinMaxShader *h3d__shader__$MinMaxShader;
typedef struct _haxe__io__$BytesInput *haxe__io__$BytesInput;
typedef struct _h3d__prim__$MeshPrimitive *h3d__prim__$MeshPrimitive;
typedef struct _hxd__fmt__hmd__$AnimationEvent *hxd__fmt__hmd__$AnimationEvent;
typedef struct _hxd__fmt__hmd__$AnimationObject *hxd__fmt__hmd__$AnimationObject;
typedef struct _hxd__fmt__hmd__$Property *hxd__fmt__hmd__$Property;
typedef struct _hxd__fmt__hmd__$Animation *hxd__fmt__hmd__$Animation;
typedef struct _hxd__fmt__hmd__$SkinSplit *hxd__fmt__hmd__$SkinSplit;
typedef struct _hxd__fmt__hmd__$Position *hxd__fmt__hmd__$Position;
typedef struct _h3d__Quat *h3d__Quat;
typedef struct _hxd__fmt__hmd__$SkinJoint *hxd__fmt__hmd__$SkinJoint;
typedef struct _hxd__fmt__hmd__$Skin *hxd__fmt__hmd__$Skin;
typedef struct _hxd__fmt__hmd__$Model *hxd__fmt__hmd__$Model;
typedef struct _hxd__fmt__hmd__$Material *hxd__fmt__hmd__$Material;
typedef struct _hxd__fmt__hmd__$GeometryFormat *hxd__fmt__hmd__$GeometryFormat;
typedef struct _hxd__fmt__hmd__$Geometry *hxd__fmt__hmd__$Geometry;
typedef struct _hxd__fmt__hmd__$Data *hxd__fmt__hmd__$Data;
typedef struct _hxd__fmt__hmd__$Library *hxd__fmt__hmd__$Library;
typedef struct _h3d__prim__$HMDModel *h3d__prim__$HMDModel;
typedef struct _hxd__fmt__hmd__$GeometryBuffer *hxd__fmt__hmd__$GeometryBuffer;
typedef struct _h3d__prim__$UV *h3d__prim__$UV;
typedef struct _h3d__prim__$Polygon *h3d__prim__$Polygon;
typedef struct _h3d__prim__$ModelCache *h3d__prim__$ModelCache;
typedef struct _hxd__res__$Model *hxd__res__$Model;
typedef struct _h3d__prim__$Plane2D *h3d__prim__$Plane2D;
typedef struct _h3d__scene__$DepthPass *h3d__scene__$DepthPass;
typedef struct _h3d__scene__$NormalPass *h3d__scene__$NormalPass;
typedef struct _h3d__scene__$PassObjects *h3d__scene__$PassObjects;
typedef struct _hxd__impl__$ArrayIterator_h3d_scene_Object *hxd__impl__$ArrayIterator_h3d_scene_Object;
typedef struct _h3d__shader__$VertexColorAlpha *h3d__shader__$VertexColorAlpha;
typedef struct _h3d__shader__$AmbientLight *h3d__shader__$AmbientLight;
typedef struct _h3d__shader__$SkinTangent *h3d__shader__$SkinTangent;
typedef struct _h3d__shader__$Skin *h3d__shader__$Skin;
typedef struct _h3d__shader__$CubeMinMaxShader *h3d__shader__$CubeMinMaxShader;
typedef struct _haxe__$StackItem *haxe__$StackItem;
typedef struct _haxe__$EntryPoint *haxe__$EntryPoint;
typedef struct _haxe___Int64__$___Int64 *haxe___Int64__$___Int64;
typedef struct _haxe__$MainLoop *haxe__$MainLoop;
typedef struct _haxe__$Resource *haxe__$Resource;
typedef struct _haxe___Resource__$ResourceContent *haxe___Resource__$ResourceContent;
typedef struct _haxe__$Serializer *haxe__$Serializer;
typedef struct _haxe___Unserializer__$DefaultResolver *haxe___Unserializer__$DefaultResolver;
typedef struct _haxe__$Unserializer *haxe__$Unserializer;
typedef struct _haxe__io__$Error *haxe__io__$Error;
typedef struct _haxe__crypto__$BaseCode *haxe__crypto__$BaseCode;
typedef struct _haxe__crypto__$Base64 *haxe__crypto__$Base64;
typedef struct _haxe__io__$BytesDataImpl *haxe__io__$BytesDataImpl;
typedef struct _hl__$NativeArrayIterator_Int *hl__$NativeArrayIterator_Int;
typedef struct _hl__$NativeArrayIterator_Dynamic *hl__$NativeArrayIterator_Dynamic;
typedef struct _hl__$NativeArrayIterator *hl__$NativeArrayIterator;
typedef struct _haxe__ds___StringMap__$StringMapKeysIterator *haxe__ds___StringMap__$StringMapKeysIterator;
typedef struct _haxe__format__$JsonPrinter *haxe__format__$JsonPrinter;
typedef struct _haxe__io__$FPHelper *haxe__io__$FPHelper;
typedef struct _haxe__io__$Path *haxe__io__$Path;
typedef struct _haxe__xml__$XmlParserException *haxe__xml__$XmlParserException;
typedef struct _haxe__xml__$Parser *haxe__xml__$Parser;
typedef struct _haxe__xml__$Printer *haxe__xml__$Printer;
typedef struct _haxe__zip__$Compress *haxe__zip__$Compress;
typedef struct _haxe__zip__$FlushMode *haxe__zip__$FlushMode;
typedef struct _haxe__zip__$Uncompress *haxe__zip__$Uncompress;
typedef struct _hl__$Mikktspace *hl__$Mikktspace;
typedef struct _hl__$Window *hl__$Window;
typedef struct _hl__$Button *hl__$Button;
typedef struct _hl__$WinLog *hl__$WinLog;
typedef struct _hl__types__$BytesIterator_Float *hl__types__$BytesIterator_Float;
typedef struct _hl__types__$BytesIterator_Int *hl__types__$BytesIterator_Int;
typedef struct _hl__types__$BytesIterator_Single *hl__types__$BytesIterator_Single;
typedef struct _hl__types__$BytesIterator_hl_UI16 *hl__types__$BytesIterator_hl_UI16;
typedef struct _hl__types__$ArrayDynIterator *hl__types__$ArrayDynIterator;
typedef struct _hxd___FloatBuffer__$InnerIterator *hxd___FloatBuffer__$InnerIterator;
typedef struct _hxd___IndexBuffer__$InnerIterator *hxd___IndexBuffer__$InnerIterator;
typedef struct _hxd__$Key *hxd__$Key;
typedef struct _hxd__Event *hxd__Event;
typedef struct _hxd__fmt__bfnt__$Reader *hxd__fmt__bfnt__$Reader;
typedef struct _h2d__Font *h2d__Font;
typedef struct _h2d__FontChar *h2d__FontChar;
typedef struct _h2d__Kerning *h2d__Kerning;
typedef struct _hxd__fmt__bfnt__$Writer *hxd__fmt__bfnt__$Writer;
typedef struct _hxd__fmt__fbx__$FbxProp *hxd__fmt__fbx__$FbxProp;
typedef struct _hxd__fmt__fbx__$TmpObject *hxd__fmt__fbx__$TmpObject;
typedef struct _hxd__fmt__fbx__$DefaultMatrixes *hxd__fmt__fbx__$DefaultMatrixes;
typedef struct _hxd__fmt__fbx___BaseLibrary__$AnimCurve *hxd__fmt__fbx___BaseLibrary__$AnimCurve;
typedef struct _hxd__fmt__fbx__$BaseLibrary *hxd__fmt__fbx__$BaseLibrary;
typedef struct _hxd__fmt__fbx__$Geometry *hxd__fmt__fbx__$Geometry;
typedef struct _hxd__fmt__fbx__$HMDOut *hxd__fmt__fbx__$HMDOut;
typedef struct _hxd__fmt__fbx___Parser__$Token *hxd__fmt__fbx___Parser__$Token;
typedef struct _hxd__fmt__fbx__$Parser *hxd__fmt__fbx__$Parser;
typedef struct _hxd__fmt__hmd___Library__$FormatMap *hxd__fmt__hmd___Library__$FormatMap;
typedef struct _hxd__fmt__hmd__$Reader *hxd__fmt__hmd__$Reader;
typedef struct _hxd__fmt__hmd__$Writer *hxd__fmt__hmd__$Writer;
typedef struct _hxd__impl__$ArrayIterator_hxd_fs_FileEntry *hxd__impl__$ArrayIterator_hxd_fs_FileEntry;
typedef struct _hxd__fs__$BytesFileEntry *hxd__fs__$BytesFileEntry;
typedef struct _hxd__fs__$BytesFileSystem *hxd__fs__$BytesFileSystem;
typedef struct _hxd__fs__$Convert *hxd__fs__$Convert;
typedef struct _hxd__fs__$ConvertFBX2HMD *hxd__fs__$ConvertFBX2HMD;
typedef struct _hxd__fs__$Command *hxd__fs__$Command;
typedef struct _hxd__fs__$ConvertWAV2MP3 *hxd__fs__$ConvertWAV2MP3;
typedef struct _hxd__fs__$ConvertWAV2OGG *hxd__fs__$ConvertWAV2OGG;
typedef struct _hxd__fs__$ConvertTGA2PNG *hxd__fs__$ConvertTGA2PNG;
typedef struct _hxd__fs__$ConvertFNT2BFNT *hxd__fs__$ConvertFNT2BFNT;
typedef struct _hxd__fs___EmbedFileSystem__$EmbedEntry *hxd__fs___EmbedFileSystem__$EmbedEntry;
typedef struct _hxd__fs__$FileInput *hxd__fs__$FileInput;
typedef struct _sys__io__$FileInput *sys__io__$FileInput;
typedef struct _hxd__fs___LocalFileSystem__$LocalEntry *hxd__fs___LocalFileSystem__$LocalEntry;
typedef struct _sys__io__$FileOutput *sys__io__$FileOutput;
typedef struct _sys__io__$FileSeek *sys__io__$FileSeek;
typedef struct _hxd__impl__$ArrayIterator *hxd__impl__$ArrayIterator;
typedef struct _hxd__impl__$ArrayIterator_hxd_res_Any *hxd__impl__$ArrayIterator_hxd_res_Any;
typedef struct _hxd__prefab__$ContextShared *hxd__prefab__$ContextShared;
typedef struct _hxd__prefab__$Context *hxd__prefab__$Context;
typedef struct _hxd__prefab__$Library *hxd__prefab__$Library;
typedef struct _hxd__prefab__$Unknown *hxd__prefab__$Unknown;
typedef struct _hxd__prefab__rfx__$Step *hxd__prefab__rfx__$Step;
typedef struct _hxd__res___Any__$SingleFileSystem *hxd__res___Any__$SingleFileSystem;
typedef struct _hxd__snd__$ChannelBase *hxd__snd__$ChannelBase;
typedef struct _hxd__snd__$ChannelGroup *hxd__snd__$ChannelGroup;
typedef struct _hxd__snd__$SoundGroup *hxd__snd__$SoundGroup;
typedef struct _hxd__snd__openal__$BufferHandle *hxd__snd__openal__$BufferHandle;
typedef struct _hxd__snd__$Buffer *hxd__snd__$Buffer;
typedef struct _hxd__snd__openal__$SourceHandle *hxd__snd__openal__$SourceHandle;
typedef struct _hxd__snd__$Source *hxd__snd__$Source;
typedef struct _hxd__snd__$SampleFormat *hxd__snd__$SampleFormat;
typedef struct _hxd__snd__$EffectDriver *hxd__snd__$EffectDriver;
typedef struct _hxd__snd__$Effect *hxd__snd__$Effect;
typedef struct _hxd__snd__$Listener *hxd__snd__$Listener;
typedef struct _hxd__snd__$Manager *hxd__snd__$Manager;
typedef struct _hxd__snd__Manager *hxd__snd__Manager;
typedef struct _hxd__snd__SoundGroup *hxd__snd__SoundGroup;
typedef struct _hxd__snd__ChannelBase *hxd__snd__ChannelBase;
typedef struct _hxd__snd__ChannelGroup *hxd__snd__ChannelGroup;
typedef struct _hxd__snd__Listener *hxd__snd__Listener;
typedef struct _hxd__snd__openal__SourceHandle *hxd__snd__openal__SourceHandle;
typedef struct _hxd__snd__openal__BufferHandle *hxd__snd__openal__BufferHandle;
typedef struct _hxd__snd__EffectDriver *hxd__snd__EffectDriver;
typedef struct _hxd__snd__Channel *hxd__snd__Channel;
typedef struct _hxd__snd__Source *hxd__snd__Source;
typedef struct _hxd__res__Sound *hxd__res__Sound;
typedef struct _hxd__snd__Data *hxd__snd__Data;
typedef struct _hxd__snd__Effect *hxd__snd__Effect;
typedef struct _hxd__snd__$Channel *hxd__snd__$Channel;
typedef struct _hxd__snd__$Data *hxd__snd__$Data;
typedef struct _hxd__res__$SoundFormat *hxd__res__$SoundFormat;
typedef struct _hxd__res__$Sound *hxd__res__$Sound;
typedef struct _hxd__res__$Prefab *hxd__res__$Prefab;
typedef struct _hxd__res__$BitmapFont *hxd__res__$BitmapFont;
typedef struct _hxd__res__$DefaultFont *hxd__res__$DefaultFont;
typedef struct _hxd__snd__$Mp3Data *hxd__snd__$Mp3Data;
typedef struct _hxd__snd__$OggData *hxd__snd__$OggData;
typedef struct _hxd__snd__$WavData *hxd__snd__$WavData;
typedef struct _hxd__snd__openal__$Driver *hxd__snd__openal__$Driver;
typedef struct _hxd__snd__effect__$LowPass *hxd__snd__effect__$LowPass;
typedef struct _hxd__snd__effect__$Pitch *hxd__snd__effect__$Pitch;
typedef struct _hxd__snd__effect__$Reverb *hxd__snd__effect__$Reverb;
typedef struct _hxd__snd__effect__$ReverbPreset *hxd__snd__effect__$ReverbPreset;
typedef struct _hxd__snd__effect__ReverbPreset *hxd__snd__effect__ReverbPreset;
typedef struct _hxd__snd__effect__$Spatialization *hxd__snd__effect__$Spatialization;
typedef struct _hxd__snd__openal__$LowPassDriver *hxd__snd__openal__$LowPassDriver;
typedef struct _hxd__snd__openal__$PitchDriver *hxd__snd__openal__$PitchDriver;
typedef struct _hxd__snd__openal__$ReverbDriver *hxd__snd__openal__$ReverbDriver;
typedef struct _hxd__snd__openal__$SpatializationDriver *hxd__snd__openal__$SpatializationDriver;
typedef struct _hxsl__$Error *hxsl__$Error;
typedef struct _hxsl__$Tools *hxsl__$Tools;
typedef struct _hxsl___Linker__$ShaderInfos *hxsl___Linker__$ShaderInfos;
typedef struct _hxsl___Linker__$AllocatedVar *hxsl___Linker__$AllocatedVar;
typedef struct _hxsl__$Linker *hxsl__$Linker;
typedef struct _hxsl__$Splitter *hxsl__$Splitter;
typedef struct _hxsl__$Dce *hxsl__$Dce;
typedef struct _hxsl__$Flatten *hxsl__$Flatten;
typedef struct _hxsl___Flatten__$Alloc *hxsl___Flatten__$Alloc;
typedef struct _hxsl__$Clone *hxsl__$Clone;
typedef struct _hxsl___Dce__$Exit *hxsl___Dce__$Exit;
typedef struct _hxsl___Dce__$VarDeps *hxsl___Dce__$VarDeps;
typedef struct _hxsl__$Eval *hxsl__$Eval;
typedef struct _hxsl__$Printer *hxsl__$Printer;
typedef struct _hxsl__$ARead *hxsl__$ARead;
typedef struct _hxsl___Splitter__$VarProps *hxsl___Splitter__$VarProps;
typedef struct _$Lambda *$Lambda;
typedef struct _h3d__$IDrawable *h3d__$IDrawable;
typedef struct _$Reflect *$Reflect;
typedef struct _hl__CoreType *hl__CoreType;
typedef struct _hl__CoreEnum *hl__CoreEnum;
typedef struct _hl___Bytes__$Bytes_Impl_ *hl___Bytes__$Bytes_Impl_;
typedef struct _sys__$FileSystem *sys__$FileSystem;
typedef struct _$Type *$Type;
typedef struct _dx___Cursor__$Cursor_Impl_ *dx___Cursor__$Cursor_Impl_;
typedef struct _dx_cursor dx_cursor;
typedef struct _dx___Driver__$Shader_Impl_ *dx___Driver__$Shader_Impl_;
typedef struct _dx___Driver__$Layout_Impl_ *dx___Driver__$Layout_Impl_;
typedef struct _dx___Driver__$RasterState_Impl_ *dx___Driver__$RasterState_Impl_;
typedef struct _dx___Driver__$RenderTargetView_Impl_ *dx___Driver__$RenderTargetView_Impl_;
typedef struct _dx___Driver__$DepthStencilView_Impl_ *dx___Driver__$DepthStencilView_Impl_;
typedef struct _dx___Driver__$DepthStencilState_Impl_ *dx___Driver__$DepthStencilState_Impl_;
typedef struct _dx___Driver__$BlendState_Impl_ *dx___Driver__$BlendState_Impl_;
typedef struct _dx___Driver__$SamplerState_Impl_ *dx___Driver__$SamplerState_Impl_;
typedef struct _dx___Driver__$ShaderResourceView_Impl_ *dx___Driver__$ShaderResourceView_Impl_;
typedef struct _dx___Driver__$DxBool_Impl_ *dx___Driver__$DxBool_Impl_;
typedef struct _dx___Driver__$PrimitiveTopology_Impl_ *dx___Driver__$PrimitiveTopology_Impl_;
typedef struct _dx__$Driver *dx__$Driver;
typedef struct _dx_driver dx_driver;
typedef struct _dx__RenderTargetDesc *dx__RenderTargetDesc;
typedef struct _dx__RasterizerDesc *dx__RasterizerDesc;
typedef struct _dx__Texture2dDesc *dx__Texture2dDesc;
typedef struct _dx__DepthStencilDesc *dx__DepthStencilDesc;
typedef struct _dx__SamplerDesc *dx__SamplerDesc;
typedef struct _dx__ShaderResourceViewDesc *dx__ShaderResourceViewDesc;
typedef struct _dx___Resource__$Resource_Impl_ *dx___Resource__$Resource_Impl_;
typedef struct _dx__ResourceBox *dx__ResourceBox;
typedef struct _format__mp3__$CChannelMode *format__mp3__$CChannelMode;
typedef struct _format__mp3__$CEmphasis *format__mp3__$CEmphasis;
typedef struct _format__mp3__$Tools *format__mp3__$Tools;
typedef struct _format__png__$Tools *format__png__$Tools;
typedef struct _format__tools__$Deflate *format__tools__$Deflate;
typedef struct _format__tools__$Inflate *format__tools__$Inflate;
typedef struct _hxd__$Interactive *hxd__$Interactive;
typedef struct _hxd__$InteractiveScene *hxd__$InteractiveScene;
typedef struct _hxd__impl___Serializable__$NoSerializeSupport *hxd__impl___Serializable__$NoSerializeSupport;
typedef struct _h3d__col__$Collider *h3d__col__$Collider;
typedef struct _h3d__scene___Object__$ObjectFlags_Impl_ *h3d__scene___Object__$ObjectFlags_Impl_;
typedef struct _haxe__$CallStack *haxe__$CallStack;
typedef struct _StringBuf *StringBuf;
typedef struct _haxe__$IMap *haxe__$IMap;
typedef struct _haxe__crypto__$Md5 *haxe__crypto__$Md5;
typedef struct _haxe__crypto__$Sha1 *haxe__crypto__$Sha1;
typedef struct _haxe__ds__$ArraySort *haxe__ds__$ArraySort;
typedef struct _haxe__xml___Access__$NodeAccess_Impl_ *haxe__xml___Access__$NodeAccess_Impl_;
typedef struct _haxe__xml___Access__$AttribAccess_Impl_ *haxe__xml___Access__$AttribAccess_Impl_;
typedef struct _haxe__xml___Access__$HasNodeAccess_Impl_ *haxe__xml___Access__$HasNodeAccess_Impl_;
typedef struct _haxe__xml___Access__$Access_Impl_ *haxe__xml___Access__$Access_Impl_;
typedef struct _hl__types___BytesMap__$BytesMap_Impl_ *hl__types___BytesMap__$BytesMap_Impl_;
typedef struct _hl__$Format *hl__$Format;
typedef struct _hl___NativeArray__$NativeArray_Impl_ *hl___NativeArray__$NativeArray_Impl_;
typedef struct _hl___Type__$Type_Impl_ *hl___Type__$Type_Impl_;
typedef struct _hl___UI__$Sentinel_Impl_ *hl___UI__$Sentinel_Impl_;
typedef struct _hl__$UI *hl__$UI;
typedef struct _hl__Window *hl__Window;
typedef struct _ui_window ui_window;
typedef struct _hl__types__$ArrayDyn *hl__types__$ArrayDyn;
typedef struct _hl__types___IntMap__$IntMap_Impl_ *hl__types___IntMap__$IntMap_Impl_;
typedef struct _hl__types___ObjectMap__$ObjectMap_Impl_ *hl__types___ObjectMap__$ObjectMap_Impl_;
typedef struct _hxd__$File *hxd__$File;
typedef struct _hxd___FloatBuffer__$FloatBuffer_Impl_ *hxd___FloatBuffer__$FloatBuffer_Impl_;
typedef struct _hxd___FloatBuffer__InnerIterator *hxd___FloatBuffer__InnerIterator;
typedef struct _hxd___IndexBuffer__$IndexBuffer_Impl_ *hxd___IndexBuffer__$IndexBuffer_Impl_;
typedef struct _hxd___IndexBuffer__InnerIterator *hxd___IndexBuffer__InnerIterator;
typedef struct _hxd__$Math *hxd__$Math;
typedef struct _hxd__$Flags *hxd__$Flags;
typedef struct _hxd___Pixels__$PixelsARGB_Impl_ *hxd___Pixels__$PixelsARGB_Impl_;
typedef struct _hxd___Pixels__$PixelsFloat_Impl_ *hxd___Pixels__$PixelsFloat_Impl_;
typedef struct _hxd___Pixels__$Channel_Impl_ *hxd___Pixels__$Channel_Impl_;
typedef struct _hxd__$Res *hxd__$Res;
typedef struct _hxd__fmt__bfnt__$FontParser *hxd__fmt__bfnt__$FontParser;
typedef struct _hxd__fmt__fbx__$FbxTools *hxd__fmt__fbx__$FbxTools;
typedef struct _hxd__fmt__hmd___Data__$GeometryDataFormat_Impl_ *hxd__fmt__hmd___Data__$GeometryDataFormat_Impl_;
typedef struct _hxd__fmt__hmd__$AnimationFlag *hxd__fmt__hmd__$AnimationFlag;
typedef struct _hxd__fs__$FileSystem *hxd__fs__$FileSystem;
typedef struct _hxd__fs___LoadedBitmap__$LoadedBitmap_Impl_ *hxd__fs___LoadedBitmap__$LoadedBitmap_Impl_;
typedef struct _hxd__impl___UncheckedBytes__$UncheckedBytes_Impl_ *hxd__impl___UncheckedBytes__$UncheckedBytes_Impl_;
typedef struct _hxd__res__$Embed *hxd__res__$Embed;
typedef struct _hxd__res___Image__$ImageFormat_Impl_ *hxd__res___Image__$ImageFormat_Impl_;
typedef struct _hxd__snd__$Driver *hxd__snd__$Driver;
typedef struct _hxsl__$ExprDef *hxsl__$ExprDef;
typedef struct _hxsl__$Tools2 *hxsl__$Tools2;
typedef struct _hxsl__$Tools3 *hxsl__$Tools3;
typedef struct _hxsl__$Tools4 *hxsl__$Tools4;
typedef struct _hxsl___Globals__$GlobalSlot_Impl_ *hxsl___Globals__$GlobalSlot_Impl_;
typedef struct _hxsl__Globals *hxsl__Globals;
typedef struct _hxsl__$ChannelTools *hxsl__$ChannelTools;
typedef struct _openal___AL__$Buffer_Impl_ *openal___AL__$Buffer_Impl_;
typedef struct _openal___AL__$Source_Impl_ *openal___AL__$Source_Impl_;
typedef struct _openal___EFX__$Effect_Impl_ *openal___EFX__$Effect_Impl_;
typedef struct _openal___EFX__$Filter_Impl_ *openal___EFX__$Filter_Impl_;
typedef struct _openal___EFX__$EffectSlot_Impl_ *openal___EFX__$EffectSlot_Impl_;
typedef struct _sys__io__$File *sys__io__$File;
typedef struct _haxe__io__Input *haxe__io__Input;
typedef struct _sys__io__FileInput *sys__io__FileInput;
typedef struct _hl_fdesc hl_fdesc;
typedef struct _haxe__io__Output *haxe__io__Output;
typedef struct _sys__io__FileOutput *sys__io__FileOutput;
typedef struct _fmt_ogg fmt_ogg;
typedef struct _fmt_zip fmt_zip;
typedef struct _alc_device alc_device;
typedef struct _alc_context alc_context;
typedef struct _hxd__App *hxd__App;
typedef struct _h3d__scene__Object *h3d__scene__Object;
typedef struct _h3d__anim__Animation *h3d__anim__Animation;
typedef struct _h3d__scene__Scene *h3d__scene__Scene;
typedef struct _h3d__Camera *h3d__Camera;
typedef struct _h3d__scene__LightSystem *h3d__scene__LightSystem;
typedef struct _h3d__impl__RenderContext *h3d__impl__RenderContext;
typedef struct _h3d__impl__TextureCache *h3d__impl__TextureCache;
typedef struct _h3d__scene__RenderContext *h3d__scene__RenderContext;
typedef struct _h3d__pass__Object *h3d__pass__Object;
typedef struct _h3d__scene__Light *h3d__scene__Light;
typedef struct _h3d__scene__Renderer *h3d__scene__Renderer;
typedef struct _h3d__pass__Base *h3d__pass__Base;
typedef struct _hxd__SceneEvents *hxd__SceneEvents;
typedef struct _h3d__pass__Default *h3d__pass__Default;
typedef struct _h3d__pass__ShaderManager *h3d__pass__ShaderManager;
typedef struct _h3d__shader__Buffers *h3d__shader__Buffers;
typedef struct _h3d__shader__ShaderBuffers *h3d__shader__ShaderBuffers;
typedef struct _h3d__pass__HardwarePick *h3d__pass__HardwarePick;
typedef struct _h3d__pass___HardwarePick__FixedColor *h3d__pass___HardwarePick__FixedColor;
typedef struct _h2d__Layers *h2d__Layers;
typedef struct _h2d__Scene *h2d__Scene;
typedef struct _h2d__RenderContext *h2d__RenderContext;
typedef struct _h3d__shader__Base2d *h3d__shader__Base2d;
typedef struct _hxd__fs__EmbedFileSystem *hxd__fs__EmbedFileSystem;
typedef struct _Main *Main;
typedef struct _h2d__Bitmap *h2d__Bitmap;
typedef struct _h2d__Text *h2d__Text;
typedef struct _h2d__TileGroup *h2d__TileGroup;
typedef struct _h3d__prim__Primitive *h3d__prim__Primitive;
typedef struct _h2d___TileGroup__TileLayerContent *h2d___TileGroup__TileLayerContent;
typedef struct _hxd__res__Image *hxd__res__Image;
typedef struct _SysError *SysError;
typedef struct _dx__LayoutElement *dx__LayoutElement;
typedef struct _dx__RenderTargetBlendDesc *dx__RenderTargetBlendDesc;
typedef struct _format__gif__Reader *format__gif__Reader;
typedef struct _haxe__io__BytesOutput *haxe__io__BytesOutput;
typedef struct _haxe__io__BytesBuffer *haxe__io__BytesBuffer;
typedef struct _format__mp3__Reader *format__mp3__Reader;
typedef struct _format__tools__BitsInput *format__tools__BitsInput;
typedef struct _haxe__io__Eof *haxe__io__Eof;
typedef struct _format__png__Writer *format__png__Writer;
typedef struct _haxe__crypto__Crc32 *haxe__crypto__Crc32;
typedef struct _format__tga__Reader *format__tga__Reader;
typedef struct _format__wav__Reader *format__wav__Reader;
typedef struct _hxd__impl__ArrayIterator_h2d_Object *hxd__impl__ArrayIterator_h2d_Object;
typedef struct _h3d__shader__ColorAdd *h3d__shader__ColorAdd;
typedef struct _h3d__shader__ColorKey *h3d__shader__ColorKey;
typedef struct _h3d__shader__ColorMatrix *h3d__shader__ColorMatrix;
typedef struct _hxsl___ShaderList__ShaderIterator *hxsl___ShaderList__ShaderIterator;
typedef struct _h2d__Interactive *h2d__Interactive;
typedef struct _h2d__Mask *h2d__Mask;
typedef struct _h3d__BufferOffset *h3d__BufferOffset;
typedef struct _h3d__col__Frustum *h3d__col__Frustum;
typedef struct _h3d__impl__DirectXDriver *h3d__impl__DirectXDriver;
typedef struct _h3d__impl___DirectXDriver__CompiledShader *h3d__impl___DirectXDriver__CompiledShader;
typedef struct _h3d__impl___DirectXDriver__ShaderContext *h3d__impl___DirectXDriver__ShaderContext;
typedef struct _h3d__impl__PipelineState *h3d__impl__PipelineState;
typedef struct _h3d__impl__InstanceBuffer *h3d__impl__InstanceBuffer;
typedef struct _h3d__anim__AnimatedObject *h3d__anim__AnimatedObject;
typedef struct _h3d__scene__Mesh *h3d__scene__Mesh;
typedef struct _h3d__scene__MultiMaterial *h3d__scene__MultiMaterial;
typedef struct _h3d__scene__Skin *h3d__scene__Skin;
typedef struct _h3d__anim__Skin *h3d__anim__Skin;
typedef struct _h3d__shader__SkinBase *h3d__shader__SkinBase;
typedef struct _h3d__scene__Graphics *h3d__scene__Graphics;
typedef struct _h3d__prim__BigPrimitive *h3d__prim__BigPrimitive;
typedef struct _h3d__shader__LineShader *h3d__shader__LineShader;
typedef struct _h3d__anim__Joint *h3d__anim__Joint;
typedef struct _h3d__scene__Joint *h3d__scene__Joint;
typedef struct _h3d__anim__LinearFrame *h3d__anim__LinearFrame;
typedef struct _h3d__anim__LinearObject *h3d__anim__LinearObject;
typedef struct _h3d__anim__LinearAnimation *h3d__anim__LinearAnimation;
typedef struct _h3d__shader__UVDelta *h3d__shader__UVDelta;
typedef struct _h3d__anim___Skin__Permut *h3d__anim___Skin__Permut;
typedef struct _h3d__anim___Skin__Influence *h3d__anim___Skin__Influence;
typedef struct _h3d__col__Sphere *h3d__col__Sphere;
typedef struct _h3d__col__OptimizedCollider *h3d__col__OptimizedCollider;
typedef struct _h3d__col__GroupCollider *h3d__col__GroupCollider;
typedef struct _h3d__col__FPoint *h3d__col__FPoint;
typedef struct _h3d__col__ObjectCollider *h3d__col__ObjectCollider;
typedef struct _h3d__col__TriPlane *h3d__col__TriPlane;
typedef struct _h3d__col__Polygon *h3d__col__Polygon;
typedef struct _h3d__col__PolygonBuffer *h3d__col__PolygonBuffer;
typedef struct _h3d__col__SkinCollider *h3d__col__SkinCollider;
typedef struct _hxsl__HlslOut *hxsl__HlslOut;
typedef struct _h3d__shader__Shadow *h3d__shader__Shadow;
typedef struct _h3d__shader__VolumeDecal *h3d__shader__VolumeDecal;
typedef struct _haxe__format__JsonParser *haxe__format__JsonParser;
typedef struct _hxd__fs__NotFound *hxd__fs__NotFound;
typedef struct _hxd__fs__LocalFileSystem *hxd__fs__LocalFileSystem;
typedef struct _h3d__scene__DefaultRenderer *h3d__scene__DefaultRenderer;
typedef struct _h3d__pass__Shadows *h3d__pass__Shadows;
typedef struct _h3d__pass__ScreenFx *h3d__pass__ScreenFx;
typedef struct _h3d__shader__ScreenShader *h3d__shader__ScreenShader;
typedef struct _h3d__pass__Blur *h3d__pass__Blur;
typedef struct _h3d__pass__DirShadowMap *h3d__pass__DirShadowMap;
typedef struct _h3d__shader__DirShadow *h3d__shader__DirShadow;
typedef struct _h3d__pass__Border *h3d__pass__Border;
typedef struct _h3d__pass__DefaultShadowMap *h3d__pass__DefaultShadowMap;
typedef struct _h3d__mat__TextureArray *h3d__mat__TextureArray;
typedef struct _h3d__scene___RenderContext__SharedGlobal *h3d__scene___RenderContext__SharedGlobal;
typedef struct _h3d__shader__Blur *h3d__shader__Blur;
typedef struct _h3d__pass___Border__BorderShader *h3d__pass___Border__BorderShader;
typedef struct _h3d__prim__RawPrimitive *h3d__prim__RawPrimitive;
typedef struct _h3d__pass___Copy__CopyShader *h3d__pass___Copy__CopyShader;
typedef struct _h3d__pass__Copy *h3d__pass__Copy;
typedef struct _h3d__pass___CubeCopy__CubeCopyShader *h3d__pass___CubeCopy__CubeCopyShader;
typedef struct _h3d__pass__CubeCopy *h3d__pass__CubeCopy;
typedef struct _h3d__shader__MinMaxShader *h3d__shader__MinMaxShader;
typedef struct _haxe__io__BytesInput *haxe__io__BytesInput;
typedef struct _h3d__prim__MeshPrimitive *h3d__prim__MeshPrimitive;
typedef struct _h3d__prim__HMDModel *h3d__prim__HMDModel;
typedef struct _hxd__fmt__hmd__Geometry *hxd__fmt__hmd__Geometry;
typedef struct _hxd__fmt__hmd__Library *hxd__fmt__hmd__Library;
typedef struct _hxd__fmt__hmd__Data *hxd__fmt__hmd__Data;
typedef struct _hxd__fmt__hmd__GeometryBuffer *hxd__fmt__hmd__GeometryBuffer;
typedef struct _hxd__fmt__hmd__GeometryFormat *hxd__fmt__hmd__GeometryFormat;
typedef struct _h3d__prim__Polygon *h3d__prim__Polygon;
typedef struct _hxd__fmt__hmd__Model *hxd__fmt__hmd__Model;
typedef struct _hxd__fmt__hmd__Position *hxd__fmt__hmd__Position;
typedef struct _hxd__fmt__hmd__Skin *hxd__fmt__hmd__Skin;
typedef struct _h3d__prim__ModelCache *h3d__prim__ModelCache;
typedef struct _hxd__res__Model *hxd__res__Model;
typedef struct _h3d__prim__Plane2D *h3d__prim__Plane2D;
typedef struct _h3d__prim__UV *h3d__prim__UV;
typedef struct _h3d__scene__DepthPass *h3d__scene__DepthPass;
typedef struct _h3d__scene__NormalPass *h3d__scene__NormalPass;
typedef struct _hxd__prefab__rfx__RendererFX *hxd__prefab__rfx__RendererFX;
typedef struct _h3d__scene__PassObjects *h3d__scene__PassObjects;
typedef struct _h3d__scene___Graphics__GPoint *h3d__scene___Graphics__GPoint;
typedef struct _hxd__impl__ArrayIterator_h3d_scene_Object *hxd__impl__ArrayIterator_h3d_scene_Object;
typedef struct _h3d__shader__VertexColorAlpha *h3d__shader__VertexColorAlpha;
typedef struct _h3d__scene__Interactive *h3d__scene__Interactive;
typedef struct _h3d__shader__AmbientLight *h3d__shader__AmbientLight;
typedef struct _h3d__shader__SkinTangent *h3d__shader__SkinTangent;
typedef struct _h3d__shader__Skin *h3d__shader__Skin;
typedef struct _h3d__shader__CubeMinMaxShader *h3d__shader__CubeMinMaxShader;
typedef struct _haxe___Int64_____Int64 *haxe___Int64_____Int64;
typedef struct _haxe___Resource__ResourceContent *haxe___Resource__ResourceContent;
typedef struct _haxe__Serializer *haxe__Serializer;
typedef struct _haxe___Unserializer__DefaultResolver *haxe___Unserializer__DefaultResolver;
typedef struct _haxe__Unserializer *haxe__Unserializer;
typedef struct _haxe__crypto__BaseCode *haxe__crypto__BaseCode;
typedef struct _haxe__io__BytesDataImpl *haxe__io__BytesDataImpl;
typedef struct _hl__NativeArrayIterator_Int *hl__NativeArrayIterator_Int;
typedef struct _hl__NativeArrayIterator_Dynamic *hl__NativeArrayIterator_Dynamic;
typedef struct _hl__NativeArrayIterator *hl__NativeArrayIterator;
typedef struct _haxe__ds___StringMap__StringMapKeysIterator *haxe__ds___StringMap__StringMapKeysIterator;
typedef struct _haxe__format__JsonPrinter *haxe__format__JsonPrinter;
typedef struct _haxe__io__Path *haxe__io__Path;
typedef struct _haxe__xml__XmlParserException *haxe__xml__XmlParserException;
typedef struct _haxe__xml__Printer *haxe__xml__Printer;
typedef struct _haxe__zip__Compress *haxe__zip__Compress;
typedef struct _haxe__zip__Uncompress *haxe__zip__Uncompress;
typedef struct _hl__Mikktspace *hl__Mikktspace;
typedef struct _hl__Button *hl__Button;
typedef struct _hl__WinLog *hl__WinLog;
typedef struct _hl__types__BytesIterator_Float *hl__types__BytesIterator_Float;
typedef struct _hl__types__BytesIterator_Int *hl__types__BytesIterator_Int;
typedef struct _hl__types__BytesIterator_Single *hl__types__BytesIterator_Single;
typedef struct _hl__types__BytesIterator_hl_UI16 *hl__types__BytesIterator_hl_UI16;
typedef struct _hl__types__ArrayDynIterator *hl__types__ArrayDynIterator;
typedef struct _hxd__fmt__bfnt__Reader *hxd__fmt__bfnt__Reader;
typedef struct _hxd__fmt__bfnt__Writer *hxd__fmt__bfnt__Writer;
typedef struct _hxd__fmt__fbx__TmpObject *hxd__fmt__fbx__TmpObject;
typedef struct _hxd__fmt__fbx___BaseLibrary__AnimCurve *hxd__fmt__fbx___BaseLibrary__AnimCurve;
typedef struct _hxd__fmt__fbx__DefaultMatrixes *hxd__fmt__fbx__DefaultMatrixes;
typedef struct _hxd__fmt__fbx__BaseLibrary *hxd__fmt__fbx__BaseLibrary;
typedef struct _hxd__fmt__fbx__Geometry *hxd__fmt__fbx__Geometry;
typedef struct _hxd__fmt__fbx__HMDOut *hxd__fmt__fbx__HMDOut;
typedef struct _hxd__fmt__hmd__Material *hxd__fmt__hmd__Material;
typedef struct _hxd__fmt__hmd__SkinJoint *hxd__fmt__hmd__SkinJoint;
typedef struct _hxd__fmt__hmd__SkinSplit *hxd__fmt__hmd__SkinSplit;
typedef struct _hxd__fmt__hmd__Animation *hxd__fmt__hmd__Animation;
typedef struct _hxd__fmt__hmd__AnimationEvent *hxd__fmt__hmd__AnimationEvent;
typedef struct _hxd__fmt__hmd__AnimationObject *hxd__fmt__hmd__AnimationObject;
typedef struct _hxd__fmt__fbx__Parser *hxd__fmt__fbx__Parser;
typedef struct _hxd__fmt__hmd___Library__FormatMap *hxd__fmt__hmd___Library__FormatMap;
typedef struct _hxd__fmt__hmd__Reader *hxd__fmt__hmd__Reader;
typedef struct _hxd__fmt__hmd__Writer *hxd__fmt__hmd__Writer;
typedef struct _hxd__impl__ArrayIterator_hxd_fs_FileEntry *hxd__impl__ArrayIterator_hxd_fs_FileEntry;
typedef struct _hxd__fs__BytesFileEntry *hxd__fs__BytesFileEntry;
typedef struct _hxd__fs__BytesFileSystem *hxd__fs__BytesFileSystem;
typedef struct _hxd__fs__Convert *hxd__fs__Convert;
typedef struct _hxd__fs__ConvertFBX2HMD *hxd__fs__ConvertFBX2HMD;
typedef struct _hxd__fs__Command *hxd__fs__Command;
typedef struct _hxd__fs__ConvertWAV2MP3 *hxd__fs__ConvertWAV2MP3;
typedef struct _hxd__fs__ConvertWAV2OGG *hxd__fs__ConvertWAV2OGG;
typedef struct _hxd__fs__ConvertTGA2PNG *hxd__fs__ConvertTGA2PNG;
typedef struct _hxd__fs__ConvertFNT2BFNT *hxd__fs__ConvertFNT2BFNT;
typedef struct _hxd__fs___EmbedFileSystem__EmbedEntry *hxd__fs___EmbedFileSystem__EmbedEntry;
typedef struct _hxd__fs__FileInput *hxd__fs__FileInput;
typedef struct _hxd__fs___LocalFileSystem__LocalEntry *hxd__fs___LocalFileSystem__LocalEntry;
typedef struct _hxd__impl__ArrayIterator *hxd__impl__ArrayIterator;
typedef struct _hxd__impl__ArrayIterator_hxd_res_Any *hxd__impl__ArrayIterator_hxd_res_Any;
typedef struct _hxd__prefab__Context *hxd__prefab__Context;
typedef struct _hxd__prefab__ContextShared *hxd__prefab__ContextShared;
typedef struct _hxd__prefab__Library *hxd__prefab__Library;
typedef struct _hxd__prefab__Unknown *hxd__prefab__Unknown;
typedef struct _hxd__res___Any__SingleFileSystem *hxd__res___Any__SingleFileSystem;
typedef struct _hxd__res__Prefab *hxd__res__Prefab;
typedef struct _hxd__res__BitmapFont *hxd__res__BitmapFont;
typedef struct _hxd__snd__Mp3Data *hxd__snd__Mp3Data;
typedef struct _hxd__snd__OggData *hxd__snd__OggData;
typedef struct _hxd__snd__WavData *hxd__snd__WavData;
typedef struct _hxd__snd__Buffer *hxd__snd__Buffer;
typedef struct _hxd__snd__openal__Driver *hxd__snd__openal__Driver;
typedef struct _hxd__snd__effect__LowPass *hxd__snd__effect__LowPass;
typedef struct _hxd__snd__effect__Pitch *hxd__snd__effect__Pitch;
typedef struct _hxd__snd__effect__Reverb *hxd__snd__effect__Reverb;
typedef struct _hxd__snd__effect__Spatialization *hxd__snd__effect__Spatialization;
typedef struct _hxd__snd__openal__LowPassDriver *hxd__snd__openal__LowPassDriver;
typedef struct _hxd__snd__openal__PitchDriver *hxd__snd__openal__PitchDriver;
typedef struct _hxd__snd__openal__ReverbDriver *hxd__snd__openal__ReverbDriver;
typedef struct _hxd__snd__openal__SpatializationDriver *hxd__snd__openal__SpatializationDriver;
typedef struct _hxsl__Error *hxsl__Error;
typedef struct _hxsl__Linker *hxsl__Linker;
typedef struct _hxsl___Linker__ShaderInfos *hxsl___Linker__ShaderInfos;
typedef struct _hxsl___Linker__AllocatedVar *hxsl___Linker__AllocatedVar;
typedef struct _hxsl__Splitter *hxsl__Splitter;
typedef struct _hxsl__Dce *hxsl__Dce;
typedef struct _hxsl__ShaderInstanceDesc *hxsl__ShaderInstanceDesc;
typedef struct _hxsl__Flatten *hxsl__Flatten;
typedef struct _hxsl___Flatten__Alloc *hxsl___Flatten__Alloc;
typedef struct _hxsl__Clone *hxsl__Clone;
typedef struct _hxsl___Dce__Exit *hxsl___Dce__Exit;
typedef struct _hxsl___Dce__VarDeps *hxsl___Dce__VarDeps;
typedef struct _hxsl__Eval *hxsl__Eval;
typedef struct _hxsl__Printer *hxsl__Printer;
typedef struct _hxsl__ShaderGlobal *hxsl__ShaderGlobal;
typedef struct _hxsl___Splitter__VarProps *hxsl___Splitter__VarProps;
typedef struct _Lambda *Lambda;
typedef struct _Math *Math;
typedef struct _Reflect *Reflect;
typedef struct _Std *Std;
typedef struct _StringTools *StringTools;
typedef struct _hl___Bytes__Bytes_Impl_ *hl___Bytes__Bytes_Impl_;
typedef struct _sys__FileSystem *sys__FileSystem;
typedef struct _Sys *Sys;
typedef struct _Type *Type;
typedef struct _dx___Cursor__Cursor_Impl_ *dx___Cursor__Cursor_Impl_;
typedef struct _dx___Driver__Shader_Impl_ *dx___Driver__Shader_Impl_;
typedef struct _dx___Driver__Layout_Impl_ *dx___Driver__Layout_Impl_;
typedef struct _dx___Driver__RasterState_Impl_ *dx___Driver__RasterState_Impl_;
typedef struct _dx___Driver__RenderTargetView_Impl_ *dx___Driver__RenderTargetView_Impl_;
typedef struct _dx___Driver__DepthStencilView_Impl_ *dx___Driver__DepthStencilView_Impl_;
typedef struct _dx___Driver__DepthStencilState_Impl_ *dx___Driver__DepthStencilState_Impl_;
typedef struct _dx___Driver__BlendState_Impl_ *dx___Driver__BlendState_Impl_;
typedef struct _dx___Driver__SamplerState_Impl_ *dx___Driver__SamplerState_Impl_;
typedef struct _dx___Driver__ShaderResourceView_Impl_ *dx___Driver__ShaderResourceView_Impl_;
typedef struct _dx___Driver__DxBool_Impl_ *dx___Driver__DxBool_Impl_;
typedef struct _dx___Driver__PrimitiveTopology_Impl_ *dx___Driver__PrimitiveTopology_Impl_;
typedef struct _dx__Driver *dx__Driver;
typedef struct _dx__Loop *dx__Loop;
typedef struct _dx___Resource__Resource_Impl_ *dx___Resource__Resource_Impl_;
typedef struct _format__gif__Tools *format__gif__Tools;
typedef struct _format__mp3__MPEG *format__mp3__MPEG;
typedef struct _format__mp3__CLayer *format__mp3__CLayer;
typedef struct _format__mp3__CChannelMode *format__mp3__CChannelMode;
typedef struct _format__mp3__CEmphasis *format__mp3__CEmphasis;
typedef struct _format__mp3__Tools *format__mp3__Tools;
typedef struct _format__png__Tools *format__png__Tools;
typedef struct _format__tools__Deflate *format__tools__Deflate;
typedef struct _format__tools__Inflate *format__tools__Inflate;
typedef struct _h3d__mat__Defaults *h3d__mat__Defaults;
typedef struct _h3d__scene___Object__ObjectFlags_Impl_ *h3d__scene___Object__ObjectFlags_Impl_;
typedef struct _haxe__CallStack *haxe__CallStack;
typedef struct _haxe__EntryPoint *haxe__EntryPoint;
typedef struct _haxe__Log *haxe__Log;
typedef struct _haxe__MainLoop *haxe__MainLoop;
typedef struct _haxe__Resource *haxe__Resource;
typedef struct _haxe__crypto__Base64 *haxe__crypto__Base64;
typedef struct _haxe__crypto__Md5 *haxe__crypto__Md5;
typedef struct _haxe__crypto__Sha1 *haxe__crypto__Sha1;
typedef struct _haxe__ds__ArraySort *haxe__ds__ArraySort;
typedef struct _haxe__io__FPHelper *haxe__io__FPHelper;
typedef struct _haxe__xml___Access__NodeAccess_Impl_ *haxe__xml___Access__NodeAccess_Impl_;
typedef struct _haxe__xml___Access__AttribAccess_Impl_ *haxe__xml___Access__AttribAccess_Impl_;
typedef struct _haxe__xml___Access__HasNodeAccess_Impl_ *haxe__xml___Access__HasNodeAccess_Impl_;
typedef struct _haxe__xml___Access__Access_Impl_ *haxe__xml___Access__Access_Impl_;
typedef struct _hl__types___BytesMap__BytesMap_Impl_ *hl__types___BytesMap__BytesMap_Impl_;
typedef struct _haxe__xml__Parser *haxe__xml__Parser;
typedef struct _hl__Format *hl__Format;
typedef struct _hl___NativeArray__NativeArray_Impl_ *hl___NativeArray__NativeArray_Impl_;
typedef struct _hl___Type__Type_Impl_ *hl___Type__Type_Impl_;
typedef struct _hl___UI__Sentinel_Impl_ *hl___UI__Sentinel_Impl_;
typedef struct _hl__UI *hl__UI;
typedef struct _hl__types___IntMap__IntMap_Impl_ *hl__types___IntMap__IntMap_Impl_;
typedef struct _hl__types___ObjectMap__ObjectMap_Impl_ *hl__types___ObjectMap__ObjectMap_Impl_;
typedef struct _hxd__File *hxd__File;
typedef struct _hxd___FloatBuffer__FloatBuffer_Impl_ *hxd___FloatBuffer__FloatBuffer_Impl_;
typedef struct _hxd___IndexBuffer__IndexBuffer_Impl_ *hxd___IndexBuffer__IndexBuffer_Impl_;
typedef struct _hxd__Key *hxd__Key;
typedef struct _hxd__Math *hxd__Math;
typedef struct _hxd___Pixels__PixelsARGB_Impl_ *hxd___Pixels__PixelsARGB_Impl_;
typedef struct _hxd___Pixels__PixelsFloat_Impl_ *hxd___Pixels__PixelsFloat_Impl_;
typedef struct _hxd___Pixels__Channel_Impl_ *hxd___Pixels__Channel_Impl_;
typedef struct _hxd__Res *hxd__Res;
typedef struct _hxd__Timer *hxd__Timer;
typedef struct _hxd__System *hxd__System;
typedef struct _hxd__fmt__bfnt__FontParser *hxd__fmt__bfnt__FontParser;
typedef struct _hxd__fmt__fbx__FbxTools *hxd__fmt__fbx__FbxTools;
typedef struct _hxd__fmt__hmd___Data__GeometryDataFormat_Impl_ *hxd__fmt__hmd___Data__GeometryDataFormat_Impl_;
typedef struct _hxd__fs___LoadedBitmap__LoadedBitmap_Impl_ *hxd__fs___LoadedBitmap__LoadedBitmap_Impl_;
typedef struct _hxd__impl___UncheckedBytes__UncheckedBytes_Impl_ *hxd__impl___UncheckedBytes__UncheckedBytes_Impl_;
typedef struct _hxd__res__DefaultFont *hxd__res__DefaultFont;
typedef struct _hxd__res__Embed *hxd__res__Embed;
typedef struct _hxd__res___Image__ImageFormat_Impl_ *hxd__res___Image__ImageFormat_Impl_;
typedef struct _hxsl__Tools *hxsl__Tools;
typedef struct _hxsl__Tools2 *hxsl__Tools2;
typedef struct _hxsl__Tools3 *hxsl__Tools3;
typedef struct _hxsl__Tools4 *hxsl__Tools4;
typedef struct _hxsl___Globals__GlobalSlot_Impl_ *hxsl___Globals__GlobalSlot_Impl_;
typedef struct _hxsl__ChannelTools *hxsl__ChannelTools;
typedef struct _openal___AL__Buffer_Impl_ *openal___AL__Buffer_Impl_;
typedef struct _openal___AL__Source_Impl_ *openal___AL__Source_Impl_;
typedef struct _openal___EFX__Effect_Impl_ *openal___EFX__Effect_Impl_;
typedef struct _openal___EFX__Filter_Impl_ *openal___EFX__Filter_Impl_;
typedef struct _openal___EFX__EffectSlot_Impl_ *openal___EFX__EffectSlot_Impl_;
typedef struct _sys__io__File *sys__io__File;

// Types implementation
struct _hl__BaseType {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
};
struct _hl__Class {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _String {
	hl_type *$type;
	vbyte* bytes;
	int length;
};
struct _hl__$BaseType {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _$String {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* fromCharCode;
	vclosure* __alloc__;
	vclosure* call_toString;
	vclosure* fromUCS2;
	vclosure* fromUTF8;
	vclosure* __add__;
};
struct _$Date {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* fromInt;
	vclosure* fromTime;
	vclosure* fromString;
};
struct _Date {
	hl_type *$type;
	int _t;
};
struct _$EReg {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__types__$ArrayAccess {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__types__$ArrayBase {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* allocI32;
	vclosure* allocUI16;
	vclosure* allocF32;
	vclosure* allocF64;
};
struct _hl__types__ArrayAccess {
	hl_type *$type;
};
struct _hl__types__ArrayBase {
	hl_type *$type;
	int length;
};
struct _hl__types__ArrayBytes_Int {
	hl_type *$type;
	int length;
	vbyte* bytes;
	int size;
};
struct _hl__types__ArrayBytes_hl_UI16 {
	hl_type *$type;
	int length;
	vbyte* bytes;
	int size;
};
struct _hl__types__ArrayBytes_Single {
	hl_type *$type;
	int length;
	vbyte* bytes;
	int size;
};
struct _hl__types__ArrayBytes_Float {
	hl_type *$type;
	int length;
	vbyte* bytes;
	int size;
};
struct _$StringBuf {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__ds__$ObjectMap {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__ds__$IntMap {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__$Enum {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__Enum {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hl__types__ArrayObj {
	hl_type *$type;
	int length;
	varray* array;
};
struct _h3d__mat__$DepthFormat {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__mat__$DepthBuffer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* getDefault;
};
struct _h3d__mat__DepthBuffer {
	hl_type *$type;
	vvirtual* b;
	int width;
	int height;
	venum* format;
};
struct _h3d__mat__$Wrap {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__mat__$Filter {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__mat__$MipMap {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__$PixelFormat {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__$Indexes {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* alloc;
};
struct _h3d__Indexes {
	hl_type *$type;
	h3d__impl__MemoryManager mem;
	vvirtual* ibuf;
	bool is32;
	int count;
};
struct _h3d__impl__MemoryManager {
	hl_type *$type;
	h3d__impl__Driver driver;
	hl__types__ArrayObj buffers;
	hl__types__ArrayObj indexes;
	hl__types__ArrayObj textures;
	hl__types__ArrayObj depths;
	h3d__Indexes triIndexes;
	h3d__Indexes quadIndexes;
	double usedMemory;
	double texMemory;
	int bufferCount;
	vclosure* garbage;
};
struct _h3d__impl__Driver {
	hl_type *$type;
	bool logEnable;
};
struct _h3d__impl___ManagedBuffer__$FreeCell {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__impl__$ManagedBuffer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__impl__$Driver {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__$BufferFlag {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__impl__$MemoryManager {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	double MAX_MEMORY;
	int MAX_BUFFERS;
	int SIZE;
	hl__types__ArrayObj ALL_FLAGS;
};
struct _haxe__io__$Encoding {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _haxe__io__$Bytes {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* alloc;
	vclosure* ofString;
};
struct _haxe__io__Bytes {
	hl_type *$type;
	int length;
	vbyte* b;
};
struct _hxd__$Pixels {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* switchEndian;
	vclosure* switchBR;
	vclosure* getBytesPerPixel;
	vclosure* getChannelOffset;
	vclosure* alloc;
};
struct _hxd__Pixels {
	hl_type *$type;
	haxe__io__Bytes bytes;
	int width;
	int height;
	int offset;
	int flags;
	int bytesPerPixel;
	venum* innerFormat;
};
struct _hxd__$BitmapInnerDataImpl {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__$BitmapData {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* notImplemented;
	vclosure* fromNative;
};
struct _hxd__BitmapInnerDataImpl {
	hl_type *$type;
	vbyte* pixels;
	int width;
	int height;
};
struct _hxd__BitmapData {
	hl_type *$type;
	hxd__BitmapInnerDataImpl data;
};
struct _h3d__mat__$Texture {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int UID;
	venum* nativeFormat;
	vclosure* fromBitmap;
	vclosure* fromPixels;
	vclosure* fromColor;
	vclosure* defaultCubeTexture;
	vclosure* genChecker;
	haxe__ds__IntMap checkerTextureKeys;
	haxe__ds__IntMap noiseTextureKeys;
	vclosure* genNoise;
	vclosure* allocNoise;
	vclosure* allocChecker;
};
struct _h3d__mat__Texture {
	hl_type *$type;
	vvirtual* _t;
	h3d__impl__MemoryManager mem;
	int id;
	String name;
	int width;
	int height;
	int flags;
	venum* format;
	int lastFrame;
	int bits;
	hl__types__ArrayObj waitLoads;
	venum* mipMap;
	venum* filter;
	venum* wrap;
	vclosure* realloc;
	h3d__mat__DepthBuffer depthBuffer;
};
struct _haxe__ds__IntMap {
	hl_type *$type;
	hl_int_map* h;
	vvirtual* $_f1;
};
struct _h3d___Engine__$TargetTmp {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _dx__$Window {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	hl__types__ArrayObj windows;
};
struct _haxe__ds___List__$ListNode {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__ds__$List {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__$Window {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	hl__types__ArrayBytes_Int CODEMAP;
	vclosure* initChars;
	hxd__Window inst;
	vclosure* getInstance;
};
struct _hxd__Window {
	hl_type *$type;
	haxe__ds__List resizeEvents;
	haxe__ds__List eventTargets;
	dx__Window window;
	int fullScreenMode;
	int windowWidth;
	int windowHeight;
	int curMouseX;
	int curMouseY;
	vclosure* onClose;
	bool wasBlurred;
};
struct _haxe__ds__List {
	hl_type *$type;
	haxe__ds___List__ListNode h;
	haxe__ds___List__ListNode q;
	int length;
};
struct _haxe__ds___List__ListNode {
	hl_type *$type;
	vdynamic* item;
	haxe__ds___List__ListNode next;
};
struct _dx__Window {
	hl_type *$type;
	dx_window* win;
	vvirtual* savedSize;
	String title;
	int displayMode;
	bool visible;
	bool vsync;
};
struct _h3d__$Vector {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* fromColor;
	vclosure* fromArray;
};
struct _h3d__Vector {
	hl_type *$type;
	double x;
	double y;
	double z;
	double w;
};
struct _h3d__$Engine {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	h3d__Engine CURRENT;
	vclosure* getCurrent;
};
struct _h3d__Engine {
	hl_type *$type;
	h3d__impl__Driver driver;
	h3d__impl__MemoryManager mem;
	bool hardware;
	int width;
	int height;
	bool debug;
	int drawTriangles;
	int drawCalls;
	int shaderSwitches;
	vdynamic* backgroundColor;
	bool autoResize;
	bool fullScreen;
	double realFps;
	double lastTime;
	int antiAlias;
	h3d__Vector tmpVector;
	hxd__Window window;
	h3d___Engine__TargetTmp targetTmp;
	h3d___Engine__TargetTmp targetStack;
	h3d__mat__Texture currentTargetTex;
	int currentTargetLayer;
	int currentTargetMip;
	bool needFlushTarget;
	h3d__mat__Texture nullTexture;
	haxe__ds__IntMap textureColorCache;
	bool ready;
	haxe__ds__ObjectMap resCache;
	vclosure* onContextLost;
	vclosure* onReady;
	vclosure* onResized;
};
struct _h3d___Engine__TargetTmp {
	hl_type *$type;
	h3d__mat__Texture _t;
	h3d___Engine__TargetTmp next;
	int layer;
	int mipLevel;
};
struct _haxe__ds__ObjectMap {
	hl_type *$type;
	hl_obj_map* h;
	vvirtual* $_f1;
};
struct _hxd__$EventKind {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__$Event {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__$SceneEvents {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h2d__$Object {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	h2d__Drawable nullDrawable;
};
struct _h2d__Object {
	hl_type *$type;
	hl__types__ArrayObj children;
	h2d__Object parentContainer;
	h2d__Object parent;
	String name;
	double x;
	double y;
	double scaleX;
	double scaleY;
	double rotation;
	bool visible;
	double alpha;
	h2d__filter__Filter filter;
	double matA;
	double matB;
	double matC;
	double matD;
	double absX;
	double absY;
	bool posChanged;
	bool allocated;
	int lastFrame;
};
struct _h2d__filter__Filter {
	hl_type *$type;
	bool autoBounds;
	double boundsExtend;
	bool smooth;
};
struct _h2d__Drawable {
	hl_type *$type;
	hl__types__ArrayObj children;
	h2d__Object parentContainer;
	h2d__Object parent;
	String name;
	double x;
	double y;
	double scaleX;
	double scaleY;
	double rotation;
	bool visible;
	double alpha;
	h2d__filter__Filter filter;
	double matA;
	double matB;
	double matC;
	double matD;
	double absX;
	double absY;
	bool posChanged;
	bool allocated;
	int lastFrame;
	h3d__Vector color;
	venum* blendMode;
	vdynamic* smooth;
	bool tileWrap;
	vdynamic* colorKey;
	hxsl__ShaderList shaders;
};
struct _hxsl__ShaderList {
	hl_type *$type;
	hxsl__Shader s;
	hxsl__ShaderList next;
};
struct _hxsl__Shader {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
};
struct _hxsl__SharedShader {
	hl_type *$type;
	vvirtual* data;
	hl__types__ArrayObj globals;
	hxsl__ShaderConst consts;
	haxe__ds__IntMap instanceCache;
	int paramsCount;
};
struct _hxsl__ShaderConst {
	hl_type *$type;
	vvirtual* v;
	int pos;
	int bits;
	int globalId;
	hxsl__ShaderConst next;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
	venum* p1;
} hxsl_Type_TVec;
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
} hxsl_Type_TBytes;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} hxsl_Type_TStruct;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} hxsl_Type_TFun;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	venum* p1;
} hxsl_Type_TArray;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	venum* p1;
} hxsl_Type_TBuffer;
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
} hxsl_Type_TChannel;
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
} hxsl_SizeDecl_SConst;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
} hxsl_SizeDecl_SVar;
struct _hxsl__ShaderInstance {
	hl_type *$type;
	int id;
	vvirtual* shader;
	haxe__ds__IntMap params;
};
struct _h2d__$Layers {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__impl__$RenderContext {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h2d__$BlendMode {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxsl__$VarKind {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxsl__$Prec {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxsl__$VarQualifier {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxsl__$VecType {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxsl__$SizeDecl {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxsl__$Type {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxsl__$Const {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxsl__$TGlobal {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _haxe__macro__$Binop {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _haxe__macro__$Unop {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxsl__$Component {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxsl__$TExprDef {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxsl__$FunctionKind {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxsl__$ShaderInstance {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$ShaderConst {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$ShaderGlobal {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$SharedShader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	bool UNROLL_LOOPS;
};
struct _hxsl__$Shader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$ShaderList {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* addSort;
};
struct _h2d__$Drawable {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__mat__$StencilOp {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__mat__$Compare {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__mat__$Stencil {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* getReadMask;
	int readMask_bits;
	int readMask_offset;
	int readMask_mask;
	vclosure* getWriteMask;
	int writeMask_bits;
	int writeMask_offset;
	int writeMask_mask;
	vclosure* getReference;
	int reference_bits;
	int reference_offset;
	int reference_mask;
	vclosure* getFrontTest;
	int frontTest_bits;
	int frontTest_offset;
	int frontTest_mask;
	vclosure* getFrontPass;
	int frontPass_bits;
	int frontPass_offset;
	int frontPass_mask;
	vclosure* getFrontSTfail;
	int frontSTfail_bits;
	int frontSTfail_offset;
	int frontSTfail_mask;
	vclosure* getFrontDPfail;
	int frontDPfail_bits;
	int frontDPfail_offset;
	int frontDPfail_mask;
	vclosure* getBackTest;
	int backTest_bits;
	int backTest_offset;
	int backTest_mask;
	vclosure* getBackPass;
	int backPass_bits;
	int backPass_offset;
	int backPass_mask;
	vclosure* getBackSTfail;
	int backSTfail_bits;
	int backSTfail_offset;
	int backSTfail_mask;
	vclosure* getBackDPfail;
	int backDPfail_bits;
	int backDPfail_offset;
	int backDPfail_mask;
};
struct _h3d__mat__$Operation {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__mat__$Blend {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__mat__$Face {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__mat__$Pass {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* getCulling;
	int culling_bits;
	int culling_offset;
	int culling_mask;
	vclosure* getDepthWrite;
	int depthWrite_bits;
	int depthWrite_offset;
	int depthWrite_mask;
	vclosure* getDepthTest;
	int depthTest_bits;
	int depthTest_offset;
	int depthTest_mask;
	vclosure* getBlendSrc;
	int blendSrc_bits;
	int blendSrc_offset;
	int blendSrc_mask;
	vclosure* getBlendDst;
	int blendDst_bits;
	int blendDst_offset;
	int blendDst_mask;
	vclosure* getBlendAlphaSrc;
	int blendAlphaSrc_bits;
	int blendAlphaSrc_offset;
	int blendAlphaSrc_mask;
	vclosure* getBlendAlphaDst;
	int blendAlphaDst_bits;
	int blendAlphaDst_offset;
	int blendAlphaDst_mask;
	vclosure* getBlendOp;
	int blendOp_bits;
	int blendOp_offset;
	int blendOp_mask;
	vclosure* getBlendAlphaOp;
	int blendAlphaOp_bits;
	int blendAlphaOp_offset;
	int blendAlphaOp_mask;
	vclosure* getWireframe;
	int wireframe_bits;
	int wireframe_offset;
	int wireframe_mask;
	vclosure* getReserved;
	int reserved_bits;
	int reserved_offset;
	int reserved_mask;
};
struct _h3d__$Buffer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int GUID;
	vclosure* ofFloats;
	vclosure* ofSubFloats;
};
struct _h3d__Buffer {
	hl_type *$type;
	int id;
	h3d__impl__ManagedBuffer buffer;
	int position;
	int vertices;
	h3d__Buffer next;
	int flags;
};
struct _h3d__impl__ManagedBuffer {
	hl_type *$type;
	h3d__impl__MemoryManager mem;
	int stride;
	int size;
	int flags;
	vvirtual* vbuf;
	h3d__impl___ManagedBuffer__FreeCell freeList;
	h3d__impl__ManagedBuffer next;
};
struct _h3d__impl___ManagedBuffer__FreeCell {
	hl_type *$type;
	int pos;
	int count;
	h3d__impl___ManagedBuffer__FreeCell next;
};
struct _h3d__shader__$ShaderBuffers {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__shader__$Buffers {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$ShaderInstanceDesc {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$AllocGlobal {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$AllocParam {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$RuntimeShaderData {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$RuntimeShader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int UID;
};
struct _haxe__ds__$StringMap {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$SearchMap {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$Cache {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	hxsl__Cache INST;
	vclosure* get;
	vclosure* set;
	vclosure* clear;
};
struct _hxsl__Cache {
	hl_type *$type;
	hxsl__SearchMap linkCache;
	haxe__ds__StringMap linkShaders;
	haxe__ds__StringMap byID;
	bool constsToGlobal;
};
struct _hxsl__SearchMap {
	hl_type *$type;
	hxsl__RuntimeShader linked;
	haxe__ds__IntMap next;
};
struct _hxsl__RuntimeShader {
	hl_type *$type;
	int id;
	hxsl__RuntimeShaderData vertex;
	hxsl__RuntimeShaderData fragment;
	haxe__ds__IntMap globals;
	String signature;
	vvirtual* spec;
};
struct _hxsl__RuntimeShaderData {
	hl_type *$type;
	bool vertex;
	vvirtual* data;
	String code;
	hxsl__AllocParam params;
	int paramsSize;
	hxsl__AllocGlobal globals;
	int globalsSize;
	hxsl__AllocParam textures;
	int texturesCount;
	hxsl__AllocParam buffers;
	int bufferCount;
	hl__types__ArrayBytes_Float consts;
};
struct _hxsl__AllocParam {
	hl_type *$type;
	String name;
	int pos;
	int instance;
	int index;
	venum* type;
	hxsl__AllocGlobal perObjectGlobal;
	hxsl__AllocParam next;
};
struct _hxsl__AllocGlobal {
	hl_type *$type;
	int pos;
	int gid;
	String path;
	venum* type;
	hxsl__AllocGlobal next;
};
struct _haxe__ds__StringMap {
	hl_type *$type;
	hl_bytes_map* h;
	vvirtual* $_f1;
};
struct _hxsl__$Globals {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	hl__types__ArrayObj ALL;
	haxe__ds__StringMap MAP;
	vclosure* allocID;
	vclosure* getIDName;
};
struct _h3d__pass__$ShaderManager {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	bool STRICT;
};
struct _h3d__shader__$Base2d {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h2d__col__$Point {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h2d__col__$Bounds {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* fromValues;
	vclosure* fromPoints;
};
struct _h2d__col__Bounds {
	hl_type *$type;
	double xMin;
	double yMin;
	double xMax;
	double yMax;
};
struct _h2d__col__Point {
	hl_type *$type;
	double x;
	double y;
};
struct _h3d__impl__$TextureCache {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h2d__$RenderContext {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	bool BUFFERING;
};
struct _h2d__$Mask {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__$CustomCursor {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__$Cursor {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h2d__$Interactive {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h2d__filter__$Filter {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h2d__$Scene {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene__$Object {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	double ROT2RAD;
};
struct _h3d__pass__$Base {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__pass__$Default {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__pass___HardwarePick__$FixedColor {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__scene__$Light {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__pass__$Object {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene__$LightSystem {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene___RenderContext__$SharedGlobal {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__$Matrix {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	h3d__Matrix tmp;
	double lumR;
	double lumG;
	double lumB;
	double SQ13;
	vclosure* I;
	vclosure* L;
	vclosure* T;
	vclosure* R;
	vclosure* S;
	vclosure* lookAtX;
};
struct _h3d__Matrix {
	hl_type *$type;
	double _11;
	double _12;
	double _13;
	double _14;
	double _21;
	double _22;
	double _23;
	double _24;
	double _31;
	double _32;
	double _33;
	double _34;
	double _41;
	double _42;
	double _43;
	double _44;
};
struct _h3d__col__$Point {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__col__$Ray {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* fromPoints;
	vclosure* fromValues;
};
struct _h3d__col__Point {
	hl_type *$type;
	double x;
	double y;
	double z;
};
struct _h3d__col__Ray {
	hl_type *$type;
	double px;
	double py;
	double pz;
	double lx;
	double ly;
	double lz;
};
struct _h3d__col__$Bounds {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* fromPoints;
	vclosure* fromValues;
};
struct _h3d__col__Bounds {
	hl_type *$type;
	double xMin;
	double xMax;
	double yMin;
	double yMax;
	double zMin;
	double zMax;
	vvirtual* $_f6;
};
struct _h3d__$Camera {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene__$RenderContext {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__pass__$HardwarePick {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene__$Interactive {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__impl__$AnyProps {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene__$RenderMode {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__prefab__$Prefab {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* loadRec;
};
struct _hxd__prefab__Prefab {
	hl_type *$type;
	String type;
	String name;
	hxd__prefab__Prefab parent;
	String source;
	hl__types__ArrayObj children;
	bool enabled;
	vdynamic* props;
};
struct _hxd__prefab__rfx__$RendererFX {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene__$Renderer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__$Quat {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene__$Mesh {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene__$MultiMaterial {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene___Graphics__$GPoint {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__shader__$LineShader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__prim__$Primitive {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__prim__$BigPrimitive {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	hl__types__ArrayBytes_Single PREV_BUFFER;
	hl__types__ArrayBytes_hl_UI16 PREV_INDEX;
};
struct _h3d__scene__$Graphics {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__shader__$SkinBase {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__anim__$Joint {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__anim___Skin__$Influence {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__anim__$Skin {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__mat__$BaseMaterial {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__shader__$SpecularTexture {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__shader__$Texture {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _hxd__fs__$FileEntry {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__res__$Resource {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	bool LIVE_UPDATE;
};
struct _h3d__shader__$NormalMap {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__shader__$BaseMesh {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__mat__$Material {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* create;
};
struct _hxd__impl__AnyProps {
	hl_type *$type;
	vdynamic* props;
};
struct _h3d__mat__BaseMaterial {
	hl_type *$type;
	vdynamic* props;
	h3d__mat__Pass passes;
	String name;
	vvirtual* $_f3;
};
struct _h3d__mat__Pass {
	hl_type *$type;
	String name;
	int passId;
	int bits;
	h3d__mat__Pass parentPass;
	hxsl__ShaderList parentShaders;
	hxsl__ShaderList shaders;
	h3d__mat__Pass nextPass;
	bool enableLights;
	bool dynamicParameters;
	bool isStatic;
	venum* culling;
	bool depthWrite;
	venum* depthTest;
	venum* blendSrc;
	venum* blendDst;
	venum* blendAlphaSrc;
	venum* blendAlphaDst;
	venum* blendOp;
	venum* blendAlphaOp;
	bool wireframe;
	int colorMask;
	h3d__mat__Stencil stencil;
	bool reserved;
	vvirtual* $_f23;
};
struct _h3d__mat__Stencil {
	hl_type *$type;
	int maskBits;
	int opBits;
	int readMask;
	int writeMask;
	int reference;
	venum* frontTest;
	venum* frontPass;
	venum* frontSTfail;
	venum* frontDPfail;
	venum* backTest;
	venum* backPass;
	venum* backSTfail;
	venum* backDPfail;
	vvirtual* $_f13;
};
struct _h3d__mat__Material {
	hl_type *$type;
	vdynamic* props;
	h3d__mat__Pass passes;
	String name;
	vvirtual* $_f3;
	h3d__shader__BaseMesh mshader;
	h3d__shader__NormalMap normalShader;
	hxd__res__Resource model;
	bool castShadows;
	bool receiveShadows;
	bool staticShadows;
	h3d__shader__Texture textureShader;
	h3d__shader__SpecularTexture specularShader;
	venum* blendMode;
};
struct _h3d__shader__BaseMesh {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	h3d__Vector color__;
	double specularPower__;
	double specularAmount__;
	h3d__Vector specularColor__;
};
struct _h3d__shader__NormalMap {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	h3d__mat__Texture texture__;
};
struct _hxd__res__Resource {
	hl_type *$type;
	hxd__fs__FileEntry entry;
};
struct _hxd__fs__FileEntry {
	hl_type *$type;
	String name;
};
struct _h3d__shader__Texture {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	bool additive__;
	bool killAlpha__;
	bool specularAlpha__;
	double killAlphaThreshold__;
	h3d__mat__Texture texture__;
};
struct _h3d__shader__SpecularTexture {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	h3d__mat__Texture texture__;
};
struct _h3d__scene__$Skin {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__anim__$AnimatedObject {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__anim__$Animation {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	double EPSILON;
};
struct _h3d__scene__$Scene {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__$App {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* staticHandler;
};
struct _haxe__$MainEvent {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__$Timer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* delay;
};
struct _haxe__Timer {
	hl_type *$type;
	haxe__MainEvent event;
	vclosure* run;
};
struct _haxe__MainEvent {
	hl_type *$type;
	vclosure* f;
	haxe__MainEvent prev;
	haxe__MainEvent next;
	bool isBlocking;
	double nextRun;
	int priority;
};
struct _hxd__$Timer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	double wantedFPS;
	double maxDeltaTime;
	double smoothFactor;
	double lastTimeStamp;
	double elapsedTime;
	int frameCount;
	double dt;
	double currentDT;
	vclosure* update;
	vclosure* get_tmod;
	vclosure* set_tmod;
	vclosure* fps;
	vclosure* skip;
	vclosure* reset;
};
struct _haxe__$Log {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* formatOutput;
	vclosure* trace;
};
struct _hl__types__ArrayDyn {
	hl_type *$type;
	hl__types__ArrayBase array;
	bool allowReinterpret;
};
struct _hxd__res__$Loader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	hxd__res__Loader currentInstance;
};
struct _hxd__res__Loader {
	hl_type *$type;
	vvirtual* fs;
	haxe__ds__StringMap cache;
};
struct _hxd__fs__$EmbedFileSystem {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	EReg invalidChars;
	vclosure* resolve;
};
struct _EReg {
	hl_type *$type;
	ereg* r;
	String last;
	bool global;
};
struct _h2d__$Tile {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* fromColor;
	vclosure* fromBitmap;
	vclosure* autoCut;
	vclosure* fromTexture;
	vclosure* fromPixels;
	vclosure* isEmpty;
};
struct _h2d__Tile {
	hl_type *$type;
	h3d__mat__Texture innerTex;
	double u;
	double v;
	double u2;
	double v2;
	int dx;
	int dy;
	int x;
	int y;
	int width;
	int height;
};
struct _h2d___TileGroup__$TileLayerContent {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h2d__$TileGroup {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h2d__$Align {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h2d__$Kerning {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h2d__$FontChar {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__$Charset {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String ASCII;
	String LATIN1;
	String CYRILLIC;
	String POLISH;
	String TURKISH;
	String JP_KANA;
	String UNICODE_SPECIALS;
	String DEFAULT_CHARS;
	hxd__Charset inst;
	vclosure* getDefault;
};
struct _hxd__Charset {
	hl_type *$type;
	haxe__ds__IntMap map;
};
struct _h2d__$Font {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h2d__$Text {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h2d__$Bitmap {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _$Main {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* main;
};
struct _hxd__res__$Image {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	bool ALLOW_NPOT;
	venum* DEFAULT_FILTER;
	bool DEFAULT_ASYNC;
	vclosure* decodeJPG;
	vclosure* decodePNG;
};
struct _$Math {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* random;
	vclosure* min;
	double PI;
	double NaN;
	double POSITIVE_INFINITY;
	double NEGATIVE_INFINITY;
};
struct _$Std {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	hl_random* rnd;
	vclosure* random;
	vclosure* is;
	vclosure* string;
	vclosure* parseInt;
	vclosure* parseFloat;
	vclosure* __add__;
};
struct _$StringTools {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* htmlEscape;
	vclosure* startsWith;
	vclosure* endsWith;
	vclosure* isSpace;
	vclosure* ltrim;
	vclosure* rtrim;
	vclosure* trim;
	vclosure* lpad;
	vclosure* replace;
	vclosure* hex;
	vclosure* quoteUnixArg;
	hl__types__ArrayBytes_Int winMetaCharacters;
	vclosure* quoteWinArg;
};
struct _$SysError {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _$Sys {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	bool utf8Path;
	vclosure* getPath;
	vclosure* makePath;
	vclosure* println;
	vclosure* getEnv;
	vclosure* getCwd;
	vclosure* systemName;
	vclosure* command;
	vclosure* programPath;
	String sys_program_path;
};
struct _$ValueType {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__Class p0;
} ValueType_TClass;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__BaseType p0;
} ValueType_TEnum;
struct _$Xml {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int Element;
	int PCData;
	int CData;
	int Comment;
	int DocType;
	int ProcessingInstruction;
	int Document;
	vclosure* parse;
	vclosure* createElement;
	vclosure* createPCData;
	vclosure* createCData;
	vclosure* createComment;
	vclosure* createDocType;
	vclosure* createProcessingInstruction;
	vclosure* createDocument;
};
struct _Xml {
	hl_type *$type;
	int nodeType;
	String nodeName;
	String nodeValue;
	Xml parent;
	hl__types__ArrayObj children;
	haxe__ds__StringMap attributeMap;
};
struct _dx__$LayoutElement {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _dx__$RenderTargetDesc {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _dx__$RasterizerDesc {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _dx__$Texture2dDesc {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _dx__$DepthStencilDesc {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _dx__$RenderTargetBlendDesc {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _dx__$SamplerDesc {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _dx__$ShaderResourceViewDesc {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _dx__$Event {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _dx__$Loop {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* eventLoop;
	dx__Event event;
	vclosure* processEvents;
};
struct _dx__Event {
	hl_type *$type;
	int type;
	int mouseX;
	int mouseY;
	int button;
	int wheelDelta;
	int state;
	int keyCode;
	bool keyRepeat;
	int controller;
	int value;
};
struct _dx__$ResourceBox {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__io__$Input {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _format__gif__$Reader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _format__gif__$Version {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} format_gif_Version_Unknown;
struct _format__gif__$DisposalMethod {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _format__gif__$ApplicationExtension {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _format__gif__$Extension {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _format__gif__$Block {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
} format_gif_Block_BFrame;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
} format_gif_Block_BExtension;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
} format_gif_Extension_EGraphicControl;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} format_gif_Extension_EComment;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
} format_gif_Extension_EText;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
} format_gif_Extension_EApplicationExtension;
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
	haxe__io__Bytes p1;
} format_gif_Extension_EUnknown;
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
} format_gif_DisposalMethod_UNDEFINED;
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
} format_gif_ApplicationExtension_AENetscapeLooping;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
	String p1;
	haxe__io__Bytes p2;
} format_gif_ApplicationExtension_AEUnknown;
struct _haxe__io__$Output {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__io__$BytesBuffer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__io__$BytesOutput {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _format__gif__$Tools {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* framesCount;
	vclosure* frame;
	vclosure* graphicControl;
	vclosure* extractBGRA;
	vclosure* extractRGBA;
	vclosure* extractFullBGRA;
	vclosure* extractFullRGBA;
	vclosure* loopCount;
	double LN2;
	vclosure* log2;
};
struct _format__mp3__$MPEGVersion {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _format__mp3__$Bitrate {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _format__mp3__$SamplingRate {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _format__mp3__$Layer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _format__mp3__$MPEG {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int V1;
	int V2;
	int V25;
	int Reserved;
	vclosure* enum2Num;
	vclosure* num2Enum;
	hl__types__ArrayObj V1_Bitrates;
	hl__types__ArrayObj V2_Bitrates;
	hl__types__ArrayObj SamplingRates;
	vclosure* srNum2Enum;
	vclosure* srEnum2Num;
	vclosure* getBitrateIdx;
	vclosure* getSamplingRateIdx;
	vclosure* bitrateEnum2Num;
	vclosure* bitrateNum2Enum;
};
struct _format__mp3__$CLayer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int LReserved;
	int LLayer3;
	int LLayer2;
	int LLayer1;
	vclosure* enum2Num;
	vclosure* num2Enum;
};
struct _format__mp3__$ChannelMode {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _format__mp3__$Emphasis {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _format__tools__$BitsInput {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _format__mp3__$Reader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _format__mp3__$FrameType {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _haxe__io__$Eof {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _format__png__$Color {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _format__png__$Chunk {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
} format_png_Chunk_CHeader;
typedef struct {
	HL__ENUM_CONSTRUCT__
	haxe__io__Bytes p0;
} format_png_Chunk_CData;
typedef struct {
	HL__ENUM_CONSTRUCT__
	haxe__io__Bytes p0;
} format_png_Chunk_CPalette;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
	haxe__io__Bytes p1;
} format_png_Chunk_CUnknown;
typedef struct {
	HL__ENUM_CONSTRUCT__
	bool p0;
} format_png_Color_ColGrey;
typedef struct {
	HL__ENUM_CONSTRUCT__
	bool p0;
} format_png_Color_ColTrue;
struct _format__png__$Writer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__crypto__$Crc32 {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _format__tga__$Reader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _format__tga__$ImageOrigin {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _format__tga__$ImageType {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
} format_tga_ImageType_Unknown;
struct _format__wav__$Reader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _format__wav__$WAVEFormat {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h2d__col__$Matrix {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	h2d__col__Matrix tmp;
};
struct _h2d__col__Matrix {
	hl_type *$type;
	double a;
	double b;
	double c;
	double d;
	double x;
	double y;
};
struct _h3d__mat__$TextureFlags {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__impl__$ArrayIterator_h2d_Object {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__shader__$ColorAdd {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__shader__$ColorKey {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__shader__$ColorMatrix {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _hxsl___ShaderList__$ShaderIterator {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	hxd__CustomCursor p0;
} hxd_Cursor_Custom;
struct _hxd__CustomCursor {
	hl_type *$type;
	hl__types__ArrayObj frames;
	double speed;
	int offsetX;
	int offsetY;
	hl__types__ArrayObj alloc;
	double frameDelay;
	double frameTime;
	int frameIndex;
};
struct _hxd__$Platform {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__$SystemValue {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__$System {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* setCursor;
	vclosure* loopFunc;
	bool dismissErrors;
	ui_sentinel* sentinel;
	venum* currentNativeCursor;
	hxd__CustomCursor currentCustomCursor;
	bool cursorVisible;
	vclosure* getCurrentLoop;
	vclosure* setLoop;
	vclosure* mainLoop;
	vclosure* start;
	vclosure* runMainLoop;
	vclosure* reportError;
	vclosure* setNativeCursor;
	vclosure* updateCursor;
	vclosure* getDeviceName;
	vclosure* getDefaultFrameRate;
	vclosure* getValue;
	vclosure* exit;
	String _lang;
	vclosure* get_lang;
	vclosure* get_width;
	vclosure* get_height;
	vclosure* get_platform;
	vclosure* get_screenDPI;
	vclosure* timeoutTick;
	vclosure* get_allowTimeout;
	vclosure* set_allowTimeout;
};
struct _hxsl__$Output {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__impl__$Feature {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h2d__col__$IPoint {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h2d__col__$IBounds {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* fromValues;
	vclosure* fromPoints;
};
struct _h2d__col__IBounds {
	hl_type *$type;
	int xMin;
	int yMin;
	int xMax;
	int yMax;
};
struct _h2d__col__IPoint {
	hl_type *$type;
	int x;
	int y;
};
struct _h3d__$BufferOffset {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int UID;
};
struct _h3d__col__$Plane {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* fromPoints;
	vclosure* fromNormalPoint;
	vclosure* X;
	vclosure* Y;
	vclosure* Z;
	vclosure* frustumLeft;
	vclosure* frustumRight;
	vclosure* frustumBottom;
	vclosure* frustumTop;
	vclosure* frustumNear;
	vclosure* frustumFar;
};
struct _h3d__col__Plane {
	hl_type *$type;
	double nx;
	double ny;
	double nz;
	double d;
};
struct _h3d__col__$Frustum {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__impl__$PipelineKind {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__impl__$PipelineState {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__impl___DirectXDriver__$ShaderContext {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__impl___DirectXDriver__$CompiledShader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__impl__$DirectXDriver {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int NTARGETS;
	int VIEWPORTS_ELTS;
	int RECTS_ELTS;
	int BLEND_FACTORS;
	int SCISSOR_BIT;
	hl__types__ArrayBytes_Int COMPARE;
	hl__types__ArrayBytes_Int CULL;
	hl__types__ArrayBytes_Int STENCIL_OP;
	hl__types__ArrayBytes_Int BLEND;
	hl__types__ArrayBytes_Int BLEND_ALPHA;
	hl__types__ArrayBytes_Int BLEND_OP;
	hl__types__ArrayObj FILTER;
	hl__types__ArrayBytes_Int WRAP;
};
struct _h3d__impl__$InstanceBuffer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene__$Joint {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__anim__$LinearFrame {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__anim__$LinearObject {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__anim__$LinearAnimation {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__shader__$UVDelta {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__anim___Skin__$Permut {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__col__$Sphere {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__col__$OptimizedCollider {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__col__$GroupCollider {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__col__$FPoint {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__col__$ObjectCollider {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__col__$TriPlane {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__col__$Polygon {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__col__$PolygonBuffer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__col__$SkinCollider {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__impl__$RenderFlag {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__impl__$QueryKind {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _haxe__ds__$BalancedTree {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__ds__$TreeNode {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__ds__$EnumValueMap {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$HlslOut {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	hl__types__ArrayObj KWD_LIST;
	haxe__ds__StringMap KWDS;
	haxe__ds__EnumValueMap GLOBALS;
	vclosure* semanticName;
};
struct _haxe__ds__BalancedTree {
	hl_type *$type;
	haxe__ds__TreeNode root;
	vvirtual* $_f1;
};
struct _haxe__ds__TreeNode {
	hl_type *$type;
	haxe__ds__TreeNode left;
	haxe__ds__TreeNode right;
	vdynamic* key;
	vdynamic* value;
	int _height;
};
struct _haxe__ds__EnumValueMap {
	hl_type *$type;
	haxe__ds__TreeNode root;
	vvirtual* $_f1;
	vvirtual* $_f2;
};
struct _h3d__mat__$Defaults {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	double defaultKillAlphaThreshold;
	int loadingTextureColor;
	hxsl__Shader shadowShader;
	vclosure* get_shadowShader;
	vclosure* set_shadowShader;
	vclosure* makeVolumeDecal;
};
struct _h3d__shader__$Shadow {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__shader__$VolumeDecal {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__mat__$MaterialDatabase {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__mat__$MaterialSetup {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	h3d__mat__MaterialSetup current;
};
struct _h3d__mat__MaterialSetup {
	hl_type *$type;
	String name;
	h3d__mat__MaterialDatabase database;
	h3d__mat__Material emptyMat;
};
struct _h3d__mat__MaterialDatabase {
	hl_type *$type;
	haxe__ds__StringMap db;
};
struct _haxe__format__$JsonParser {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__res__$Any {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* fromBytes;
};
struct _hxd__res__Any {
	hl_type *$type;
	hxd__fs__FileEntry entry;
	hxd__res__Loader loader;
};
struct _hxd__fs__$NotFound {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs__$LocalFileSystem {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__pass__$Shadows {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__pass__$DirShadowMap {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__shader__$ScreenShader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__pass__$ScreenFx {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__pass__$Border {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$Channel {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__shader__$DirShadow {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__pass__$Blur {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__pass__$RenderMode {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _h3d__pass__$DefaultShadowMap {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene__$DefaultRenderer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__mat__$TextureArray {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__shader__$Blur {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__pass___Border__$BorderShader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__prim__$RawPrimitive {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__pass___Copy__$CopyShader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__pass__$Copy {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* run;
};
struct _h3d__pass___CubeCopy__$CubeCopyShader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__pass__$CubeCopy {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* run;
};
struct _h3d__shader__$MinMaxShader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _haxe__io__$BytesInput {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__prim__$MeshPrimitive {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__hmd__$AnimationEvent {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__hmd__$AnimationObject {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__hmd__$Property {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__fmt__hmd__$Animation {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__hmd__$SkinSplit {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__hmd__$Position {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	h3d__Quat QTMP;
};
struct _h3d__Quat {
	hl_type *$type;
	double x;
	double y;
	double z;
	double w;
};
struct _hxd__fmt__hmd__$SkinJoint {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__hmd__$Skin {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__hmd__$Model {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__hmd__$Material {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__hmd__$GeometryFormat {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__hmd__$Geometry {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__hmd__$Data {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int CURRENT_VERSION;
};
struct _hxd__fmt__hmd__$Library {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__prim__$HMDModel {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__hmd__$GeometryBuffer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__prim__$UV {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__prim__$Polygon {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__prim__$ModelCache {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__res__$Model {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__prim__$Plane2D {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* get;
};
struct _h3d__scene__$DepthPass {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene__$NormalPass {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene__$PassObjects {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__impl__$ArrayIterator_h3d_scene_Object {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__shader__$VertexColorAlpha {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__shader__$AmbientLight {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__shader__$SkinTangent {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__shader__$Skin {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _h3d__shader__$CubeMinMaxShader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String SRC;
	hxsl__SharedShader _SHADER;
};
struct _haxe__$StackItem {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _haxe__$EntryPoint {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	hl__types__ArrayObj pending;
	int threadCount;
	vclosure* processEvents;
	vclosure* run;
};
struct _haxe___Int64__$___Int64 {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__$MainLoop {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	haxe__MainEvent pending;
	vclosure* hasEvents;
	vclosure* add;
	vclosure* sortEvents;
	vclosure* tick;
};
struct _haxe__$Resource {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	varray* content;
	vclosure* getBytes;
};
struct _haxe___Resource__$ResourceContent {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__$Serializer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	bool USE_CACHE;
	bool USE_ENUM_INDEX;
	String BASE64;
	hl__types__ArrayObj BASE64_CODES;
	vclosure* run;
};
struct _haxe___Unserializer__$DefaultResolver {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__$Unserializer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vdynamic* DEFAULT_RESOLVER;
	String BASE64;
	hl__types__ArrayBytes_Int CODES;
	vclosure* initCodes;
	vclosure* run;
};
struct _haxe__io__$Error {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	vdynamic* p0;
} haxe_io_Error_Custom;
struct _haxe__crypto__$BaseCode {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__crypto__$Base64 {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	String CHARS;
	haxe__io__Bytes BYTES;
	vclosure* encode;
	vclosure* decode;
};
struct _haxe__io__$BytesDataImpl {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__$NativeArrayIterator_Int {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__$NativeArrayIterator_Dynamic {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__$NativeArrayIterator {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__ds___StringMap__$StringMapKeysIterator {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__format__$JsonPrinter {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* print;
};
struct _haxe__io__$FPHelper {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vbyte* helper;
	vclosure* i32ToFloat;
	vclosure* floatToI32;
};
struct _haxe__io__$Path {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* directory;
	vclosure* withExtension;
	vclosure* join;
	vclosure* normalize;
	vclosure* addTrailingSlash;
	vclosure* removeTrailingSlashes;
	vclosure* isAbsolute;
};
struct _haxe__xml__$XmlParserException {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__xml__$Parser {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	haxe__ds__StringMap escapes;
	vclosure* parse;
	vclosure* doParse;
};
struct _haxe__xml__$Printer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* print;
};
struct _haxe__zip__$Compress {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* run;
};
struct _haxe__zip__$FlushMode {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _haxe__zip__$Uncompress {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* run;
};
struct _hl__$Mikktspace {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__$Window {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__$Button {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__$WinLog {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__types__$BytesIterator_Float {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__types__$BytesIterator_Int {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__types__$BytesIterator_Single {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__types__$BytesIterator_hl_UI16 {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__types__$ArrayDynIterator {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd___FloatBuffer__$InnerIterator {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd___IndexBuffer__$InnerIterator {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__$Key {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int BACKSPACE;
	int TAB;
	int ENTER;
	int SHIFT;
	int CTRL;
	int ALT;
	int ESCAPE;
	int SPACE;
	int PGUP;
	int PGDOWN;
	int END;
	int HOME;
	int LEFT;
	int UP;
	int RIGHT;
	int DOWN;
	int INSERT;
	int DELETE;
	int NUMBER_0;
	int NUMBER_1;
	int NUMBER_2;
	int NUMBER_3;
	int NUMBER_4;
	int NUMBER_5;
	int NUMBER_6;
	int NUMBER_7;
	int NUMBER_8;
	int NUMBER_9;
	int NUMPAD_0;
	int NUMPAD_1;
	int NUMPAD_2;
	int NUMPAD_3;
	int NUMPAD_4;
	int NUMPAD_5;
	int NUMPAD_6;
	int NUMPAD_7;
	int NUMPAD_8;
	int NUMPAD_9;
	int A;
	int B;
	int C;
	int D;
	int E;
	int F;
	int G;
	int H;
	int I;
	int J;
	int K;
	int L;
	int M;
	int N;
	int O;
	int P;
	int Q;
	int R;
	int S;
	int T;
	int U;
	int V;
	int W;
	int X;
	int Y;
	int Z;
	int F1;
	int F2;
	int F3;
	int F4;
	int F5;
	int F6;
	int F7;
	int F8;
	int F9;
	int F10;
	int F11;
	int F12;
	int NUMPAD_MULT;
	int NUMPAD_ADD;
	int NUMPAD_ENTER;
	int NUMPAD_SUB;
	int NUMPAD_DOT;
	int NUMPAD_DIV;
	int MOUSE_LEFT;
	int MOUSE_RIGHT;
	int MOUSE_MIDDLE;
	int MOUSE_BACK;
	int MOUSE_FORWARD;
	int MOUSE_WHEEL_UP;
	int MOUSE_WHEEL_DOWN;
	int LOC_LEFT;
	int LOC_RIGHT;
	int LSHIFT;
	int RSHIFT;
	int LCTRL;
	int RCTRL;
	int LALT;
	int RALT;
	bool initDone;
	hl__types__ArrayBytes_Int keyPressed;
	bool ALLOW_KEY_REPEAT;
	vclosure* isDown;
	vclosure* getFrame;
	vclosure* isPressed;
	vclosure* isReleased;
	vclosure* initialize;
	vclosure* dispose;
	vclosure* onEvent;
	vclosure* getKeyName;
};
struct _hxd__Event {
	hl_type *$type;
	venum* kind;
	double relX;
	double relY;
	double relZ;
	bool propagate;
	bool cancel;
	int button;
	int touchId;
	int keyCode;
	int charCode;
	double wheelDelta;
};
struct _hxd__fmt__bfnt__$Reader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* parse;
};
struct _h2d__Font {
	hl_type *$type;
	String name;
	int size;
	int baseLine;
	int lineHeight;
	h2d__Tile tile;
	String tilePath;
	hxd__Charset charset;
	haxe__ds__IntMap glyphs;
	h2d__FontChar nullChar;
	h2d__FontChar defaultChar;
	int initSize;
	int offsetX;
	int offsetY;
};
struct _h2d__FontChar {
	hl_type *$type;
	h2d__Tile _t;
	int width;
	h2d__Kerning kerning;
};
struct _h2d__Kerning {
	hl_type *$type;
	int prevChar;
	int offset;
	h2d__Kerning next;
};
struct _hxd__fmt__bfnt__$Writer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int VERSION;
};
struct _hxd__fmt__fbx__$FbxProp {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__fmt__fbx__$TmpObject {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__fbx__$DefaultMatrixes {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* rightHandToLeft;
};
struct _hxd__fmt__fbx___BaseLibrary__$AnimCurve {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__fbx__$BaseLibrary {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__fbx__$Geometry {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__fbx__$HMDOut {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	double p0;
} hxd_fmt_hmd_Property_CameraFOVY;
struct _hxd__fmt__fbx___Parser__$Token {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__fmt__fbx__$Parser {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* parse;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} hxd_fmt_fbx__Parser_Token_TIdent;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} hxd_fmt_fbx__Parser_Token_TNode;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} hxd_fmt_fbx__Parser_Token_TInt;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} hxd_fmt_fbx__Parser_Token_TFloat;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} hxd_fmt_fbx__Parser_Token_TString;
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
} hxd_fmt_fbx__Parser_Token_TLength;
struct _hxd__fmt__hmd___Library__$FormatMap {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fmt__hmd__$Reader {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	hl__types__ArrayObj BLEND;
	hl__types__ArrayObj CULLING;
};
struct _hxd__fmt__hmd__$Writer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__impl__$ArrayIterator_hxd_fs_FileEntry {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs__$BytesFileEntry {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs__$BytesFileSystem {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs__$Convert {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs__$ConvertFBX2HMD {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs__$Command {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs__$ConvertWAV2MP3 {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs__$ConvertWAV2OGG {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs__$ConvertTGA2PNG {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs__$ConvertFNT2BFNT {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs___EmbedFileSystem__$EmbedEntry {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs__$FileInput {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _sys__io__$FileInput {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs___LocalFileSystem__$LocalEntry {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int WATCH_INDEX;
	hl__types__ArrayObj WATCH_LIST;
	String tmpDir;
	vclosure* checkFiles;
};
struct _sys__io__$FileOutput {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _sys__io__$FileSeek {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__impl__$ArrayIterator {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__impl__$ArrayIterator_hxd_res_Any {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__prefab__$ContextShared {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__prefab__$Context {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__prefab__$Library {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	haxe__ds__StringMap registeredElements;
	haxe__ds__StringMap registeredExtensions;
	vclosure* getRegistered;
	vclosure* isOfType;
	vclosure* _register;
	vclosure* create;
	vclosure* getPrefabType;
	bool _;
};
struct _hxd__prefab__$Unknown {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__prefab__rfx__$Step {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__res___Any__$SingleFileSystem {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__$ChannelBase {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__$ChannelGroup {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__$SoundGroup {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__openal__$BufferHandle {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__$Buffer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__openal__$SourceHandle {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__$Source {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int ID;
};
struct _hxd__snd__$SampleFormat {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__snd__$EffectDriver {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__$Effect {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__$Listener {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__$Manager {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	double STREAM_DURATION;
	int STREAM_BUFFER_SAMPLE_COUNT;
	int BUFFER_QUEUE_LENGTH;
	int MAX_SOURCES;
	int SOUND_BUFFER_CACHE_SIZE;
	int BUFFER_STREAM_SPLIT;
	hxd__snd__Manager instance;
	vclosure* get;
	vclosure* regEffect;
};
struct _hxd__snd__Manager {
	hl_type *$type;
	double masterVolume;
	hxd__snd__SoundGroup masterSoundGroup;
	hxd__snd__ChannelGroup masterChannelGroup;
	hxd__snd__Listener listener;
	haxe__MainEvent updateEvent;
	haxe__io__Bytes cachedBytes;
	haxe__io__Bytes resampleBytes;
	vvirtual* driver;
	hxd__snd__Channel channels;
	hl__types__ArrayObj sources;
	double now;
	int soundBufferCount;
	haxe__ds__StringMap soundBufferMap;
	hl__types__ArrayObj freeStreamBuffers;
	hl__types__ArrayObj effectGC;
	int targetRate;
	venum* targetFormat;
	int targetChannels;
};
struct _hxd__snd__SoundGroup {
	hl_type *$type;
	String name;
	double volume;
	int maxAudible;
	bool mono;
	int numAudible;
};
struct _hxd__snd__ChannelBase {
	hl_type *$type;
	double priority;
	bool mute;
	hl__types__ArrayObj effects;
	hl__types__ArrayObj bindedEffects;
	double volume;
	vvirtual* currentFade;
	double currentVolume;
};
struct _hxd__snd__ChannelGroup {
	hl_type *$type;
	double priority;
	bool mute;
	hl__types__ArrayObj effects;
	hl__types__ArrayObj bindedEffects;
	double volume;
	vvirtual* currentFade;
	double currentVolume;
	String name;
};
struct _hxd__snd__Listener {
	hl_type *$type;
	h3d__Vector position;
	h3d__Vector direction;
	h3d__Vector velocity;
	h3d__Vector up;
};
struct _hxd__snd__openal__SourceHandle {
	hl_type *$type;
	int inst;
	int sampleOffset;
	bool playing;
	int nextAuxiliarySend;
	hl__types__ArrayBytes_Int freeAuxiliarySends;
	haxe__ds__ObjectMap effectToAuxiliarySend;
};
struct _hxd__snd__openal__BufferHandle {
	hl_type *$type;
	int inst;
	bool isEnd;
};
struct _hxd__snd__EffectDriver {
	hl_type *$type;
};
struct _hxd__snd__Channel {
	hl_type *$type;
	double priority;
	bool mute;
	hl__types__ArrayObj effects;
	hl__types__ArrayObj bindedEffects;
	double volume;
	vvirtual* currentFade;
	double currentVolume;
	hxd__snd__Channel next;
	hxd__snd__Manager manager;
	hxd__snd__Source source;
	int id;
	hxd__res__Sound sound;
	double duration;
	hxd__snd__SoundGroup soundGroup;
	hxd__snd__ChannelGroup channelGroup;
	double position;
	bool pause;
	bool loop;
	double audibleGain;
	double lastStamp;
	bool isVirtual;
	bool isLoading;
	bool positionChanged;
	hl__types__ArrayObj queue;
	vclosure* onEnd;
};
struct _hxd__snd__Source {
	hl_type *$type;
	int id;
	hxd__snd__openal__SourceHandle handle;
	hxd__snd__Channel channel;
	hl__types__ArrayObj buffers;
	double volume;
	bool playing;
	int start;
	hxd__res__Sound streamSound;
	haxe__io__Bytes streamBuffer;
	int streamStart;
	int streamPos;
};
struct _hxd__res__Sound {
	hl_type *$type;
	hxd__fs__FileEntry entry;
	hxd__snd__Data data;
	hxd__snd__Channel channel;
	double lastPlay;
};
struct _hxd__snd__Data {
	hl_type *$type;
	int samples;
	int samplingRate;
	venum* sampleFormat;
	int channels;
};
struct _hxd__snd__Effect {
	hl_type *$type;
	hxd__snd__Effect next;
	int refs;
	double retainTime;
	double lastStamp;
	hxd__snd__EffectDriver driver;
	int priority;
};
struct _hxd__snd__$Channel {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int ID;
};
struct _hxd__snd__$Data {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* formatBytes;
};
struct _hxd__res__$SoundFormat {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__res__$Sound {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* supportedFormat;
	vclosure* startWorker;
};
struct _hxd__res__$Prefab {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__res__$BitmapFont {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__res__$DefaultFont {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* get;
};
struct _hxd__snd__$Mp3Data {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__$OggData {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__$WavData {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__openal__$Driver {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__effect__$LowPass {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__effect__$Pitch {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__effect__$Reverb {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__effect__$ReverbPreset {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	hxd__snd__effect__ReverbPreset DEFAULT;
	hxd__snd__effect__ReverbPreset GENERIC;
	hxd__snd__effect__ReverbPreset PADDEDCELL;
	hxd__snd__effect__ReverbPreset ROOM;
	hxd__snd__effect__ReverbPreset BATHROOM;
	hxd__snd__effect__ReverbPreset LIVINGROOM;
	hxd__snd__effect__ReverbPreset STONEROOM;
	hxd__snd__effect__ReverbPreset AUDITORIUM;
	hxd__snd__effect__ReverbPreset CONCERTHALL;
	hxd__snd__effect__ReverbPreset CAVE;
	hxd__snd__effect__ReverbPreset ARENA;
	hxd__snd__effect__ReverbPreset HANGAR;
	hxd__snd__effect__ReverbPreset CARPETEDHALLWAY;
	hxd__snd__effect__ReverbPreset HALLWAY;
	hxd__snd__effect__ReverbPreset STONECORRIDOR;
	hxd__snd__effect__ReverbPreset ALLEY;
	hxd__snd__effect__ReverbPreset FOREST;
	hxd__snd__effect__ReverbPreset CITY;
	hxd__snd__effect__ReverbPreset MOUNTAINS;
	hxd__snd__effect__ReverbPreset QUARRY;
	hxd__snd__effect__ReverbPreset PLAIN;
	hxd__snd__effect__ReverbPreset PARKINGLOT;
	hxd__snd__effect__ReverbPreset SEWERPIPE;
	hxd__snd__effect__ReverbPreset UNDERWATER;
	hxd__snd__effect__ReverbPreset DRUGGED;
	hxd__snd__effect__ReverbPreset DIZZY;
	hxd__snd__effect__ReverbPreset PSYCHOTIC;
	hxd__snd__effect__ReverbPreset CASTLE_SMALLROOM;
	hxd__snd__effect__ReverbPreset CASTLE_SHORTPASSAGE;
	hxd__snd__effect__ReverbPreset CASTLE_MEDIUMROOM;
	hxd__snd__effect__ReverbPreset CASTLE_LARGEROOM;
	hxd__snd__effect__ReverbPreset CASTLE_LONGPASSAGE;
	hxd__snd__effect__ReverbPreset CASTLE_HALL;
	hxd__snd__effect__ReverbPreset CASTLE_CUPBOARD;
	hxd__snd__effect__ReverbPreset CASTLE_COURTYARD;
	hxd__snd__effect__ReverbPreset CASTLE_ALCOVE;
	hxd__snd__effect__ReverbPreset FACTORY_SMALLROOM;
	hxd__snd__effect__ReverbPreset FACTORY_SHORTPASSAGE;
	hxd__snd__effect__ReverbPreset FACTORY_MEDIUMROOM;
	hxd__snd__effect__ReverbPreset FACTORY_LARGEROOM;
	hxd__snd__effect__ReverbPreset FACTORY_LONGPASSAGE;
	hxd__snd__effect__ReverbPreset FACTORY_HALL;
	hxd__snd__effect__ReverbPreset FACTORY_CUPBOARD;
	hxd__snd__effect__ReverbPreset FACTORY_COURTYARD;
	hxd__snd__effect__ReverbPreset FACTORY_ALCOVE;
	hxd__snd__effect__ReverbPreset ICEPALACE_SMALLROOM;
	hxd__snd__effect__ReverbPreset ICEPALACE_SHORTPASSAGE;
	hxd__snd__effect__ReverbPreset ICEPALACE_MEDIUMROOM;
	hxd__snd__effect__ReverbPreset ICEPALACE_LARGEROOM;
	hxd__snd__effect__ReverbPreset ICEPALACE_LONGPASSAGE;
	hxd__snd__effect__ReverbPreset ICEPALACE_HALL;
	hxd__snd__effect__ReverbPreset ICEPALACE_CUPBOARD;
	hxd__snd__effect__ReverbPreset ICEPALACE_COURTYARD;
	hxd__snd__effect__ReverbPreset ICEPALACE_ALCOVE;
	hxd__snd__effect__ReverbPreset SPACESTATION_SMALLROOM;
	hxd__snd__effect__ReverbPreset SPACESTATION_SHORTPASSAGE;
	hxd__snd__effect__ReverbPreset SPACESTATION_MEDIUMROOM;
	hxd__snd__effect__ReverbPreset SPACESTATION_LARGEROOM;
	hxd__snd__effect__ReverbPreset SPACESTATION_LONGPASSAGE;
	hxd__snd__effect__ReverbPreset SPACESTATION_HALL;
	hxd__snd__effect__ReverbPreset SPACESTATION_CUPBOARD;
	hxd__snd__effect__ReverbPreset SPACESTATION_ALCOVE;
	hxd__snd__effect__ReverbPreset WOODEN_SMALLROOM;
	hxd__snd__effect__ReverbPreset WOODEN_SHORTPASSAGE;
	hxd__snd__effect__ReverbPreset WOODEN_MEDIUMROOM;
	hxd__snd__effect__ReverbPreset WOODEN_LARGEROOM;
	hxd__snd__effect__ReverbPreset WOODEN_LONGPASSAGE;
	hxd__snd__effect__ReverbPreset WOODEN_HALL;
	hxd__snd__effect__ReverbPreset WOODEN_CUPBOARD;
	hxd__snd__effect__ReverbPreset WOODEN_COURTYARD;
	hxd__snd__effect__ReverbPreset WOODEN_ALCOVE;
	hxd__snd__effect__ReverbPreset SPORT_EMPTYSTADIUM;
	hxd__snd__effect__ReverbPreset SPORT_SQUASHCOURT;
	hxd__snd__effect__ReverbPreset SPORT_SMALLSWIMMINGPOOL;
	hxd__snd__effect__ReverbPreset SPORT_LARGESWIMMINGPOOL;
	hxd__snd__effect__ReverbPreset SPORT_GYMNASIUM;
	hxd__snd__effect__ReverbPreset SPORT_FULLSTADIUM;
	hxd__snd__effect__ReverbPreset SPORT_STADIUMTANNOY;
	hxd__snd__effect__ReverbPreset PREFAB_WORKSHOP;
	hxd__snd__effect__ReverbPreset PREFAB_SCHOOLROOM;
	hxd__snd__effect__ReverbPreset PREFAB_PRACTISEROOM;
	hxd__snd__effect__ReverbPreset PREFAB_OUTHOUSE;
	hxd__snd__effect__ReverbPreset PREFAB_CARAVAN;
	hxd__snd__effect__ReverbPreset DOME_TOMB;
	hxd__snd__effect__ReverbPreset PIPE_SMALL;
	hxd__snd__effect__ReverbPreset DOME_SAINTPAULS;
	hxd__snd__effect__ReverbPreset PIPE_LONGTHIN;
	hxd__snd__effect__ReverbPreset PIPE_LARGE;
	hxd__snd__effect__ReverbPreset PIPE_RESONANT;
	hxd__snd__effect__ReverbPreset OUTDOORS_BACKYARD;
	hxd__snd__effect__ReverbPreset OUTDOORS_ROLLINGPLAINS;
	hxd__snd__effect__ReverbPreset OUTDOORS_DEEPCANYON;
	hxd__snd__effect__ReverbPreset OUTDOORS_CREEK;
	hxd__snd__effect__ReverbPreset OUTDOORS_VALLEY;
	hxd__snd__effect__ReverbPreset MOOD_HEAVEN;
	hxd__snd__effect__ReverbPreset MOOD_HELL;
	hxd__snd__effect__ReverbPreset MOOD_MEMORY;
	hxd__snd__effect__ReverbPreset DRIVING_COMMENTATOR;
	hxd__snd__effect__ReverbPreset DRIVING_PITGARAGE;
	hxd__snd__effect__ReverbPreset DRIVING_INCAR_RACER;
	hxd__snd__effect__ReverbPreset DRIVING_INCAR_SPORTS;
	hxd__snd__effect__ReverbPreset DRIVING_INCAR_LUXURY;
	hxd__snd__effect__ReverbPreset DRIVING_FULLGRANDSTAND;
	hxd__snd__effect__ReverbPreset DRIVING_EMPTYGRANDSTAND;
	hxd__snd__effect__ReverbPreset DRIVING_TUNNEL;
	hxd__snd__effect__ReverbPreset CITY_STREETS;
	hxd__snd__effect__ReverbPreset CITY_SUBWAY;
	hxd__snd__effect__ReverbPreset CITY_MUSEUM;
	hxd__snd__effect__ReverbPreset CITY_LIBRARY;
	hxd__snd__effect__ReverbPreset CITY_UNDERPASS;
	hxd__snd__effect__ReverbPreset CITY_ABANDONED;
	hxd__snd__effect__ReverbPreset DUSTYROOM;
	hxd__snd__effect__ReverbPreset CHAPEL;
	hxd__snd__effect__ReverbPreset SMALLWATERROOM;
};
struct _hxd__snd__effect__ReverbPreset {
	hl_type *$type;
	double room;
	double roomHF;
	double roomRolloffFactor;
	double decayTime;
	double decayHFRatio;
	double reflections;
	double reflectionsDelay;
	double reverb;
	double reverbDelay;
	double diffusion;
	double density;
	double hfReference;
};
struct _hxd__snd__effect__$Spatialization {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__openal__$LowPassDriver {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__openal__$PitchDriver {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__openal__$ReverbDriver {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__snd__openal__$SpatializationDriver {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$Error {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* _t;
};
struct _hxsl__$Tools {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int UID;
	hl__types__ArrayObj SWIZ;
	int MAX_CHANNELS_BITS;
	vclosure* allocVarId;
	vclosure* getName;
	vclosure* getConstBits;
	vclosure* isConst;
	vclosure* isStruct;
	vclosure* isArray;
	vclosure* hasQualifier;
	vclosure* isSampler;
	vclosure* toString;
	vclosure* toType;
	vclosure* hasSideEffect;
	vclosure* iter;
	vclosure* map;
	vclosure* size;
	vclosure* evalConst;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	vdynamic* p0;
} hxsl_VarQualifier_Const;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} hxsl_VarQualifier_Name;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
} hxsl_VarQualifier_Precision;
typedef struct {
	HL__ENUM_CONSTRUCT__
	double p0;
	double p1;
} hxsl_VarQualifier_Range;
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
} hxsl_VarQualifier_PerInstance;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
} hxsl_TExprDef_TConst;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
} hxsl_TExprDef_TVar;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
} hxsl_TExprDef_TGlobal;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
} hxsl_TExprDef_TParenthesis;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} hxsl_TExprDef_TBlock;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	vvirtual* p1;
	vvirtual* p2;
} hxsl_TExprDef_TBinop;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	vvirtual* p1;
} hxsl_TExprDef_TUnop;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	vvirtual* p1;
} hxsl_TExprDef_TVarDecl;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	hl__types__ArrayObj p1;
} hxsl_TExprDef_TCall;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	hl__types__ArrayObj p1;
} hxsl_TExprDef_TSwiz;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	vvirtual* p1;
	vvirtual* p2;
} hxsl_TExprDef_TIf;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
} hxsl_TExprDef_TReturn;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	vvirtual* p1;
	vvirtual* p2;
} hxsl_TExprDef_TFor;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	vvirtual* p1;
} hxsl_TExprDef_TArray;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} hxsl_TExprDef_TArrayDecl;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	hl__types__ArrayObj p1;
	vvirtual* p2;
} hxsl_TExprDef_TSwitch;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	vvirtual* p1;
	bool p2;
} hxsl_TExprDef_TWhile;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
	hl__types__ArrayObj p1;
	vvirtual* p2;
} hxsl_TExprDef_TMeta;
typedef struct {
	HL__ENUM_CONSTRUCT__
	bool p0;
} hxsl_Const_CBool;
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
} hxsl_Const_CInt;
typedef struct {
	HL__ENUM_CONSTRUCT__
	double p0;
} hxsl_Const_CFloat;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} hxsl_Const_CString;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
} haxe_macro_Binop_OpAssignOp;
struct _hxsl___Linker__$ShaderInfos {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int UID;
};
struct _hxsl___Linker__$AllocatedVar {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$Linker {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$Splitter {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$Dce {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$Flatten {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl___Flatten__$Alloc {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$Clone {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* shaderData;
};
struct _hxsl___Dce__$Exit {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl___Dce__$VarDeps {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$Eval {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$Printer {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	hl__types__ArrayObj SWIZ;
	vclosure* opStr;
	vclosure* toString;
	vclosure* shaderToString;
	vclosure* check;
};
struct _hxsl__$ARead {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxsl___Splitter__$VarProps {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _$Lambda {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* array;
};
struct _h3d__$IDrawable {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _$Reflect {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* field;
	vclosure* setField;
	vclosure* callMethod;
	vclosure* fields;
	vclosure* isEnumValue;
	vclosure* deleteField;
};
struct _hl__CoreType {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__CoreEnum {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hl___Bytes__$Bytes_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* sub;
};
struct _sys__$FileSystem {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* exists;
	vclosure* stat;
	vclosure* fullPath;
	vclosure* absolutePath;
	vclosure* isDirectory;
	vclosure* createDirectory;
	vclosure* deleteFile;
	vclosure* readDirectory;
};
struct _$Type {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* init;
	vclosure* initClass;
	vclosure* initEnum;
	vclosure* _register;
	vclosure* getClass;
	vclosure* getEnum;
	vclosure* getSuperClass;
	vclosure* getClassName;
	vclosure* getEnumName;
	vclosure* resolveClass;
	vclosure* resolveEnum;
	vclosure* createInstance;
	vclosure* createEmptyInstance;
	vclosure* createEnum;
	vclosure* createEnumIndex;
	vclosure* getInstanceFields;
	vclosure* getEnumConstructs;
	vclosure* _typeof;
	vclosure* enumConstructor;
	vclosure* enumParameters;
	vclosure* enumIndex;
	vclosure* allEnums;
};
struct _dx___Cursor__$Cursor_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* destroy;
	vclosure* set;
};
struct _dx___Driver__$Shader_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* release;
};
struct _dx___Driver__$Layout_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* release;
};
struct _dx___Driver__$RasterState_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* release;
};
struct _dx___Driver__$RenderTargetView_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* release;
};
struct _dx___Driver__$DepthStencilView_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* release;
};
struct _dx___Driver__$DepthStencilState_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* release;
};
struct _dx___Driver__$BlendState_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* release;
};
struct _dx___Driver__$SamplerState_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* release;
};
struct _dx___Driver__$ShaderResourceView_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* release;
};
struct _dx___Driver__$DxBool_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* toBool;
	vclosure* fromBool;
};
struct _dx___Driver__$PrimitiveTopology_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int Undefined;
	int PointList;
	int LineList;
	int LineStrip;
	int TriangleList;
	int TriangleStrip;
	int LineListAdj;
	int TriangleListAdj;
	int TriangleStripAdj;
	vclosure* controlPointPatchList;
};
struct _dx__$Driver {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* create;
	vclosure* createRenderTargetView;
	vclosure* createRasterizerState;
	vclosure* getDeviceName;
	vclosure* compileShader;
	vclosure* disassembleShader;
	vclosure* createVertexShader;
	vclosure* createPixelShader;
	vclosure* createTexture2d;
	vclosure* createDepthStencilState;
	vclosure* createSamplerState;
	vclosure* createShaderResourceView;
	vclosure* debugPrint;
	vclosure* get_fullScreen;
	vclosure* set_fullScreen;
	vclosure* detectKeyboardLayout;
};
struct _dx__RenderTargetDesc {
	hl_type *$type;
	int format;
	int dimension;
	int mipMap;
	int firstSlice;
	int sliceCount;
};
struct _dx__RasterizerDesc {
	hl_type *$type;
	int fillMode;
	int cullMode;
	int frontCounterClockwise;
	int depthBias;
	float depthBiasClamp;
	float slopeScaledDepthBias;
	int depthClipEnable;
	int scissorEnable;
	int multisampleEnable;
	int antialiasedLineEnable;
};
struct _dx__Texture2dDesc {
	hl_type *$type;
	int width;
	int height;
	int mipLevels;
	int arraySize;
	int format;
	int sampleCount;
	int sampleQuality;
	int usage;
	int bind;
	int access;
	int misc;
};
struct _dx__DepthStencilDesc {
	hl_type *$type;
	int depthEnable;
	int depthWrite;
	int depthFunc;
	int stencilEnable;
	unsigned char stencilReadMask;
	unsigned char stencilWriteMask;
	int frontFaceFail;
	int frontFaceDepthFail;
	int frontFacePass;
	int frontFaceFunc;
	int backFaceFail;
	int backFaceDepthFail;
	int backFacePass;
	int backFaceFunc;
};
struct _dx__SamplerDesc {
	hl_type *$type;
	int filter;
	int addressU;
	int addressV;
	int addressW;
	float mipLodBias;
	int maxAnisotropy;
	int comparisonFunc;
	float borderColorR;
	float borderColorG;
	float borderColorB;
	float borderColorA;
	float minLod;
	float maxLod;
};
struct _dx__ShaderResourceViewDesc {
	hl_type *$type;
	int format;
	int dimension;
	int start;
	int count;
	int firstArraySlice;
	int arraySize;
};
struct _dx___Resource__$Resource_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* updateSubresource;
	vclosure* copySubresourceRegion;
};
struct _dx__ResourceBox {
	hl_type *$type;
	int left;
	int top;
	int front;
	int right;
	int bottom;
	int back;
};
struct _format__mp3__$CChannelMode {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int CStereo;
	int CJointStereo;
	int CDualChannel;
	int CMono;
	vclosure* enum2Num;
	vclosure* num2Enum;
};
struct _format__mp3__$CEmphasis {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int ENone;
	int EMs50_15;
	int EReserved;
	int ECCIT_J17;
	vclosure* enum2Num;
	vclosure* num2Enum;
};
struct _format__mp3__$Tools {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* getBitrate;
	vclosure* getSamplingRate;
	vclosure* isInvalidFrameHeader;
	vclosure* getSampleDataSize;
	vclosure* getSampleDataSizeHdr;
	vclosure* getSampleCount;
	vclosure* getSampleCountHdr;
	vclosure* getFrameInfo;
};
struct _format__png__$Tools {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* getHeader;
	vclosure* getPalette;
	vclosure* filter;
	vclosure* reverseBytes;
	vclosure* extractGrey;
	vclosure* extract32;
	vclosure* buildGrey;
	vclosure* buildRGB;
	vclosure* build32ARGB;
	vclosure* build32BGRA;
};
struct _format__tools__$Deflate {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* run;
};
struct _format__tools__$Inflate {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* run;
};
struct _hxd__$Interactive {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__$InteractiveScene {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__impl___Serializable__$NoSerializeSupport {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__col__$Collider {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _h3d__scene___Object__$ObjectFlags_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int FPosChanged;
	int FVisible;
	int FCulled;
	int FFollowPositionOnly;
	int FLightCameraCenter;
	int FAllocated;
	int FAlwaysSync;
	int FInheritCulled;
	int FNoSerialize;
	int FIgnoreBounds;
	int FIgnoreCollide;
	int FIgnoreParentTransform;
	vclosure* _new;
	vclosure* toInt;
	vclosure* has;
	vclosure* set;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} haxe_StackItem_Module;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	String p1;
	int p2;
	vdynamic* p3;
} haxe_StackItem_FilePos;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
	String p1;
} haxe_StackItem_Method;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vdynamic* p0;
} haxe_StackItem_LocalFunction;
struct _haxe__$CallStack {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* exceptionStack;
	vclosure* toString;
	vclosure* itemToString;
	vclosure* makeStack;
};
struct _StringBuf {
	hl_type *$type;
	vbyte* b;
	int size;
	int pos;
};
struct _haxe__$IMap {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _haxe__crypto__$Md5 {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* encode;
};
struct _haxe__crypto__$Sha1 {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* make;
};
struct _haxe__ds__$ArraySort {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* sort;
	vclosure* rec;
	vclosure* doMerge;
	vclosure* rotate;
	vclosure* gcd;
	vclosure* upper;
	vclosure* lower;
	vclosure* swap;
};
struct _haxe__xml___Access__$NodeAccess_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* resolve;
};
struct _haxe__xml___Access__$AttribAccess_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* resolve;
};
struct _haxe__xml___Access__$HasNodeAccess_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* resolve;
};
struct _haxe__xml___Access__$Access_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* get_innerData;
};
struct _hl__types___BytesMap__$BytesMap_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__$Format {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl___NativeArray__$NativeArray_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl___Type__$Type_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl___UI__$Sentinel_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* _new;
	vclosure* get_pause;
	vclosure* set_pause;
	vclosure* tick;
};
struct _hl__$UI {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* loadFile;
	vclosure* saveFile;
	vclosure* chooseFile;
};
struct _hl__Window {
	hl_type *$type;
	ui_window* h;
};
struct _hl__types__$ArrayDyn {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* alloc;
};
struct _hl__types___IntMap__$IntMap_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hl__types___ObjectMap__$ObjectMap_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__$File {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* browse;
	vclosure* saveAs;
	vclosure* exists;
	vclosure* delete;
	vclosure* listDirectory;
	vclosure* getBytes;
	vclosure* saveBytes;
	vclosure* load;
	vclosure* createDirectory;
	vclosure* applicationPath;
};
struct _hxd___FloatBuffer__$FloatBuffer_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* _new;
	vclosure* push;
	vclosure* grow;
	vclosure* resize;
	vclosure* arrayRead;
	vclosure* arrayWrite;
	vclosure* getNative;
	vclosure* iterator;
	vclosure* get_length;
};
struct _hxd___FloatBuffer__InnerIterator {
	hl_type *$type;
	hl__types__ArrayBytes_Single b;
	int len;
	int pos;
};
struct _hxd___IndexBuffer__$IndexBuffer_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* _new;
	vclosure* push;
	vclosure* grow;
	vclosure* arrayRead;
	vclosure* arrayWrite;
	vclosure* getNative;
	vclosure* iterator;
	vclosure* get_length;
};
struct _hxd___IndexBuffer__InnerIterator {
	hl_type *$type;
	hl__types__ArrayBytes_hl_UI16 b;
	int len;
	int pos;
};
struct _hxd__$Math {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	double PI;
	double EPSILON;
	vclosure* get_POSITIVE_INFINITY;
	vclosure* get_NEGATIVE_INFINITY;
	vclosure* get_NaN;
	vclosure* isNaN;
	vclosure* fmt;
	vclosure* floor;
	vclosure* ceil;
	vclosure* round;
	vclosure* clamp;
	vclosure* pow;
	vclosure* scaleTime;
	vclosure* cos;
	vclosure* sin;
	vclosure* tan;
	vclosure* acos;
	vclosure* asin;
	vclosure* atan;
	vclosure* sqrt;
	vclosure* invSqrt;
	vclosure* atan2;
	vclosure* abs;
	vclosure* max;
	vclosure* min;
	vclosure* iabs;
	vclosure* imax;
	vclosure* imin;
	vclosure* iclamp;
	vclosure* lerp;
	vclosure* bitCount;
	vclosure* distanceSq;
	vclosure* distance;
	vclosure* colorLerp;
	vclosure* angle;
	vclosure* angleLerp;
	vclosure* angleMove;
	vclosure* shuffle;
	vclosure* random;
	vclosure* srand;
	vclosure* b2f;
	vclosure* f2b;
	vclosure* umod;
	vclosure* ufmod;
	vclosure* degToRad;
	vclosure* radToDeg;
};
struct _hxd__$Flags {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd___Pixels__$PixelsARGB_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* getPixel;
	vclosure* setPixel;
	vclosure* fromPixels;
};
struct _hxd___Pixels__$PixelsFloat_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* getPixelF;
	vclosure* setPixelF;
	vclosure* fromPixels;
};
struct _hxd___Pixels__$Channel_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int R;
	int G;
	int B;
	int A;
	vclosure* toInt;
	vclosure* fromInt;
};
struct _hxd__$Res {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* load;
	vclosure* get_loader;
	vclosure* set_loader;
};
struct _hxd__fmt__bfnt__$FontParser {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* parse;
};
struct _hxd__fmt__fbx__$FbxTools {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* get;
	vclosure* getAll;
	vclosure* getInts;
	vclosure* getFloats;
	vclosure* hasProp;
	vclosure* idToInt;
	vclosure* toInt;
	vclosure* toFloat;
	vclosure* toString;
	vclosure* getId;
	vclosure* getName;
	vclosure* getType;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
} hxd_fmt_fbx_FbxProp_PInt;
typedef struct {
	HL__ENUM_CONSTRUCT__
	double p0;
} hxd_fmt_fbx_FbxProp_PFloat;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} hxd_fmt_fbx_FbxProp_PString;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} hxd_fmt_fbx_FbxProp_PIdent;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayBytes_Int p0;
} hxd_fmt_fbx_FbxProp_PInts;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayBytes_Float p0;
} hxd_fmt_fbx_FbxProp_PFloats;
struct _hxd__fmt__hmd___Data__$GeometryDataFormat_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int DFloat;
	int DVec2;
	int DVec3;
	int DVec4;
	int DBytes4;
	vclosure* _new;
	vclosure* getSize;
	vclosure* toInt;
	vclosure* toString;
	vclosure* fromInt;
};
struct _hxd__fmt__hmd__$AnimationFlag {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
struct _hxd__fs__$FileSystem {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__fs___LoadedBitmap__$LoadedBitmap_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* _new;
	vclosure* toBitmap;
	vclosure* toNative;
};
struct _hxd__impl___UncheckedBytes__$UncheckedBytes_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* _new;
	vclosure* get;
	vclosure* set;
	vclosure* fromBytes;
};
struct _hxd__res__$Embed {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxd__res___Image__$ImageFormat_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int Jpg;
	int Png;
	int Gif;
	int Tga;
	vclosure* get_useAsyncDecode;
	vclosure* toInt;
};
struct _hxd__snd__$Driver {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
};
struct _hxsl__$ExprDef {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
} hxsl_ExprDef_EConst;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
} hxsl_ExprDef_EIdent;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
} hxsl_ExprDef_EParenthesis;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	String p1;
} hxsl_ExprDef_EField;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	vvirtual* p1;
	vvirtual* p2;
} hxsl_ExprDef_EBinop;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	vvirtual* p1;
} hxsl_ExprDef_EUnop;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	hl__types__ArrayObj p1;
} hxsl_ExprDef_ECall;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} hxsl_ExprDef_EBlock;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} hxsl_ExprDef_EVars;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
} hxsl_ExprDef_EFunction;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	vvirtual* p1;
	vvirtual* p2;
} hxsl_ExprDef_EIf;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
	vvirtual* p1;
	vvirtual* p2;
} hxsl_ExprDef_EFor;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
} hxsl_ExprDef_EReturn;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	vvirtual* p1;
} hxsl_ExprDef_EArray;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} hxsl_ExprDef_EArrayDecl;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	hl__types__ArrayObj p1;
	vvirtual* p2;
} hxsl_ExprDef_ESwitch;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	vvirtual* p1;
	bool p2;
} hxsl_ExprDef_EWhile;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
	hl__types__ArrayObj p1;
	vvirtual* p2;
} hxsl_ExprDef_EMeta;
struct _hxsl__$Tools2 {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* toString;
};
struct _hxsl__$Tools3 {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* toString;
};
struct _hxsl__$Tools4 {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* toString;
};
struct _hxsl___Globals__$GlobalSlot_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* _new;
	vclosure* toInt;
	vclosure* set;
	vclosure* get;
};
struct _hxsl__Globals {
	hl_type *$type;
	haxe__ds__IntMap map;
	hl__types__ArrayObj channels;
	int maxChannels;
};
struct _hxsl__$ChannelTools {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* isPackedFormat;
};
struct _openal___AL__$Buffer_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* toInt;
	vclosure* ofInt;
};
struct _openal___AL__$Source_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* toInt;
	vclosure* ofInt;
};
struct _openal___EFX__$Effect_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* toInt;
	vclosure* ofInt;
};
struct _openal___EFX__$Filter_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* toInt;
	vclosure* ofInt;
};
struct _openal___EFX__$EffectSlot_Impl_ {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* toInt;
	vclosure* ofInt;
};
struct _sys__io__$File {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* getBytes;
	vclosure* saveContent;
	vclosure* saveBytes;
	vclosure* read;
	vclosure* write;
	vclosure* append;
};
struct _haxe__io__Input {
	hl_type *$type;
	bool bigEndian;
};
struct _sys__io__FileInput {
	hl_type *$type;
	bool bigEndian;
	hl_fdesc* __f;
};
struct _haxe__io__Output {
	hl_type *$type;
	bool bigEndian;
};
struct _sys__io__FileOutput {
	hl_type *$type;
	bool bigEndian;
	hl_fdesc* __f;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	hxd__App p1;
} Enum$1300;
struct _hxd__App {
	hl_type *$type;
	h3d__Engine engine;
	h3d__scene__Scene s3d;
	h2d__Scene s2d;
	hxd__SceneEvents sevents;
	bool isDisposed;
	vvirtual* $_f5;
};
struct _h3d__scene__Object {
	hl_type *$type;
	int flags;
	hl__types__ArrayObj children;
	h3d__scene__Object parent;
	String name;
	double x;
	double y;
	double z;
	double scaleX;
	double scaleY;
	double scaleZ;
	h3d__scene__Object follow;
	h3d__Matrix defaultTransform;
	h3d__anim__Animation currentAnimation;
	h3d__Matrix absPos;
	h3d__Matrix invPos;
	h3d__Quat qRot;
	int lastFrame;
	vvirtual* $_f17;
};
struct _h3d__anim__Animation {
	hl_type *$type;
	String name;
	int frameCount;
	double sampling;
	double frame;
	double speed;
	vclosure* onAnimEnd;
	vclosure* onEvent;
	bool pause;
	bool loop;
	hl__types__ArrayObj events;
	bool isInstance;
	hl__types__ArrayObj objects;
	bool isSync;
	int lastEvent;
	vvirtual* $_f14;
};
struct _h3d__scene__Scene {
	hl_type *$type;
	int flags;
	hl__types__ArrayObj children;
	h3d__scene__Object parent;
	String name;
	double x;
	double y;
	double z;
	double scaleX;
	double scaleY;
	double scaleZ;
	h3d__scene__Object follow;
	h3d__Matrix defaultTransform;
	h3d__anim__Animation currentAnimation;
	h3d__Matrix absPos;
	h3d__Matrix invPos;
	h3d__Quat qRot;
	int lastFrame;
	vvirtual* $_f17;
	h3d__Camera camera;
	h3d__scene__LightSystem lightSystem;
	h3d__scene__Renderer renderer;
	h3d__scene__RenderContext ctx;
	hl__types__ArrayObj interactives;
	hxd__SceneEvents events;
	hl__types__ArrayObj hitInteractives;
	hl__types__ArrayObj eventListeners;
	hxd__Window window;
	h3d__pass__HardwarePick hardwarePass;
	vvirtual* $_f28;
	vvirtual* $_f29;
};
struct _h3d__Camera {
	hl_type *$type;
	double zoom;
	double screenRatio;
	double fovY;
	double zNear;
	double zFar;
	h3d__col__Bounds orthoBounds;
	bool rightHanded;
	h3d__Matrix mproj;
	h3d__Matrix mcam;
	h3d__Matrix m;
	h3d__Vector pos;
	h3d__Vector up;
	h3d__Vector target;
	double viewX;
	double viewY;
	vvirtual* follow;
	h3d__Matrix minv;
	h3d__Matrix miview;
	bool needInv;
};
struct _h3d__scene__LightSystem {
	hl_type *$type;
	int maxLightsPerObject;
	hxsl__Globals globals;
	hxsl__Shader ambientShader;
	int lightCount;
	h3d__scene__RenderContext ctx;
	h3d__scene__Light shadowLight;
	h3d__Vector ambientLight;
	bool perPixelLighting;
};
struct _h3d__impl__RenderContext {
	hl_type *$type;
	h3d__Engine engine;
	double time;
	double elapsedTime;
	int frame;
	h3d__impl__TextureCache textures;
};
struct _h3d__impl__TextureCache {
	hl_type *$type;
	hl__types__ArrayObj cache;
	int position;
	h3d__mat__DepthBuffer defaultDepthBuffer;
	h3d__impl__RenderContext ctx;
	venum* defaultFormat;
};
struct _h3d__scene__RenderContext {
	hl_type *$type;
	h3d__Engine engine;
	double time;
	double elapsedTime;
	int frame;
	h3d__impl__TextureCache textures;
	h3d__Camera camera;
	h3d__scene__Scene scene;
	h3d__pass__Object drawPass;
	h3d__mat__Pass pbrLightPass;
	bool computingStatic;
	hl__types__ArrayObj sharedGlobals;
	h3d__scene__LightSystem lightSystem;
	vclosure* uploadParams;
	hxsl__ShaderList extraShaders;
	bool visibleFlag;
	h3d__pass__Object pool;
	h3d__pass__Object firstAlloc;
	hl__types__ArrayObj cachedShaderList;
	int cachedPos;
	h3d__pass__Object passes;
	h3d__scene__Light lights;
};
struct _h3d__pass__Object {
	hl_type *$type;
	h3d__mat__Pass pass;
	h3d__scene__Object obj;
	int index;
	h3d__pass__Object next;
	h3d__pass__Object nextAlloc;
	hxsl__ShaderList shaders;
	hxsl__RuntimeShader shader;
	double depth;
	int texture;
};
struct _h3d__scene__Light {
	hl_type *$type;
	int flags;
	hl__types__ArrayObj children;
	h3d__scene__Object parent;
	String name;
	double x;
	double y;
	double z;
	double scaleX;
	double scaleY;
	double scaleZ;
	h3d__scene__Object follow;
	h3d__Matrix defaultTransform;
	h3d__anim__Animation currentAnimation;
	h3d__Matrix absPos;
	h3d__Matrix invPos;
	h3d__Quat qRot;
	int lastFrame;
	vvirtual* $_f17;
	hxsl__Shader shader;
	double objectDistance;
	h3d__scene__Light next;
	double cullingDistance;
	int priority;
};
struct _h3d__scene__Renderer {
	hl_type *$type;
	vdynamic* props;
	h3d__pass__Base defaultPass;
	haxe__ds__StringMap passObjects;
	hl__types__ArrayObj allPasses;
	h3d__scene__RenderContext ctx;
	bool hasSetTarget;
	hl__types__ArrayObj effects;
	venum* renderMode;
};
struct _h3d__pass__Base {
	hl_type *$type;
	h3d__scene__RenderContext ctx;
	String name;
};
struct _hxd__SceneEvents {
	hl_type *$type;
	hxd__Window window;
	hl__types__ArrayObj scenes;
	vvirtual* currentOver;
	vvirtual* currentFocus;
	hl__types__ArrayObj pendingEvents;
	hl__types__ArrayObj pushList;
	vvirtual* currentDrag;
	double mouseX;
	double mouseY;
	int lastTouch;
	hxd__Event focusLost;
	hxd__Event checkPos;
	hxd__Event onOut;
};
struct _h3d__pass__Default {
	hl_type *$type;
	h3d__scene__RenderContext ctx;
	String name;
	h3d__pass__ShaderManager manager;
	h3d__shader__Buffers cachedBuffer;
	int shaderCount;
	int textureCount;
	hl__types__ArrayBytes_Int shaderIdMap;
	hl__types__ArrayBytes_Int textureIdMap;
	bool sortPasses;
	int cameraView_id;
	int cameraNear_id;
	int cameraFar_id;
	int cameraProj_id;
	int cameraPos_id;
	int cameraProjDiag_id;
	int cameraProjFlip_id;
	int cameraViewProj_id;
	int cameraInverseViewProj_id;
	int globalTime_id;
	int pixelSize_id;
	int globalModelView_id;
	int globalModelViewInverse_id;
};
struct _h3d__pass__ShaderManager {
	hl_type *$type;
	hxsl__Globals globals;
	hxsl__Cache shaderCache;
	hxsl__ShaderList currentOutput;
};
struct _h3d__shader__Buffers {
	hl_type *$type;
	h3d__shader__ShaderBuffers vertex;
	h3d__shader__ShaderBuffers fragment;
};
struct _h3d__shader__ShaderBuffers {
	hl_type *$type;
	hl__types__ArrayBytes_Single globals;
	hl__types__ArrayBytes_Single params;
	hl__types__ArrayObj tex;
	hl__types__ArrayObj buffers;
};
struct _h3d__pass__HardwarePick {
	hl_type *$type;
	h3d__scene__RenderContext ctx;
	String name;
	h3d__pass__ShaderManager manager;
	h3d__shader__Buffers cachedBuffer;
	int shaderCount;
	int textureCount;
	hl__types__ArrayBytes_Int shaderIdMap;
	hl__types__ArrayBytes_Int textureIdMap;
	bool sortPasses;
	int cameraView_id;
	int cameraNear_id;
	int cameraFar_id;
	int cameraProj_id;
	int cameraPos_id;
	int cameraProjDiag_id;
	int cameraProjFlip_id;
	int cameraViewProj_id;
	int cameraInverseViewProj_id;
	int globalTime_id;
	int pixelSize_id;
	int globalModelView_id;
	int globalModelViewInverse_id;
	double pickX;
	double pickY;
	h3d__pass___HardwarePick__FixedColor fixedColor;
	int colorID;
	h3d__mat__Texture texOut;
	h3d__mat__Pass material;
	int pickedIndex;
};
struct _h3d__pass___HardwarePick__FixedColor {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	h3d__Vector colorID__;
	h3d__Vector viewport__;
};
struct _h2d__Layers {
	hl_type *$type;
	hl__types__ArrayObj children;
	h2d__Object parentContainer;
	h2d__Object parent;
	String name;
	double x;
	double y;
	double scaleX;
	double scaleY;
	double rotation;
	bool visible;
	double alpha;
	h2d__filter__Filter filter;
	double matA;
	double matB;
	double matC;
	double matD;
	double absX;
	double absY;
	bool posChanged;
	bool allocated;
	int lastFrame;
	hl__types__ArrayBytes_Int layersIndexes;
	int layerCount;
};
struct _h2d__Scene {
	hl_type *$type;
	hl__types__ArrayObj children;
	h2d__Object parentContainer;
	h2d__Object parent;
	String name;
	double x;
	double y;
	double scaleX;
	double scaleY;
	double rotation;
	bool visible;
	double alpha;
	h2d__filter__Filter filter;
	double matA;
	double matB;
	double matC;
	double matD;
	double absX;
	double absY;
	bool posChanged;
	bool allocated;
	int lastFrame;
	hl__types__ArrayBytes_Int layersIndexes;
	int layerCount;
	int width;
	int height;
	double mouseX;
	double mouseY;
	bool fixedSize;
	hl__types__ArrayObj interactive;
	hl__types__ArrayObj eventListeners;
	h2d__RenderContext ctx;
	hxd__Window window;
	hxd__SceneEvents events;
	vvirtual* $_f33;
	vvirtual* $_f34;
};
struct _h2d__RenderContext {
	hl_type *$type;
	h3d__Engine engine;
	double time;
	double elapsedTime;
	int frame;
	h3d__impl__TextureCache textures;
	double globalAlpha;
	hl__types__ArrayBytes_Single buffer;
	int bufPos;
	h2d__Scene scene;
	bool defaultSmooth;
	bool killAlpha;
	bool front2back;
	vclosure* onBeginDraw;
	vclosure* onEnterFilter;
	vclosure* onLeaveFilter;
	h2d__col__Bounds tmpBounds;
	h3d__mat__Texture texture;
	h3d__shader__Base2d baseShader;
	h3d__pass__ShaderManager manager;
	hxsl__RuntimeShader compiledShader;
	h3d__shader__Buffers buffers;
	h3d__Buffer fixedBuffer;
	h3d__mat__Pass pass;
	hxsl__ShaderList currentShaders;
	hxsl__ShaderList baseShaderList;
	h2d__Drawable currentObj;
	int stride;
	hl__types__ArrayObj targetsStack;
	int targetsStackIndex;
	bool hasUVPos;
	hl__types__ArrayObj filterStack;
	h2d__Object inFilter;
	int curX;
	int curY;
	int curWidth;
	int curHeight;
	bool hasRenderZone;
	double renderX;
	double renderY;
	double renderW;
	double renderH;
	venum* currentBlend;
	double baseFlipY;
	double targetFlipY;
};
struct _h3d__shader__Base2d {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	double zValue__;
	h3d__mat__Texture texture__;
	bool isRelative__;
	h3d__Vector color__;
	h3d__Vector absoluteMatrixA__;
	h3d__Vector absoluteMatrixB__;
	h3d__Vector filterMatrixA__;
	h3d__Vector filterMatrixB__;
	bool hasUVPos__;
	h3d__Vector uvPos__;
	bool killAlpha__;
	bool pixelAlign__;
	h3d__Vector halfPixelInverse__;
	h3d__Vector viewport__;
};
struct _hxd__fs__EmbedFileSystem {
	hl_type *$type;
	vdynamic* root;
	vvirtual* $_f1;
};
struct _Main {
	hl_type *$type;
	h3d__Engine engine;
	h3d__scene__Scene s3d;
	h2d__Scene s2d;
	hxd__SceneEvents sevents;
	bool isDisposed;
	vvirtual* $_f5;
	h2d__Bitmap bmp;
	h2d__Bitmap bmpref;
	hl__types__ArrayObj bmps;
	int amount_X;
	int amount_Y;
	h2d__Text tf;
};
struct _h2d__Bitmap {
	hl_type *$type;
	hl__types__ArrayObj children;
	h2d__Object parentContainer;
	h2d__Object parent;
	String name;
	double x;
	double y;
	double scaleX;
	double scaleY;
	double rotation;
	bool visible;
	double alpha;
	h2d__filter__Filter filter;
	double matA;
	double matB;
	double matC;
	double matD;
	double absX;
	double absY;
	bool posChanged;
	bool allocated;
	int lastFrame;
	h3d__Vector color;
	venum* blendMode;
	vdynamic* smooth;
	bool tileWrap;
	vdynamic* colorKey;
	hxsl__ShaderList shaders;
	h2d__Tile tile;
};
struct _h2d__Text {
	hl_type *$type;
	hl__types__ArrayObj children;
	h2d__Object parentContainer;
	h2d__Object parent;
	String name;
	double x;
	double y;
	double scaleX;
	double scaleY;
	double rotation;
	bool visible;
	double alpha;
	h2d__filter__Filter filter;
	double matA;
	double matB;
	double matC;
	double matD;
	double absX;
	double absY;
	bool posChanged;
	bool allocated;
	int lastFrame;
	h3d__Vector color;
	venum* blendMode;
	vdynamic* smooth;
	bool tileWrap;
	vdynamic* colorKey;
	hxsl__ShaderList shaders;
	h2d__Font font;
	String text;
	int textColor;
	vdynamic* maxWidth;
	vvirtual* dropShadow;
	int textWidth;
	int textHeight;
	venum* textAlign;
	int letterSpacing;
	int lineSpacing;
	h2d__TileGroup glyphs;
	bool calcDone;
	int calcXMin;
	int calcYMin;
	int calcWidth;
	int calcHeight;
	int calcSizeHeight;
	double constraintWidth;
	double realMaxWidth;
};
struct _h2d__TileGroup {
	hl_type *$type;
	hl__types__ArrayObj children;
	h2d__Object parentContainer;
	h2d__Object parent;
	String name;
	double x;
	double y;
	double scaleX;
	double scaleY;
	double rotation;
	bool visible;
	double alpha;
	h2d__filter__Filter filter;
	double matA;
	double matB;
	double matC;
	double matD;
	double absX;
	double absY;
	bool posChanged;
	bool allocated;
	int lastFrame;
	h3d__Vector color;
	venum* blendMode;
	vdynamic* smooth;
	bool tileWrap;
	vdynamic* colorKey;
	hxsl__ShaderList shaders;
	h2d___TileGroup__TileLayerContent content;
	h3d__Vector curColor;
	h2d__Tile tile;
	int rangeMin;
	int rangeMax;
};
struct _h3d__prim__Primitive {
	hl_type *$type;
	h3d__Buffer buffer;
	h3d__Indexes indexes;
	vvirtual* $_f2;
};
struct _h2d___TileGroup__TileLayerContent {
	hl_type *$type;
	h3d__Buffer buffer;
	h3d__Indexes indexes;
	vvirtual* $_f2;
	hl__types__ArrayBytes_Single tmp;
	double xMin;
	double yMin;
	double xMax;
	double yMax;
};
struct _hxd__res__Image {
	hl_type *$type;
	hxd__fs__FileEntry entry;
	h3d__mat__Texture tex;
	vvirtual* inf;
};
struct _SysError {
	hl_type *$type;
	String msg;
};
struct _dx__LayoutElement {
	hl_type *$type;
	vbyte* semanticName;
	int semanticIndex;
	int format;
	int inputSlot;
	int alignedByteOffset;
	int inputSlotClass;
	int instanceDataStepRate;
};
struct _dx__RenderTargetBlendDesc {
	hl_type *$type;
	int blendEnable;
	int srcBlend;
	int destBlend;
	int blendOp;
	int srcBlendAlpha;
	int destBlendAlpha;
	int blendOpAlpha;
	unsigned char renderTargetWriteMask;
};
struct _format__gif__Reader {
	hl_type *$type;
	haxe__io__Input i;
};
struct _haxe__io__BytesOutput {
	hl_type *$type;
	bool bigEndian;
	haxe__io__BytesBuffer b;
};
struct _haxe__io__BytesBuffer {
	hl_type *$type;
	vbyte* b;
	int pos;
	int size;
};
struct _format__mp3__Reader {
	hl_type *$type;
	haxe__io__Input i;
	format__tools__BitsInput bits;
	int version;
	int samples;
	int sampleSize;
	bool any_read;
	haxe__io__Bytes id3v2_data;
	int id3v2_version;
	int id3v2_flags;
};
struct _format__tools__BitsInput {
	hl_type *$type;
	haxe__io__Input i;
	int nbits;
	int bits;
};
struct _haxe__io__Eof {
	hl_type *$type;
};
struct _format__png__Writer {
	hl_type *$type;
	haxe__io__Output o;
};
struct _haxe__crypto__Crc32 {
	hl_type *$type;
	int crc;
};
struct _format__tga__Reader {
	hl_type *$type;
	haxe__io__Input i;
};
struct _format__wav__Reader {
	hl_type *$type;
	haxe__io__Input i;
	int version;
};
struct _hxd__impl__ArrayIterator_h2d_Object {
	hl_type *$type;
	int i;
	int l;
	hl__types__ArrayObj a;
};
struct _h3d__shader__ColorAdd {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	h3d__Vector color__;
};
struct _h3d__shader__ColorKey {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	h3d__Vector colorKey__;
};
struct _h3d__shader__ColorMatrix {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	h3d__Matrix matrix__;
};
struct _hxsl___ShaderList__ShaderIterator {
	hl_type *$type;
	hxsl__ShaderList l;
	hxsl__ShaderList last;
};
struct _h2d__Interactive {
	hl_type *$type;
	hl__types__ArrayObj children;
	h2d__Object parentContainer;
	h2d__Object parent;
	String name;
	double x;
	double y;
	double scaleX;
	double scaleY;
	double rotation;
	bool visible;
	double alpha;
	h2d__filter__Filter filter;
	double matA;
	double matB;
	double matC;
	double matD;
	double absX;
	double absY;
	bool posChanged;
	bool allocated;
	int lastFrame;
	h3d__Vector color;
	venum* blendMode;
	vdynamic* smooth;
	bool tileWrap;
	vdynamic* colorKey;
	hxsl__ShaderList shaders;
	double width;
	double height;
	venum* cursor;
	bool isEllipse;
	bool cancelEvents;
	bool propagateEvents;
	vdynamic* backgroundColor;
	bool enableRightButton;
	h2d__Scene scene;
	int mouseDownButton;
	h2d__Mask parentMask;
	vclosure* onOver;
	vclosure* onOut;
	vclosure* onPush;
	vclosure* onRelease;
	vclosure* onClick;
	vclosure* onMove;
	vclosure* onWheel;
	vclosure* onFocus;
	vclosure* onFocusLost;
	vclosure* onKeyUp;
	vclosure* onKeyDown;
	vclosure* onCheck;
	vclosure* onTextInput;
	vvirtual* $_f51;
};
struct _h2d__Mask {
	hl_type *$type;
	hl__types__ArrayObj children;
	h2d__Object parentContainer;
	h2d__Object parent;
	String name;
	double x;
	double y;
	double scaleX;
	double scaleY;
	double rotation;
	bool visible;
	double alpha;
	h2d__filter__Filter filter;
	double matA;
	double matB;
	double matC;
	double matD;
	double absX;
	double absY;
	bool posChanged;
	bool allocated;
	int lastFrame;
	int width;
	int height;
	h2d__Mask parentMask;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	vclosure* p0;
	h2d__Interactive p1;
} Enum$1534;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vclosure* p0;
	h2d__Scene p1;
} Enum$1582;
struct _h3d__BufferOffset {
	hl_type *$type;
	int id;
	h3d__Buffer buffer;
	int offset;
	h3d__BufferOffset next;
};
struct _h3d__col__Frustum {
	hl_type *$type;
	h3d__col__Plane pleft;
	h3d__col__Plane pright;
	h3d__col__Plane ptop;
	h3d__col__Plane pbottom;
	h3d__col__Plane pnear;
	h3d__col__Plane pfar;
	bool checkNearFar;
};
struct _h3d__impl__DirectXDriver {
	hl_type *$type;
	bool logEnable;
	dx_driver* driver;
	haxe__ds__IntMap shaders;
	bool hasDeviceError;
	dx_pointer* defaultTarget;
	vvirtual* defaultDepth;
	h3d__mat__DepthBuffer defaultDepthInst;
	h3d__mat__DepthBuffer extraDepthInst;
	vbyte* viewport;
	vbyte* rects;
	dx__ResourceBox box;
	hl__types__ArrayBytes_Int strides;
	hl__types__ArrayBytes_Int offsets;
	h3d__impl___DirectXDriver__CompiledShader currentShader;
	vvirtual* currentIndex;
	vvirtual* currentDepth;
	varray* currentTargets;
	h3d__impl__PipelineState vertexShader;
	h3d__impl__PipelineState pixelShader;
	varray* currentVBuffers;
	int frame;
	int currentMaterialBits;
	int currentStencilMaskBits;
	int currentStencilOpBits;
	int currentStencilRef;
	int currentColorMask;
	int targetsCount;
	bool allowDraw;
	haxe__ds__IntMap depthStates;
	haxe__ds__IntMap blendStates;
	haxe__ds__IntMap rasterStates;
	haxe__ds__IntMap samplerStates;
	dx_pointer* currentDepthState;
	dx_pointer* currentBlendState;
	dx_pointer* currentRasterState;
	vbyte* blendFactors;
	int outputWidth;
	int outputHeight;
	bool hasScissor;
	String shaderVersion;
	dx__Window window;
	h3d__mat__Texture curTexture;
	int mapCount;
	int updateResCount;
	vclosure* onContextLost;
	int backBufferFormat;
	int depthStencilFormat;
	hl__types__ArrayObj tmpTextures;
};
struct _h3d__impl___DirectXDriver__CompiledShader {
	hl_type *$type;
	h3d__impl___DirectXDriver__ShaderContext vertex;
	h3d__impl___DirectXDriver__ShaderContext fragment;
	dx_pointer* layout;
	hl__types__ArrayObj inputs;
	hl__types__ArrayBytes_Int offsets;
};
struct _h3d__impl___DirectXDriver__ShaderContext {
	hl_type *$type;
	dx_pointer* shader;
	int globalsSize;
	int paramsSize;
	int texturesCount;
	int textures2DCount;
	int bufferCount;
	vbyte* paramsContent;
	dx_resource* globals;
	dx_resource* params;
};
struct _h3d__impl__PipelineState {
	hl_type *$type;
	venum* kind;
	varray* samplers;
	hl__types__ArrayBytes_Int samplerBits;
	varray* resources;
	varray* buffers;
};
struct _h3d__impl__InstanceBuffer {
	hl_type *$type;
	vdynamic* data;
	h3d__impl__Driver driver;
	int triCount;
	int commandCount;
};
struct _h3d__anim__AnimatedObject {
	hl_type *$type;
	String objectName;
	h3d__scene__Object targetObject;
	h3d__scene__Skin targetSkin;
	int targetJoint;
};
struct _h3d__scene__Mesh {
	hl_type *$type;
	int flags;
	hl__types__ArrayObj children;
	h3d__scene__Object parent;
	String name;
	double x;
	double y;
	double z;
	double scaleX;
	double scaleY;
	double scaleZ;
	h3d__scene__Object follow;
	h3d__Matrix defaultTransform;
	h3d__anim__Animation currentAnimation;
	h3d__Matrix absPos;
	h3d__Matrix invPos;
	h3d__Quat qRot;
	int lastFrame;
	vvirtual* $_f17;
	h3d__prim__Primitive primitive;
	h3d__mat__Material material;
};
struct _h3d__scene__MultiMaterial {
	hl_type *$type;
	int flags;
	hl__types__ArrayObj children;
	h3d__scene__Object parent;
	String name;
	double x;
	double y;
	double z;
	double scaleX;
	double scaleY;
	double scaleZ;
	h3d__scene__Object follow;
	h3d__Matrix defaultTransform;
	h3d__anim__Animation currentAnimation;
	h3d__Matrix absPos;
	h3d__Matrix invPos;
	h3d__Quat qRot;
	int lastFrame;
	vvirtual* $_f17;
	h3d__prim__Primitive primitive;
	h3d__mat__Material material;
	hl__types__ArrayObj materials;
};
struct _h3d__scene__Skin {
	hl_type *$type;
	int flags;
	hl__types__ArrayObj children;
	h3d__scene__Object parent;
	String name;
	double x;
	double y;
	double z;
	double scaleX;
	double scaleY;
	double scaleZ;
	h3d__scene__Object follow;
	h3d__Matrix defaultTransform;
	h3d__anim__Animation currentAnimation;
	h3d__Matrix absPos;
	h3d__Matrix invPos;
	h3d__Quat qRot;
	int lastFrame;
	vvirtual* $_f17;
	h3d__prim__Primitive primitive;
	h3d__mat__Material material;
	hl__types__ArrayObj materials;
	h3d__anim__Skin skinData;
	hl__types__ArrayObj currentRelPose;
	hl__types__ArrayObj currentAbsPose;
	hl__types__ArrayObj currentPalette;
	hl__types__ArrayObj splitPalette;
	bool jointsUpdated;
	h3d__Matrix jointsAbsPosInv;
	bool paletteChanged;
	h3d__shader__SkinBase skinShader;
	h3d__scene__Graphics jointsGraphics;
	bool showJoints;
};
struct _h3d__anim__Skin {
	hl_type *$type;
	String name;
	int vertexCount;
	int bonesPerVertex;
	hl__types__ArrayBytes_Int vertexJoints;
	hl__types__ArrayBytes_Float vertexWeights;
	hl__types__ArrayObj rootJoints;
	haxe__ds__StringMap namedJoints;
	hl__types__ArrayObj allJoints;
	hl__types__ArrayObj boundJoints;
	h3d__prim__Primitive primitive;
	hl__types__ArrayObj splitJoints;
	hl__types__ArrayBytes_Int triangleGroups;
	hl__types__ArrayObj envelop;
};
struct _h3d__shader__SkinBase {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	int MaxBones__;
	hl__types__ArrayObj bonesMatrixes__;
};
struct _h3d__scene__Graphics {
	hl_type *$type;
	int flags;
	hl__types__ArrayObj children;
	h3d__scene__Object parent;
	String name;
	double x;
	double y;
	double z;
	double scaleX;
	double scaleY;
	double scaleZ;
	h3d__scene__Object follow;
	h3d__Matrix defaultTransform;
	h3d__anim__Animation currentAnimation;
	h3d__Matrix absPos;
	h3d__Matrix invPos;
	h3d__Quat qRot;
	int lastFrame;
	vvirtual* $_f17;
	h3d__prim__Primitive primitive;
	h3d__mat__Material material;
	h3d__prim__BigPrimitive bprim;
	double curX;
	double curY;
	double curZ;
	double curR;
	double curG;
	double curB;
	double curA;
	double lineSize;
	h3d__shader__LineShader lineShader;
	hl__types__ArrayObj tmpPoints;
	bool is3D;
};
struct _h3d__prim__BigPrimitive {
	hl_type *$type;
	h3d__Buffer buffer;
	h3d__Indexes indexes;
	vvirtual* $_f2;
	bool isRaw;
	int stride;
	hl__types__ArrayObj buffers;
	hl__types__ArrayObj allIndexes;
	hl__types__ArrayBytes_Single tmpBuf;
	hl__types__ArrayBytes_hl_UI16 tmpIdx;
	h3d__col__Bounds bounds;
	int bufPos;
	int idxPos;
	int startIndex;
	bool flushing;
	bool hasTangents;
	bool isStatic;
};
struct _h3d__shader__LineShader {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	double lengthScale__;
	double width__;
};
struct _h3d__anim__Joint {
	hl_type *$type;
	int index;
	String name;
	int bindIndex;
	int splitIndex;
	h3d__Matrix defMat;
	h3d__Matrix transPos;
	h3d__anim__Joint parent;
	hl__types__ArrayObj subs;
	bool retargetAnim;
};
struct _h3d__scene__Joint {
	hl_type *$type;
	int flags;
	hl__types__ArrayObj children;
	h3d__scene__Object parent;
	String name;
	double x;
	double y;
	double z;
	double scaleX;
	double scaleY;
	double scaleZ;
	h3d__scene__Object follow;
	h3d__Matrix defaultTransform;
	h3d__anim__Animation currentAnimation;
	h3d__Matrix absPos;
	h3d__Matrix invPos;
	h3d__Quat qRot;
	int lastFrame;
	vvirtual* $_f17;
	h3d__scene__Skin skin;
	int index;
};
struct _h3d__anim__LinearFrame {
	hl_type *$type;
	double tx;
	double ty;
	double tz;
	double qx;
	double qy;
	double qz;
	double qw;
	double sx;
	double sy;
	double sz;
};
struct _h3d__anim__LinearObject {
	hl_type *$type;
	String objectName;
	h3d__scene__Object targetObject;
	h3d__scene__Skin targetSkin;
	int targetJoint;
	bool hasRotation;
	bool hasScale;
	hl__types__ArrayObj frames;
	hl__types__ArrayBytes_Float alphas;
	hl__types__ArrayBytes_Float uvs;
	String propName;
	hl__types__ArrayBytes_Float propValues;
	h3d__Matrix matrix;
	double propCurrentValue;
};
struct _h3d__anim__LinearAnimation {
	hl_type *$type;
	String name;
	int frameCount;
	double sampling;
	double frame;
	double speed;
	vclosure* onAnimEnd;
	vclosure* onEvent;
	bool pause;
	bool loop;
	hl__types__ArrayObj events;
	bool isInstance;
	hl__types__ArrayObj objects;
	bool isSync;
	int lastEvent;
	vvirtual* $_f14;
	String resPath;
	double syncFrame;
};
struct _h3d__shader__UVDelta {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	h3d__Vector uvDelta__;
	h3d__Vector uvScale__;
};
struct _h3d__anim___Skin__Permut {
	hl_type *$type;
	hl__types__ArrayObj joints;
	hl__types__ArrayBytes_Int triangles;
	int material;
	hl__types__ArrayObj indexedJoints;
};
struct _h3d__anim___Skin__Influence {
	hl_type *$type;
	h3d__anim__Joint j;
	double w;
};
struct _h3d__col__Sphere {
	hl_type *$type;
	double x;
	double y;
	double z;
	double r;
	vvirtual* $_f4;
};
struct _h3d__col__OptimizedCollider {
	hl_type *$type;
	vvirtual* a;
	vvirtual* b;
	vvirtual* $_f2;
	vvirtual* $_f3;
};
struct _h3d__col__GroupCollider {
	hl_type *$type;
	hl__types__ArrayObj colliders;
	vvirtual* $_f1;
};
struct _h3d__col__FPoint {
	hl_type *$type;
	float x;
	float y;
	float z;
};
struct _h3d__col__ObjectCollider {
	hl_type *$type;
	h3d__scene__Object obj;
	vvirtual* collider;
	h3d__col__Ray tmpRay;
	vvirtual* $_f3;
	vvirtual* $_f4;
};
struct _h3d__col__TriPlane {
	hl_type *$type;
	h3d__col__TriPlane next;
	double p0x;
	double p0y;
	double p0z;
	double d1x;
	double d1y;
	double d1z;
	double d2x;
	double d2y;
	double d2z;
	double dot00;
	double dot01;
	double dot11;
	double invDenom;
	double nx;
	double ny;
	double nz;
	double d;
	vvirtual* $_f18;
};
struct _h3d__col__Polygon {
	hl_type *$type;
	h3d__col__TriPlane triPlanes;
	vvirtual* $_f1;
};
struct _h3d__col__PolygonBuffer {
	hl_type *$type;
	hl__types__ArrayBytes_Single buffer;
	hl__types__ArrayBytes_hl_UI16 indexes;
	int startIndex;
	int triCount;
	vvirtual* source;
	vvirtual* $_f5;
};
struct _h3d__col__SkinCollider {
	hl_type *$type;
	h3d__scene__Skin obj;
	h3d__col__PolygonBuffer col;
	h3d__col__PolygonBuffer transform;
	int lastFrame;
	vvirtual* $_f4;
	vvirtual* $_f5;
};
struct _hxsl__HlslOut {
	hl_type *$type;
	String SV_POSITION;
	String SV_TARGET;
	String SV_VertexID;
	String SV_InstanceID;
	String STATIC;
	StringBuf buf;
	int exprIds;
	hl__types__ArrayObj exprValues;
	haxe__ds__IntMap locals;
	hl__types__ArrayObj decls;
	bool isVertex;
	haxe__ds__StringMap allNames;
	haxe__ds__IntMap varNames;
	haxe__ds__IntMap varAccess;
};
struct _h3d__shader__Shadow {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
};
struct _h3d__shader__VolumeDecal {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	h3d__Vector scale__;
	h3d__Vector normal__;
	h3d__Vector tangent__;
	bool isCentered__;
};
struct _haxe__format__JsonParser {
	hl_type *$type;
	String str;
	int pos;
};
struct _hxd__fs__NotFound {
	hl_type *$type;
	String path;
};
struct _hxd__fs__LocalFileSystem {
	hl_type *$type;
	hxd__fs__FileEntry root;
	haxe__ds__StringMap fileCache;
	haxe__ds__StringMap converts;
	String baseDir;
	String tmpDir;
	vclosure* onConvert;
	haxe__ds__StringMap directoryCache;
	haxe__ds__StringMap times;
	vdynamic* hashes;
	haxe__ds__StringMap addedPaths;
	vvirtual* $_f10;
};
struct _h3d__scene__DefaultRenderer {
	hl_type *$type;
	vdynamic* props;
	h3d__pass__Base defaultPass;
	haxe__ds__StringMap passObjects;
	hl__types__ArrayObj allPasses;
	h3d__scene__RenderContext ctx;
	bool hasSetTarget;
	hl__types__ArrayObj effects;
	venum* renderMode;
	h3d__pass__Base depth;
	h3d__pass__Base normal;
	h3d__pass__DefaultShadowMap shadow;
};
struct _h3d__pass__Shadows {
	hl_type *$type;
	h3d__scene__RenderContext ctx;
	String name;
	h3d__pass__ShaderManager manager;
	h3d__shader__Buffers cachedBuffer;
	int shaderCount;
	int textureCount;
	hl__types__ArrayBytes_Int shaderIdMap;
	hl__types__ArrayBytes_Int textureIdMap;
	bool sortPasses;
	int cameraView_id;
	int cameraNear_id;
	int cameraFar_id;
	int cameraProj_id;
	int cameraPos_id;
	int cameraProjDiag_id;
	int cameraProjFlip_id;
	int cameraViewProj_id;
	int cameraInverseViewProj_id;
	int globalTime_id;
	int pixelSize_id;
	int globalModelView_id;
	int globalModelViewInverse_id;
	h3d__Camera lightCamera;
	venum* format;
	h3d__mat__Texture staticTexture;
	h3d__scene__Light light;
	venum* mode;
	int size;
	hxsl__Shader shader;
	h3d__pass__Blur blur;
	double power;
	double bias;
};
struct _h3d__pass__ScreenFx {
	hl_type *$type;
	h3d__shader__ScreenShader shader;
	h3d__mat__Pass pass;
	h3d__pass__ShaderManager manager;
	h3d__prim__Primitive plane;
	h3d__Engine _engine;
	hxsl__ShaderList shaders;
	h3d__shader__Buffers buffers;
};
struct _h3d__shader__ScreenShader {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	double flipY__;
};
struct _h3d__pass__Blur {
	hl_type *$type;
	h3d__shader__ScreenShader shader;
	h3d__mat__Pass pass;
	h3d__pass__ShaderManager manager;
	h3d__prim__Primitive plane;
	h3d__Engine _engine;
	hxsl__ShaderList shaders;
	h3d__shader__Buffers buffers;
	hl__types__ArrayObj cubeDir;
	double radius;
	double gain;
	double linear;
	double quality;
	hl__types__ArrayBytes_Float values;
	hl__types__ArrayBytes_Float offsets;
};
struct _h3d__pass__DirShadowMap {
	hl_type *$type;
	h3d__scene__RenderContext ctx;
	String name;
	h3d__pass__ShaderManager manager;
	h3d__shader__Buffers cachedBuffer;
	int shaderCount;
	int textureCount;
	hl__types__ArrayBytes_Int shaderIdMap;
	hl__types__ArrayBytes_Int textureIdMap;
	bool sortPasses;
	int cameraView_id;
	int cameraNear_id;
	int cameraFar_id;
	int cameraProj_id;
	int cameraPos_id;
	int cameraProjDiag_id;
	int cameraProjFlip_id;
	int cameraViewProj_id;
	int cameraInverseViewProj_id;
	int globalTime_id;
	int pixelSize_id;
	int globalModelView_id;
	int globalModelViewInverse_id;
	h3d__Camera lightCamera;
	venum* format;
	h3d__mat__Texture staticTexture;
	h3d__scene__Light light;
	venum* mode;
	int size;
	hxsl__Shader shader;
	h3d__pass__Blur blur;
	double power;
	double bias;
	bool customDepth;
	h3d__mat__DepthBuffer depth;
	h3d__shader__DirShadow dshader;
	h3d__pass__Border border;
	h3d__pass__ScreenFx mergePass;
	vclosure* calcShadowBounds;
};
struct _h3d__shader__DirShadow {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	bool enable__;
	h3d__mat__Texture shadowMap__;
	venum* shadowMapChannel__;
	h3d__Matrix shadowProj__;
	double shadowPower__;
	double shadowBias__;
};
struct _h3d__pass__Border {
	hl_type *$type;
	h3d__shader__ScreenShader shader;
	h3d__mat__Pass pass;
	h3d__pass__ShaderManager manager;
	h3d__prim__Primitive plane;
	h3d__Engine _engine;
	hxsl__ShaderList shaders;
	h3d__shader__Buffers buffers;
};
struct _h3d__pass__DefaultShadowMap {
	hl_type *$type;
	h3d__scene__RenderContext ctx;
	String name;
	h3d__pass__ShaderManager manager;
	h3d__shader__Buffers cachedBuffer;
	int shaderCount;
	int textureCount;
	hl__types__ArrayBytes_Int shaderIdMap;
	hl__types__ArrayBytes_Int textureIdMap;
	bool sortPasses;
	int cameraView_id;
	int cameraNear_id;
	int cameraFar_id;
	int cameraProj_id;
	int cameraPos_id;
	int cameraProjDiag_id;
	int cameraProjFlip_id;
	int cameraViewProj_id;
	int cameraInverseViewProj_id;
	int globalTime_id;
	int pixelSize_id;
	int globalModelView_id;
	int globalModelViewInverse_id;
	h3d__Camera lightCamera;
	venum* format;
	h3d__mat__Texture staticTexture;
	h3d__scene__Light light;
	venum* mode;
	int size;
	hxsl__Shader shader;
	h3d__pass__Blur blur;
	double power;
	double bias;
	bool customDepth;
	h3d__mat__DepthBuffer depth;
	h3d__shader__DirShadow dshader;
	h3d__pass__Border border;
	h3d__pass__ScreenFx mergePass;
	vclosure* calcShadowBounds;
	int shadowMapId;
	int shadowProjId;
	int shadowColorId;
	int shadowPowerId;
	int shadowBiasId;
	h3d__Vector color;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	int p0;
	vdynamic* p1;
	h3d__mat__Texture p2;
} Enum$2292;
typedef struct {
	HL__ENUM_CONSTRUCT__
	h3d__mat__Texture p0;
	int p1;
} Enum$2295;
struct _h3d__mat__TextureArray {
	hl_type *$type;
	vvirtual* _t;
	h3d__impl__MemoryManager mem;
	int id;
	String name;
	int width;
	int height;
	int flags;
	venum* format;
	int lastFrame;
	int bits;
	hl__types__ArrayObj waitLoads;
	venum* mipMap;
	venum* filter;
	venum* wrap;
	vclosure* realloc;
	h3d__mat__DepthBuffer depthBuffer;
	int layers;
};
struct _h3d__scene___RenderContext__SharedGlobal {
	hl_type *$type;
	int gid;
	vdynamic* value;
};
struct _h3d__shader__Blur {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	double flipY__;
	h3d__Matrix cameraInverseViewProj__;
	h3d__mat__Texture texture__;
	h3d__mat__Texture depthTexture__;
	int Quality__;
	bool isDepth__;
	hl__types__ArrayBytes_Float values__;
	hl__types__ArrayBytes_Float offsets__;
	h3d__Vector pixel__;
	bool hasFixedColor__;
	bool smoothFixedColor__;
	h3d__Vector fixedColor__;
	bool isDepthDependant__;
	bool hasNormal__;
	h3d__mat__Texture normalTexture__;
	bool isCube__;
	h3d__mat__Texture cubeTexture__;
	h3d__Matrix cubeDir__;
};
struct _h3d__pass___Border__BorderShader {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	double flipY__;
	h3d__Vector color__;
};
struct _h3d__prim__RawPrimitive {
	hl_type *$type;
	h3d__Buffer buffer;
	h3d__Indexes indexes;
	vvirtual* $_f2;
	int vcount;
	int tcount;
	h3d__col__Bounds bounds;
	vclosure* onContextLost;
};
struct _h3d__pass___Copy__CopyShader {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	double flipY__;
	h3d__mat__Texture texture__;
};
struct _h3d__pass__Copy {
	hl_type *$type;
	h3d__shader__ScreenShader shader;
	h3d__mat__Pass pass;
	h3d__pass__ShaderManager manager;
	h3d__prim__Primitive plane;
	h3d__Engine _engine;
	hxsl__ShaderList shaders;
	h3d__shader__Buffers buffers;
};
struct _h3d__pass___CubeCopy__CubeCopyShader {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	double flipY__;
	h3d__mat__Texture texture__;
	h3d__Matrix mat__;
};
struct _h3d__pass__CubeCopy {
	hl_type *$type;
	h3d__shader__ScreenShader shader;
	h3d__mat__Pass pass;
	h3d__pass__ShaderManager manager;
	h3d__prim__Primitive plane;
	h3d__Engine _engine;
	hxsl__ShaderList shaders;
	h3d__shader__Buffers buffers;
	hl__types__ArrayObj cubeDir;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	double p0;
} hxsl_Output_Const;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
	vdynamic* p1;
} hxsl_Output_Value;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
} hxsl_Output_PackNormal;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
} hxsl_Output_PackFloat;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} hxsl_Output_Vec2;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} hxsl_Output_Vec3;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} hxsl_Output_Vec4;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	hl__types__ArrayObj p1;
} hxsl_Output_Swiz;
struct _h3d__shader__MinMaxShader {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	double flipY__;
	h3d__mat__Texture texA__;
	h3d__mat__Texture texB__;
	bool isMax__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	h3d__Camera p0;
	h3d__col__Bounds p1;
	h3d__Matrix p2;
} Enum$2428;
struct _haxe__io__BytesInput {
	hl_type *$type;
	bool bigEndian;
	vbyte* b;
	int pos;
	int len;
	int totlen;
};
struct _h3d__prim__MeshPrimitive {
	hl_type *$type;
	h3d__Buffer buffer;
	h3d__Indexes indexes;
	vvirtual* $_f2;
	haxe__ds__IntMap bufferCache;
	hl__types__ArrayObj prevNames;
	h3d__BufferOffset prevBuffers;
};
struct _h3d__prim__HMDModel {
	hl_type *$type;
	h3d__Buffer buffer;
	h3d__Indexes indexes;
	vvirtual* $_f2;
	haxe__ds__IntMap bufferCache;
	hl__types__ArrayObj prevNames;
	h3d__BufferOffset prevBuffers;
	hxd__fmt__hmd__Geometry data;
	int dataPosition;
	int indexCount;
	hl__types__ArrayBytes_Int indexesTriPos;
	hxd__fmt__hmd__Library lib;
	int curMaterial;
	vvirtual* collider;
	String normalsRecomputed;
	haxe__ds__StringMap bufferAliases;
};
struct _hxd__fmt__hmd__Geometry {
	hl_type *$type;
	hl__types__ArrayObj props;
	int vertexCount;
	int vertexStride;
	hl__types__ArrayObj vertexFormat;
	int vertexPosition;
	hl__types__ArrayBytes_Int indexCounts;
	int indexPosition;
	h3d__col__Bounds bounds;
};
struct _hxd__fmt__hmd__Library {
	hl_type *$type;
	hxd__res__Resource resource;
	hxd__fmt__hmd__Data header;
	hl__types__ArrayObj cachedPrimitives;
	haxe__ds__StringMap cachedAnimations;
	haxe__ds__StringMap cachedSkin;
	haxe__io__Bytes tmp;
};
struct _hxd__fmt__hmd__Data {
	hl_type *$type;
	int version;
	hl__types__ArrayObj props;
	hl__types__ArrayObj geometries;
	hl__types__ArrayObj materials;
	hl__types__ArrayObj models;
	hl__types__ArrayObj animations;
	int dataPosition;
	haxe__io__Bytes data;
};
struct _hxd__fmt__hmd__GeometryBuffer {
	hl_type *$type;
	hl__types__ArrayBytes_Single vertexes;
	hl__types__ArrayBytes_hl_UI16 indexes;
};
struct _hxd__fmt__hmd__GeometryFormat {
	hl_type *$type;
	String name;
	int format;
};
struct _h3d__prim__Polygon {
	hl_type *$type;
	h3d__Buffer buffer;
	h3d__Indexes indexes;
	vvirtual* $_f2;
	haxe__ds__IntMap bufferCache;
	hl__types__ArrayObj prevNames;
	h3d__BufferOffset prevBuffers;
	hl__types__ArrayObj points;
	hl__types__ArrayObj normals;
	hl__types__ArrayObj tangents;
	hl__types__ArrayObj uvs;
	hl__types__ArrayBytes_hl_UI16 idx;
	hl__types__ArrayObj colors;
	double scaled;
	double translatedX;
	double translatedY;
	double translatedZ;
};
struct _hxd__fmt__hmd__Model {
	hl_type *$type;
	String name;
	hl__types__ArrayObj props;
	int parent;
	String follow;
	hxd__fmt__hmd__Position position;
	int geometry;
	hl__types__ArrayBytes_Int materials;
	hxd__fmt__hmd__Skin skin;
};
struct _hxd__fmt__hmd__Position {
	hl_type *$type;
	double x;
	double y;
	double z;
	double qx;
	double qy;
	double qz;
	double sx;
	double sy;
	double sz;
};
struct _hxd__fmt__hmd__Skin {
	hl_type *$type;
	String name;
	hl__types__ArrayObj props;
	hl__types__ArrayObj joints;
	hl__types__ArrayObj split;
};
struct _h3d__prim__ModelCache {
	hl_type *$type;
	haxe__ds__StringMap models;
	haxe__ds__StringMap textures;
	haxe__ds__StringMap anims;
};
struct _hxd__res__Model {
	hl_type *$type;
	hxd__fs__FileEntry entry;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	vclosure* p0;
	hxd__res__Model p1;
} Enum$2505;
struct _h3d__prim__Plane2D {
	hl_type *$type;
	h3d__Buffer buffer;
	h3d__Indexes indexes;
	vvirtual* $_f2;
};
struct _h3d__prim__UV {
	hl_type *$type;
	double u;
	double v;
};
struct _h3d__scene__DepthPass {
	hl_type *$type;
	h3d__scene__RenderContext ctx;
	String name;
	h3d__pass__ShaderManager manager;
	h3d__shader__Buffers cachedBuffer;
	int shaderCount;
	int textureCount;
	hl__types__ArrayBytes_Int shaderIdMap;
	hl__types__ArrayBytes_Int textureIdMap;
	bool sortPasses;
	int cameraView_id;
	int cameraNear_id;
	int cameraFar_id;
	int cameraProj_id;
	int cameraPos_id;
	int cameraProjDiag_id;
	int cameraProjFlip_id;
	int cameraViewProj_id;
	int cameraInverseViewProj_id;
	int globalTime_id;
	int pixelSize_id;
	int globalModelView_id;
	int globalModelViewInverse_id;
	int depthMapId;
	bool enableSky;
};
struct _h3d__scene__NormalPass {
	hl_type *$type;
	h3d__scene__RenderContext ctx;
	String name;
	h3d__pass__ShaderManager manager;
	h3d__shader__Buffers cachedBuffer;
	int shaderCount;
	int textureCount;
	hl__types__ArrayBytes_Int shaderIdMap;
	hl__types__ArrayBytes_Int textureIdMap;
	bool sortPasses;
	int cameraView_id;
	int cameraNear_id;
	int cameraFar_id;
	int cameraProj_id;
	int cameraPos_id;
	int cameraProjDiag_id;
	int cameraProjFlip_id;
	int cameraViewProj_id;
	int cameraInverseViewProj_id;
	int globalTime_id;
	int pixelSize_id;
	int globalModelView_id;
	int globalModelViewInverse_id;
	int normalMapId;
};
struct _hxd__prefab__rfx__RendererFX {
	hl_type *$type;
	String type;
	String name;
	hxd__prefab__Prefab parent;
	String source;
	hl__types__ArrayObj children;
	bool enabled;
	vdynamic* props;
};
struct _h3d__scene__PassObjects {
	hl_type *$type;
	String name;
	h3d__pass__Object passes;
	bool rendered;
};
struct _h3d__scene___Graphics__GPoint {
	hl_type *$type;
	double x;
	double y;
	double z;
	double r;
	double g;
	double b;
	double a;
};
struct _hxd__impl__ArrayIterator_h3d_scene_Object {
	hl_type *$type;
	int i;
	int l;
	hl__types__ArrayObj a;
};
struct _h3d__shader__VertexColorAlpha {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	bool additive__;
};
struct _h3d__scene__Interactive {
	hl_type *$type;
	int flags;
	hl__types__ArrayObj children;
	h3d__scene__Object parent;
	String name;
	double x;
	double y;
	double z;
	double scaleX;
	double scaleY;
	double scaleZ;
	h3d__scene__Object follow;
	h3d__Matrix defaultTransform;
	h3d__anim__Animation currentAnimation;
	h3d__Matrix absPos;
	h3d__Matrix invPos;
	h3d__Quat qRot;
	int lastFrame;
	vvirtual* $_f17;
	vvirtual* shape;
	vvirtual* preciseShape;
	int priority;
	venum* cursor;
	bool cancelEvents;
	bool propagateEvents;
	bool enableRightButton;
	bool bestMatch;
	h3d__scene__Scene scene;
	int mouseDownButton;
	h3d__Vector hitPoint;
	vclosure* onOver;
	vclosure* onOut;
	vclosure* onPush;
	vclosure* onRelease;
	vclosure* onClick;
	vclosure* onMove;
	vclosure* onWheel;
	vclosure* onFocus;
	vclosure* onFocusLost;
	vclosure* onKeyUp;
	vclosure* onKeyDown;
	vclosure* onCheck;
	vclosure* onTextInput;
	vvirtual* $_f42;
};
struct _h3d__shader__AmbientLight {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	bool additive__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	h3d__col__Ray p0;
	h3d__scene__Scene p1;
	double p2;
	double p3;
	double p4;
	double p5;
	double p6;
	double p7;
} Enum$2680;
struct _h3d__shader__SkinTangent {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	int MaxBones__;
	hl__types__ArrayObj bonesMatrixes__;
};
struct _h3d__shader__Skin {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	int MaxBones__;
	hl__types__ArrayObj bonesMatrixes__;
};
struct _h3d__shader__CubeMinMaxShader {
	hl_type *$type;
	int priority;
	hxsl__SharedShader shader;
	hxsl__ShaderInstance instance;
	int constBits;
	bool constModified;
	double flipY__;
	h3d__mat__Texture texA__;
	h3d__mat__Texture texB__;
	bool isMax__;
	h3d__Matrix mat__;
};
struct _haxe___Int64_____Int64 {
	hl_type *$type;
	int high;
	int low;
};
struct _haxe___Resource__ResourceContent {
	hl_type *$type;
	vbyte* name;
	vbyte* data;
	int dataLen;
};
struct _haxe__Serializer {
	hl_type *$type;
	StringBuf buf;
	hl__types__ArrayDyn cache;
	haxe__ds__StringMap shash;
	int scount;
	bool useCache;
	bool useEnumIndex;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	vclosure* p0;
	haxe__Timer p1;
} Enum$2895;
typedef struct {
	HL__ENUM_CONSTRUCT__
	double p0;
	haxe__Timer p1;
} Enum$2897;
struct _haxe___Unserializer__DefaultResolver {
	hl_type *$type;
};
struct _haxe__Unserializer {
	hl_type *$type;
	String buf;
	int pos;
	int length;
	hl__types__ArrayDyn cache;
	hl__types__ArrayObj scache;
	vdynamic* resolver;
};
struct _haxe__crypto__BaseCode {
	hl_type *$type;
	haxe__io__Bytes base;
	int nbits;
	hl__types__ArrayBytes_Int tbl;
};
struct _haxe__io__BytesDataImpl {
	hl_type *$type;
	vbyte* bytes;
	int length;
};
struct _hl__NativeArrayIterator_Int {
	hl_type *$type;
	varray* arr;
	int pos;
	int length;
};
struct _hl__NativeArrayIterator_Dynamic {
	hl_type *$type;
	varray* arr;
	int pos;
	int length;
};
struct _hl__NativeArrayIterator {
	hl_type *$type;
	varray* arr;
	int pos;
	int length;
};
struct _haxe__ds___StringMap__StringMapKeysIterator {
	hl_type *$type;
	varray* arr;
	int pos;
	int length;
};
struct _haxe__format__JsonPrinter {
	hl_type *$type;
	StringBuf buf;
	vclosure* replacer;
	String indent;
	bool pretty;
	int nind;
};
struct _haxe__io__Path {
	hl_type *$type;
	String dir;
	String file;
	String ext;
	bool backslash;
};
struct _haxe__xml__XmlParserException {
	hl_type *$type;
	String message;
	int lineNumber;
	int positionAtLine;
	int position;
	String xml;
};
struct _haxe__xml__Printer {
	hl_type *$type;
	StringBuf output;
	bool pretty;
};
struct _haxe__zip__Compress {
	hl_type *$type;
	fmt_zip* s;
};
struct _haxe__zip__Uncompress {
	hl_type *$type;
	fmt_zip* s;
};
struct _hl__Mikktspace {
	hl_type *$type;
	vbyte* buffer;
	int stride;
	int xPos;
	int normalPos;
	int uvPos;
	vbyte* tangents;
	int tangentStride;
	int tangentPos;
	vbyte* indexes;
	int indices;
};
struct _hl__Button {
	hl_type *$type;
	ui_window* h;
	vclosure* onClick;
};
struct _hl__WinLog {
	hl_type *$type;
	ui_window* h;
};
struct _hl__types__BytesIterator_Float {
	hl_type *$type;
	int pos;
	hl__types__ArrayBytes_Float a;
};
struct _hl__types__BytesIterator_Int {
	hl_type *$type;
	int pos;
	hl__types__ArrayBytes_Int a;
};
struct _hl__types__BytesIterator_Single {
	hl_type *$type;
	int pos;
	hl__types__ArrayBytes_Single a;
};
struct _hl__types__BytesIterator_hl_UI16 {
	hl_type *$type;
	int pos;
	hl__types__ArrayBytes_hl_UI16 a;
};
struct _hl__types__ArrayDynIterator {
	hl_type *$type;
	hl__types__ArrayBase a;
	int len;
	int pos;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	vclosure* p0;
	haxe__io__Bytes p1;
} Enum$3276;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
	vclosure* p1;
	hl__types__ArrayObj p2;
	h2d__Font p3;
} Enum$3319;
struct _hxd__fmt__bfnt__Reader {
	hl_type *$type;
	haxe__io__Input i;
};
struct _hxd__fmt__bfnt__Writer {
	hl_type *$type;
	haxe__io__Output out;
};
struct _hxd__fmt__fbx__TmpObject {
	hl_type *$type;
	int index;
	vvirtual* model;
	hxd__fmt__fbx__TmpObject parent;
	bool isJoint;
	bool isMesh;
	hl__types__ArrayObj childs;
	h3d__scene__Object obj;
	h3d__anim__Joint joint;
	hxd__fmt__fbx__TmpObject skin;
};
struct _hxd__fmt__fbx___BaseLibrary__AnimCurve {
	hl_type *$type;
	hxd__fmt__fbx__DefaultMatrixes def;
	String object;
	vvirtual* _t;
	vvirtual* r;
	vvirtual* s;
	vvirtual* a;
	vvirtual* fov;
	vvirtual* roll;
	hl__types__ArrayObj uv;
};
struct _hxd__fmt__fbx__DefaultMatrixes {
	hl_type *$type;
	h3d__col__Point trans;
	h3d__col__Point scale;
	h3d__col__Point rotate;
	h3d__col__Point preRot;
	vdynamic* wasRemoved;
};
struct _hxd__fmt__fbx__BaseLibrary {
	hl_type *$type;
	vvirtual* root;
	haxe__ds__IntMap ids;
	haxe__ds__IntMap connect;
	haxe__ds__IntMap namedConnect;
	haxe__ds__IntMap invConnect;
	bool leftHand;
	haxe__ds__StringMap defaultModelMatrixes;
	haxe__ds__StringMap uvAnims;
	hl__types__ArrayObj animationEvents;
	String fileName;
	double version;
	haxe__ds__StringMap keepJoints;
	haxe__ds__StringMap skipObjects;
	int bonesPerVertex;
	int maxBonesPerSkin;
	bool unskinnedJointsAsObjects;
	bool allowVertexColor;
	bool normalizeScaleOrient;
};
struct _hxd__fmt__fbx__Geometry {
	hl_type *$type;
	hxd__fmt__fbx__BaseLibrary lib;
	vvirtual* root;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	hl__types__ArrayObj p1;
} Enum$3375;
struct _hxd__fmt__fbx__HMDOut {
	hl_type *$type;
	vvirtual* root;
	haxe__ds__IntMap ids;
	haxe__ds__IntMap connect;
	haxe__ds__IntMap namedConnect;
	haxe__ds__IntMap invConnect;
	bool leftHand;
	haxe__ds__StringMap defaultModelMatrixes;
	haxe__ds__StringMap uvAnims;
	hl__types__ArrayObj animationEvents;
	String fileName;
	double version;
	haxe__ds__StringMap keepJoints;
	haxe__ds__StringMap skipObjects;
	int bonesPerVertex;
	int maxBonesPerSkin;
	bool unskinnedJointsAsObjects;
	bool allowVertexColor;
	bool normalizeScaleOrient;
	hxd__fmt__hmd__Data d;
	haxe__io__BytesOutput dataOut;
	String filePath;
	haxe__io__Bytes tmp;
	bool absoluteTexturePath;
	bool optimizeSkin;
	bool floatSkinIndexes;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	hl__types__ArrayObj p1;
	hl__types__ArrayObj p2;
	hl__types__ArrayObj p3;
	hl__types__ArrayObj p4;
} Enum$3400;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	hxd__fmt__fbx__HMDOut p1;
} Enum$3402;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hxd__fmt__fbx__HMDOut p0;
	vvirtual* p1;
} Enum$3405;
struct _hxd__fmt__hmd__Material {
	hl_type *$type;
	String name;
	hl__types__ArrayObj props;
	String diffuseTexture;
	String specularTexture;
	String normalMap;
	venum* blendMode;
};
struct _hxd__fmt__hmd__SkinJoint {
	hl_type *$type;
	String name;
	hl__types__ArrayObj props;
	int parent;
	hxd__fmt__hmd__Position position;
	int bind;
	hxd__fmt__hmd__Position transpos;
};
struct _hxd__fmt__hmd__SkinSplit {
	hl_type *$type;
	int materialIndex;
	hl__types__ArrayBytes_Int joints;
};
struct _hxd__fmt__hmd__Animation {
	hl_type *$type;
	String name;
	hl__types__ArrayObj props;
	int frames;
	double sampling;
	double speed;
	bool loop;
	hl__types__ArrayObj objects;
	hl__types__ArrayObj events;
	int dataPosition;
};
struct _hxd__fmt__hmd__AnimationEvent {
	hl_type *$type;
	int frame;
	String data;
};
struct _hxd__fmt__hmd__AnimationObject {
	hl_type *$type;
	String name;
	int flags;
	hl__types__ArrayObj props;
};
struct _hxd__fmt__fbx__Parser {
	hl_type *$type;
	int line;
	String buf;
	haxe__io__Bytes bytes;
	int pos;
	venum* token;
	bool binary;
	int fbxVersion;
};
struct _hxd__fmt__hmd___Library__FormatMap {
	hl_type *$type;
	int size;
	int offset;
	h3d__Vector def;
	hxd__fmt__hmd___Library__FormatMap next;
};
struct _hxd__fmt__hmd__Reader {
	hl_type *$type;
	haxe__io__Input i;
	int version;
};
struct _hxd__fmt__hmd__Writer {
	hl_type *$type;
	haxe__io__Output out;
	int version;
};
struct _hxd__impl__ArrayIterator_hxd_fs_FileEntry {
	hl_type *$type;
	int i;
	int l;
	hl__types__ArrayObj a;
};
struct _hxd__fs__BytesFileEntry {
	hl_type *$type;
	String name;
	String fullPath;
	haxe__io__Bytes bytes;
	int pos;
};
struct _hxd__fs__BytesFileSystem {
	hl_type *$type;
	vvirtual* $_f0;
};
struct _hxd__fs__Convert {
	hl_type *$type;
	String sourceExt;
	String destExt;
	String srcPath;
	String dstPath;
	String srcFilename;
	haxe__io__Bytes srcBytes;
};
struct _hxd__fs__ConvertFBX2HMD {
	hl_type *$type;
	String sourceExt;
	String destExt;
	String srcPath;
	String dstPath;
	String srcFilename;
	haxe__io__Bytes srcBytes;
};
struct _hxd__fs__Command {
	hl_type *$type;
	String sourceExt;
	String destExt;
	String srcPath;
	String dstPath;
	String srcFilename;
	haxe__io__Bytes srcBytes;
	String cmd;
	hl__types__ArrayObj args;
};
struct _hxd__fs__ConvertWAV2MP3 {
	hl_type *$type;
	String sourceExt;
	String destExt;
	String srcPath;
	String dstPath;
	String srcFilename;
	haxe__io__Bytes srcBytes;
};
struct _hxd__fs__ConvertWAV2OGG {
	hl_type *$type;
	String sourceExt;
	String destExt;
	String srcPath;
	String dstPath;
	String srcFilename;
	haxe__io__Bytes srcBytes;
};
struct _hxd__fs__ConvertTGA2PNG {
	hl_type *$type;
	String sourceExt;
	String destExt;
	String srcPath;
	String dstPath;
	String srcFilename;
	haxe__io__Bytes srcBytes;
};
struct _hxd__fs__ConvertFNT2BFNT {
	hl_type *$type;
	String sourceExt;
	String destExt;
	String srcPath;
	String dstPath;
	String srcFilename;
	haxe__io__Bytes srcBytes;
	h2d__Tile emptyTile;
};
struct _hxd__fs___EmbedFileSystem__EmbedEntry {
	hl_type *$type;
	String name;
	hxd__fs__EmbedFileSystem fs;
	String relPath;
	String data;
	haxe__io__Bytes bytes;
	int readPos;
};
struct _hxd__fs__FileInput {
	hl_type *$type;
	bool bigEndian;
	hxd__fs__FileEntry f;
};
struct _hxd__fs___LocalFileSystem__LocalEntry {
	hl_type *$type;
	String name;
	hxd__fs__LocalFileSystem fs;
	String relPath;
	String file;
	sys__io__FileInput fread;
	vdynamic* isDirCached;
	vclosure* watchCallback;
	double watchTime;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
	int p1;
	hxd__fs__LocalFileSystem p2;
} Enum$3597;
struct _hxd__impl__ArrayIterator {
	hl_type *$type;
	int i;
	int l;
	hl__types__ArrayDyn a;
};
struct _hxd__impl__ArrayIterator_hxd_res_Any {
	hl_type *$type;
	int i;
	int l;
	hl__types__ArrayObj a;
};
struct _hxd__prefab__Context {
	hl_type *$type;
	h2d__Object local2d;
	h3d__scene__Object local3d;
	hxd__prefab__ContextShared shared;
	vclosure* cleanup;
	vdynamic* custom;
	bool isRef;
};
struct _hxd__prefab__ContextShared {
	hl_type *$type;
	h2d__Object root2d;
	h3d__scene__Object root3d;
	haxe__ds__ObjectMap contexts;
	haxe__ds__ObjectMap references;
	String currentPath;
	bool editorDisplay;
	h3d__prim__ModelCache cache;
	haxe__ds__StringMap shaderCache;
	haxe__ds__StringMap bakedData;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__Class p0;
	hl__types__ArrayObj p1;
	hl__types__ArrayObj p2;
	hl__types__ArrayObj p3;
} Enum$3650;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	hl__types__ArrayObj p1;
	hl__types__ArrayObj p2;
} Enum$3653;
struct _hxd__prefab__Library {
	hl_type *$type;
	String type;
	String name;
	hxd__prefab__Prefab parent;
	String source;
	hl__types__ArrayObj children;
	bool enabled;
	vdynamic* props;
	bool inRec;
};
struct _hxd__prefab__Unknown {
	hl_type *$type;
	String type;
	String name;
	hxd__prefab__Prefab parent;
	String source;
	hl__types__ArrayObj children;
	bool enabled;
	vdynamic* props;
	vdynamic* data;
};
struct _hxd__res___Any__SingleFileSystem {
	hl_type *$type;
	vvirtual* $_f0;
	String path;
	haxe__io__Bytes bytes;
};
struct _hxd__res__Prefab {
	hl_type *$type;
	hxd__fs__FileEntry entry;
	hxd__prefab__Prefab lib;
};
struct _hxd__res__BitmapFont {
	hl_type *$type;
	hxd__fs__FileEntry entry;
	hxd__res__Loader loader;
	h2d__Font font;
};
struct _hxd__snd__Mp3Data {
	hl_type *$type;
	int samples;
	int samplingRate;
	venum* sampleFormat;
	int channels;
};
struct _hxd__snd__OggData {
	hl_type *$type;
	int samples;
	int samplingRate;
	venum* sampleFormat;
	int channels;
	haxe__io__Bytes bytes;
	fmt_ogg* reader;
	int currentSample;
};
struct _hxd__snd__WavData {
	hl_type *$type;
	int samples;
	int samplingRate;
	venum* sampleFormat;
	int channels;
	haxe__io__Bytes rawData;
};
struct _hxd__snd__Buffer {
	hl_type *$type;
	hxd__snd__openal__BufferHandle handle;
	hxd__res__Sound sound;
	bool isEnd;
	bool isStream;
	int refs;
	double lastStop;
	int start;
	int samples;
	int sampleRate;
};
struct _hxd__snd__openal__Driver {
	hl_type *$type;
	alc_device* device;
	alc_context* context;
	int maxAuxiliarySends;
	haxe__io__Bytes tmpBytes;
	vvirtual* $_f4;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	hxd__snd__Data p0;
	bool p1;
	hxd__snd__Buffer p2;
	hxd__snd__Manager p3;
} Enum$3784;
struct _hxd__snd__effect__LowPass {
	hl_type *$type;
	hxd__snd__Effect next;
	int refs;
	double retainTime;
	double lastStamp;
	hxd__snd__EffectDriver driver;
	int priority;
	double gainHF;
};
struct _hxd__snd__effect__Pitch {
	hl_type *$type;
	hxd__snd__Effect next;
	int refs;
	double retainTime;
	double lastStamp;
	hxd__snd__EffectDriver driver;
	int priority;
	double value;
};
struct _hxd__snd__effect__Reverb {
	hl_type *$type;
	hxd__snd__Effect next;
	int refs;
	double retainTime;
	double lastStamp;
	hxd__snd__EffectDriver driver;
	int priority;
	double wetDryMix;
	double room;
	double roomHF;
	double roomRolloffFactor;
	double decayTime;
	double decayHFRatio;
	double reflections;
	double reflectionsDelay;
	double reverb;
	double reverbDelay;
	double diffusion;
	double density;
	double hfReference;
};
struct _hxd__snd__effect__Spatialization {
	hl_type *$type;
	hxd__snd__Effect next;
	int refs;
	double retainTime;
	double lastStamp;
	hxd__snd__EffectDriver driver;
	int priority;
	h3d__Vector position;
	h3d__Vector velocity;
	h3d__Vector direction;
	double referenceDistance;
	vdynamic* maxDistance;
	vdynamic* fadeDistance;
	double rollOffFactor;
};
struct _hxd__snd__openal__LowPassDriver {
	hl_type *$type;
	hxd__snd__openal__Driver driver;
	int inst;
};
struct _hxd__snd__openal__PitchDriver {
	hl_type *$type;
};
struct _hxd__snd__openal__ReverbDriver {
	hl_type *$type;
	hxd__snd__openal__Driver driver;
	int inst;
	int slot;
	hxd__snd__effect__LowPass dryFilter;
	double dryGain;
};
struct _hxd__snd__openal__SpatializationDriver {
	hl_type *$type;
	vvirtual* driver;
};
struct _hxsl__Error {
	hl_type *$type;
	String msg;
	vvirtual* pos;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	hxsl__SharedShader p0;
	haxe__ds__StringMap p1;
} Enum$3851;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
	haxe__ds__StringMap p1;
	venum* p2;
	vclosure* p3;
	vclosure* p4;
	hl__types__ArrayObj p5;
} Enum$3854;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hxsl__SharedShader p0;
	vvirtual* p1;
	hl__types__ArrayBytes_Int p2;
	venum* p3;
	hl__types__ArrayObj p4;
} Enum$3858;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hxsl__SharedShader p0;
	vvirtual* p1;
	vclosure* p2;
} Enum$3861;
struct _hxsl__Linker {
	hl_type *$type;
	hl__types__ArrayObj allVars;
	haxe__ds__StringMap varMap;
	hxsl___Linker__ShaderInfos curShader;
	hl__types__ArrayObj shaders;
	haxe__ds__IntMap varIdMap;
	haxe__ds__IntMap locals;
	int curInstance;
	int debugDepth;
};
struct _hxsl___Linker__ShaderInfos {
	hl_type *$type;
	int uid;
	String name;
	int priority;
	vvirtual* body;
	hl__types__ArrayObj usedFunctions;
	haxe__ds__ObjectMap deps;
	haxe__ds__IntMap read;
	haxe__ds__IntMap write;
	haxe__ds__IntMap processed;
	vdynamic* vertex;
	bool onStack;
	bool hasDiscard;
	vdynamic* marked;
};
struct _hxsl___Linker__AllocatedVar {
	hl_type *$type;
	int id;
	vvirtual* v;
	String path;
	hl__types__ArrayObj merged;
	venum* kind;
	hxsl___Linker__AllocatedVar parent;
	int instanceIndex;
};
struct _hxsl__Splitter {
	hl_type *$type;
	haxe__ds__IntMap vars;
	haxe__ds__StringMap varNames;
	haxe__ds__ObjectMap varMap;
};
struct _hxsl__Dce {
	hl_type *$type;
	haxe__ds__IntMap used;
	hl__types__ArrayObj channelVars;
	bool markAsKeep;
};
struct _hxsl__ShaderInstanceDesc {
	hl_type *$type;
	hxsl__SharedShader shader;
	int bits;
	int index;
};
struct _hxsl__Flatten {
	hl_type *$type;
	hl__types__ArrayObj globals;
	hl__types__ArrayObj params;
	hl__types__ArrayObj outVars;
	haxe__ds__ObjectMap varMap;
	vvirtual* econsts;
	hl__types__ArrayBytes_Float consts;
	haxe__ds__ObjectMap allocData;
};
struct _hxsl___Flatten__Alloc {
	hl_type *$type;
	venum* _t;
	int pos;
	int size;
	vvirtual* g;
	vvirtual* v;
};
struct _hxsl__Clone {
	hl_type *$type;
	haxe__ds__IntMap varMap;
};
struct _hxsl___Dce__Exit {
	hl_type *$type;
};
struct _hxsl___Dce__VarDeps {
	hl_type *$type;
	vvirtual* v;
	bool keep;
	bool used;
	haxe__ds__IntMap deps;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	vclosure* p0;
	hl__types__ArrayObj p1;
	hl__types__ArrayObj p2;
} Enum$3910;
struct _hxsl__Eval {
	hl_type *$type;
	haxe__ds__ObjectMap varMap;
	bool inlineCalls;
	bool unrollLoops;
	bool eliminateConditionals;
	haxe__ds__IntMap constants;
	haxe__ds__ObjectMap funMap;
	vvirtual* curFun;
	bool markReturn;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	hxsl__Eval p0;
	vvirtual* p1;
} Enum$3928;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hxsl__Eval p0;
	vvirtual* p1;
	vvirtual* p2;
} Enum$3930;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hxsl__Eval p0;
	vvirtual* p1;
	venum* p2;
} Enum$3932;
struct _hxsl__Printer {
	hl_type *$type;
	StringBuf buffer;
	bool varId;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	hxsl___Flatten__Alloc p0;
} hxsl_ARead_AIndex;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hxsl___Flatten__Alloc p0;
	int p1;
	vvirtual* p2;
} hxsl_ARead_AOffset;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vclosure* p0;
	haxe__ds__EnumValueMap p1;
} Enum$3968;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayBytes_Int p0;
	hxsl__HlslOut p1;
} Enum$3972;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vclosure* p0;
	haxe__ds__StringMap p1;
} Enum$3996;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	haxe__ds__IntMap p1;
	hl__types__ArrayObj p2;
} Enum$4000;
typedef struct {
	HL__ENUM_CONSTRUCT__
	haxe__ds__IntMap p0;
	hl__types__ArrayObj p1;
} Enum$4002;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	hxsl__Linker p1;
} Enum$4005;
typedef struct {
	HL__ENUM_CONSTRUCT__
	haxe__ds__IntMap p0;
	hl__types__ArrayObj p1;
	hl__types__ArrayObj p2;
} Enum$4010;
typedef struct {
	HL__ENUM_CONSTRUCT__
	haxe__ds__IntMap p0;
	hl__types__ArrayObj p1;
	hl__types__ArrayObj p2;
	hl__types__ArrayObj p3;
} Enum$4013;
struct _hxsl__ShaderGlobal {
	hl_type *$type;
	vvirtual* v;
	int globalId;
};
struct _hxsl___Splitter__VarProps {
	hl_type *$type;
	vvirtual* v;
	int read;
	int write;
	bool local;
	bool requireInit;
};
struct _Lambda {
	hl_type *$type;
};
struct _Math {
	hl_type *$type;
};
struct _Reflect {
	hl_type *$type;
};
struct _Std {
	hl_type *$type;
};
struct _StringTools {
	hl_type *$type;
};
struct _hl___Bytes__Bytes_Impl_ {
	hl_type *$type;
};
struct _sys__FileSystem {
	hl_type *$type;
};
struct _Sys {
	hl_type *$type;
};
struct _Type {
	hl_type *$type;
};
struct _dx___Cursor__Cursor_Impl_ {
	hl_type *$type;
};
struct _dx___Driver__Shader_Impl_ {
	hl_type *$type;
};
struct _dx___Driver__Layout_Impl_ {
	hl_type *$type;
};
struct _dx___Driver__RasterState_Impl_ {
	hl_type *$type;
};
struct _dx___Driver__RenderTargetView_Impl_ {
	hl_type *$type;
};
struct _dx___Driver__DepthStencilView_Impl_ {
	hl_type *$type;
};
struct _dx___Driver__DepthStencilState_Impl_ {
	hl_type *$type;
};
struct _dx___Driver__BlendState_Impl_ {
	hl_type *$type;
};
struct _dx___Driver__SamplerState_Impl_ {
	hl_type *$type;
};
struct _dx___Driver__ShaderResourceView_Impl_ {
	hl_type *$type;
};
struct _dx___Driver__DxBool_Impl_ {
	hl_type *$type;
};
struct _dx___Driver__PrimitiveTopology_Impl_ {
	hl_type *$type;
};
struct _dx__Driver {
	hl_type *$type;
};
struct _dx__Loop {
	hl_type *$type;
};
struct _dx___Resource__Resource_Impl_ {
	hl_type *$type;
};
struct _format__gif__Tools {
	hl_type *$type;
};
struct _format__mp3__MPEG {
	hl_type *$type;
};
struct _format__mp3__CLayer {
	hl_type *$type;
};
struct _format__mp3__CChannelMode {
	hl_type *$type;
};
struct _format__mp3__CEmphasis {
	hl_type *$type;
};
struct _format__mp3__Tools {
	hl_type *$type;
};
struct _format__png__Tools {
	hl_type *$type;
};
struct _format__tools__Deflate {
	hl_type *$type;
};
struct _format__tools__Inflate {
	hl_type *$type;
};
struct _h3d__mat__Defaults {
	hl_type *$type;
};
struct _h3d__scene___Object__ObjectFlags_Impl_ {
	hl_type *$type;
};
struct _haxe__CallStack {
	hl_type *$type;
};
struct _haxe__EntryPoint {
	hl_type *$type;
};
struct _haxe__Log {
	hl_type *$type;
};
struct _haxe__MainLoop {
	hl_type *$type;
};
struct _haxe__Resource {
	hl_type *$type;
};
struct _haxe__crypto__Base64 {
	hl_type *$type;
};
struct _haxe__crypto__Md5 {
	hl_type *$type;
};
struct _haxe__crypto__Sha1 {
	hl_type *$type;
};
struct _haxe__ds__ArraySort {
	hl_type *$type;
};
struct _haxe__io__FPHelper {
	hl_type *$type;
};
struct _haxe__xml___Access__NodeAccess_Impl_ {
	hl_type *$type;
};
struct _haxe__xml___Access__AttribAccess_Impl_ {
	hl_type *$type;
};
struct _haxe__xml___Access__HasNodeAccess_Impl_ {
	hl_type *$type;
};
struct _haxe__xml___Access__Access_Impl_ {
	hl_type *$type;
};
struct _hl__types___BytesMap__BytesMap_Impl_ {
	hl_type *$type;
};
struct _haxe__xml__Parser {
	hl_type *$type;
};
struct _hl__Format {
	hl_type *$type;
};
struct _hl___NativeArray__NativeArray_Impl_ {
	hl_type *$type;
};
struct _hl___Type__Type_Impl_ {
	hl_type *$type;
};
struct _hl___UI__Sentinel_Impl_ {
	hl_type *$type;
};
struct _hl__UI {
	hl_type *$type;
};
struct _hl__types___IntMap__IntMap_Impl_ {
	hl_type *$type;
};
struct _hl__types___ObjectMap__ObjectMap_Impl_ {
	hl_type *$type;
};
struct _hxd__File {
	hl_type *$type;
};
struct _hxd___FloatBuffer__FloatBuffer_Impl_ {
	hl_type *$type;
};
struct _hxd___IndexBuffer__IndexBuffer_Impl_ {
	hl_type *$type;
};
struct _hxd__Key {
	hl_type *$type;
};
struct _hxd__Math {
	hl_type *$type;
};
struct _hxd___Pixels__PixelsARGB_Impl_ {
	hl_type *$type;
};
struct _hxd___Pixels__PixelsFloat_Impl_ {
	hl_type *$type;
};
struct _hxd___Pixels__Channel_Impl_ {
	hl_type *$type;
};
struct _hxd__Res {
	hl_type *$type;
};
struct _hxd__Timer {
	hl_type *$type;
};
struct _hxd__System {
	hl_type *$type;
};
struct _hxd__fmt__bfnt__FontParser {
	hl_type *$type;
};
struct _hxd__fmt__fbx__FbxTools {
	hl_type *$type;
};
struct _hxd__fmt__hmd___Data__GeometryDataFormat_Impl_ {
	hl_type *$type;
};
struct _hxd__fs___LoadedBitmap__LoadedBitmap_Impl_ {
	hl_type *$type;
};
struct _hxd__impl___UncheckedBytes__UncheckedBytes_Impl_ {
	hl_type *$type;
};
struct _hxd__res__DefaultFont {
	hl_type *$type;
};
struct _hxd__res__Embed {
	hl_type *$type;
};
struct _hxd__res___Image__ImageFormat_Impl_ {
	hl_type *$type;
};
struct _hxsl__Tools {
	hl_type *$type;
};
struct _hxsl__Tools2 {
	hl_type *$type;
};
struct _hxsl__Tools3 {
	hl_type *$type;
};
struct _hxsl__Tools4 {
	hl_type *$type;
};
struct _hxsl___Globals__GlobalSlot_Impl_ {
	hl_type *$type;
};
struct _hxsl__ChannelTools {
	hl_type *$type;
};
struct _openal___AL__Buffer_Impl_ {
	hl_type *$type;
};
struct _openal___AL__Source_Impl_ {
	hl_type *$type;
};
struct _openal___EFX__Effect_Impl_ {
	hl_type *$type;
};
struct _openal___EFX__Filter_Impl_ {
	hl_type *$type;
};
struct _openal___EFX__EffectSlot_Impl_ {
	hl_type *$type;
};
struct _sys__io__File {
	hl_type *$type;
};
