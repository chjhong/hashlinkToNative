// Generated by HLC 4.0.0 (HL v4)
// Functions declaration
Date Date_fromInt(int);
Date Date_fromTime(double);
Date Date_fromString(String);
void Date_new(Date,int,int,int,int,int,int);
double Date_getTime(Date);
String Date_toString(Date);
vbyte* Date___string(Date);
void EReg_new(EReg,String,String);
bool EReg_match(EReg,String);
String EReg_matched(EReg,int);
vvirtual* EReg_matchedPos(EReg);
bool EReg_matchSub(EReg,String,int,int*);
hl__types__ArrayObj EReg_split(EReg,String);
String EReg_replace(EReg,String,String);
String EReg_map(EReg,String,vclosure*);
hl__types__ArrayDyn Lambda_array(vdynamic*);
void hxd_App_staticHandler(void);
void fun$1753(venum*);
void hxd_App_new(hxd__App);
void hxd_App_onResize(hxd__App);
void hxd_App_setScene(hxd__App,vvirtual*,bool*);
void hxd_App_setScene2D(hxd__App,h2d__Scene,bool*);
void hxd_App_render(hxd__App,h3d__Engine);
void fun$1754(hxd__App);
void fun$1755(venum*);
void hxd_App_setup(hxd__App);
void hxd_App_dispose(hxd__App);
void hxd_App_loadAssets(hxd__App,vclosure*);
void hxd_App_init(hxd__App);
void hxd_App_mainLoop(hxd__App);
void hxd_App_update(hxd__App,double);
void Main_main(void);
void Main_new(Main);
void Main_init(Main);
void Main_update(Main,double);
double Math_random(void);
double Math_min(double,double);
vdynamic* Reflect_field(vdynamic*,String);
void Reflect_setField(vdynamic*,String,vdynamic*);
vdynamic* Reflect_callMethod(vdynamic*,vdynamic*,hl__types__ArrayDyn);
hl__types__ArrayObj Reflect_fields(vdynamic*);
bool Reflect_isEnumValue(vdynamic*);
bool Reflect_deleteField(vdynamic*,String);
int Std_random(int);
bool Std_is(vdynamic*,vdynamic*);
String Std_string(vdynamic*);
vdynamic* Std_parseInt(String);
double Std_parseFloat(String);
vdynamic* Std___add__(vdynamic*,vdynamic*);
String String_fromCharCode(int);
String String___alloc__(vbyte*,int);
vbyte* String_call_toString(vdynamic*);
String String_fromUCS2(vbyte*);
String String_fromUTF8(vbyte*);
String String___add__(String,String);
void String_new(String,String);
String String_toUpperCase(String);
String String_toLowerCase(String);
String String_charAt(String,int);
vdynamic* String_charCodeAt(String,int);
int String_findChar(String,int,int,vbyte*,int);
int String_indexOf(String,String,vdynamic*);
int String_lastIndexOf(String,String,vdynamic*);
hl__types__ArrayObj String_split(String,String);
String String_substr(String,int,vdynamic*);
String String_substring(String,int,vdynamic*);
String String_toString(String);
vbyte* String_toUtf8(String);
vbyte* String___string(String);
int String___compare(String,vdynamic*);
void StringBuf_new(StringBuf);
void StringBuf_add(StringBuf,vdynamic*);
void StringBuf_addSub(StringBuf,String,int,vdynamic*);
void StringBuf_addChar(StringBuf,int);
String StringBuf_toString(StringBuf);
vbyte* StringBuf___string(StringBuf);
String StringTools_htmlEscape(String,vdynamic*);
bool StringTools_startsWith(String,String);
bool StringTools_endsWith(String,String);
bool StringTools_isSpace(String,int);
String StringTools_ltrim(String);
String StringTools_rtrim(String);
String StringTools_trim(String);
String StringTools_lpad(String,String,int);
String StringTools_replace(String,String,String);
String StringTools_hex(int,vdynamic*);
String StringTools_quoteUnixArg(String);
String StringTools_quoteWinArg(String,bool);
void SysError_new(SysError,String);
String SysError_toString(SysError);
vbyte* SysError___string(SysError);
vbyte* hl__Bytes_Bytes_Impl__sub(vbyte*,int,int);
bool sys_FileSystem_exists(String);
vvirtual* sys_FileSystem_stat(String);
String sys_FileSystem_fullPath(String);
String sys_FileSystem_absolutePath(String);
bool sys_FileSystem_isDirectory(String);
void sys_FileSystem_createDirectory(String);
void sys_FileSystem_deleteFile(String);
hl__types__ArrayObj sys_FileSystem_readDirectory(String);
vbyte* Sys_getPath(String);
String Sys_makePath(vbyte*);
void Sys_println(vdynamic*);
String Sys_getEnv(String);
String Sys_getCwd(void);
String Sys_systemName(void);
vdynamic* fun$2021(vclosure*,vdynamic*);
int Sys_command(String,hl__types__ArrayObj);
String Sys_programPath(void);
void Type_init(void);
hl__Class Type_initClass(hl_type*,hl_type*,vbyte*);
hl__Enum Type_initEnum(hl_type*,hl_type*);
void Type_register(vbyte*,hl__BaseType);
hl__Class Type_getClass(vdynamic*);
hl__BaseType Type_getEnum(vdynamic*);
hl__Class Type_getSuperClass(hl__Class);
String Type_getClassName(hl__Class);
String Type_getEnumName(hl__BaseType);
hl__Class Type_resolveClass(String);
hl__BaseType Type_resolveEnum(String);
vdynamic* Type_createInstance(hl__Class,hl__types__ArrayDyn);
vdynamic* Type_createEmptyInstance(hl__Class);
vdynamic* Type_createEnum(hl__BaseType,String,hl__types__ArrayDyn);
vdynamic* Type_createEnumIndex(hl__BaseType,int,hl__types__ArrayDyn);
hl__types__ArrayObj Type_getInstanceFields(hl__Class);
hl__types__ArrayObj Type_getEnumConstructs(hl__BaseType);
venum* Type_typeof(vdynamic*);
String Type_enumConstructor(vdynamic*);
hl__types__ArrayDyn Type_enumParameters(vdynamic*);
int Type_enumIndex(vdynamic*);
hl__types__ArrayDyn Type_allEnums(hl__BaseType);
Xml Xml_parse(String);
Xml Xml_createElement(String);
Xml Xml_createPCData(String);
Xml Xml_createCData(String);
Xml Xml_createComment(String);
Xml Xml_createDocType(String);
Xml Xml_createProcessingInstruction(String);
Xml Xml_createDocument(void);
void Xml_new(Xml,int);
String Xml_get(Xml,String);
void Xml_set(Xml,String,String);
bool Xml_exists(Xml,String);
vdynamic* Xml_attributes(Xml);
vdynamic* Xml_elements(Xml);
vdynamic* Xml_elementsNamed(Xml,String);
Xml Xml_firstElement(Xml);
void Xml_addChild(Xml,Xml);
bool Xml_removeChild(Xml,Xml);
String Xml_toString(Xml);
vbyte* Xml___string(Xml);
void dx__Cursor_Cursor_Impl__destroy(dx_cursor*);
void dx__Cursor_Cursor_Impl__set(dx_cursor*);
void dx__Driver_Shader_Impl__release(dx_pointer*);
void dx__Driver_Layout_Impl__release(dx_pointer*);
void dx__Driver_RasterState_Impl__release(dx_pointer*);
void dx__Driver_RenderTargetView_Impl__release(dx_pointer*);
void dx__Driver_DepthStencilView_Impl__release(dx_pointer*);
void dx__Driver_DepthStencilState_Impl__release(dx_pointer*);
void dx__Driver_BlendState_Impl__release(dx_pointer*);
void dx__Driver_SamplerState_Impl__release(dx_pointer*);
void dx__Driver_ShaderResourceView_Impl__release(dx_pointer*);
bool dx__Driver_DxBool_Impl__toBool(int);
int dx__Driver_DxBool_Impl__fromBool(bool);
int dx__Driver_PrimitiveTopology_Impl__controlPointPatchList(int);
void dx_LayoutElement_new(dx__LayoutElement);
void dx_RenderTargetDesc_new(dx__RenderTargetDesc,int,int*);
int dx_RenderTargetDesc_get_firstElement(dx__RenderTargetDesc);
int dx_RenderTargetDesc_set_firstElement(dx__RenderTargetDesc,int);
int dx_RenderTargetDesc_get_elementCount(dx__RenderTargetDesc);
int dx_RenderTargetDesc_set_elementCount(dx__RenderTargetDesc,int);
void dx_RasterizerDesc_new(dx__RasterizerDesc);
void dx_Texture2dDesc_new(dx__Texture2dDesc);
void dx_DepthStencilDesc_new(dx__DepthStencilDesc);
void dx_RenderTargetBlendDesc_new(dx__RenderTargetBlendDesc);
void dx_SamplerDesc_new(dx__SamplerDesc);
void dx_ShaderResourceViewDesc_new(dx__ShaderResourceViewDesc);
dx_driver* dx_Driver_create(dx__Window,int,int*,int*);
dx_pointer* dx_Driver_createRenderTargetView(dx_resource*,dx__RenderTargetDesc);
dx_pointer* dx_Driver_createRasterizerState(dx__RasterizerDesc);
String dx_Driver_getDeviceName(void);
haxe__io__Bytes dx_Driver_compileShader(String,String,String,String,int);
String dx_Driver_disassembleShader(haxe__io__Bytes,int,String);
dx_pointer* dx_Driver_createVertexShader(haxe__io__Bytes);
dx_pointer* dx_Driver_createPixelShader(haxe__io__Bytes);
dx_resource* dx_Driver_createTexture2d(dx__Texture2dDesc,vbyte*);
dx_pointer* dx_Driver_createDepthStencilState(dx__DepthStencilDesc);
dx_pointer* dx_Driver_createSamplerState(dx__SamplerDesc);
dx_pointer* dx_Driver_createShaderResourceView(dx_resource*,dx__ShaderResourceViewDesc);
void dx_Driver_debugPrint(vdynamic*);
bool dx_Driver_get_fullScreen(void);
bool dx_Driver_set_fullScreen(bool);
String dx_Driver_detectKeyboardLayout(void);
void dx_Event_new(dx__Event);
bool dx_Loop_eventLoop(dx__Event);
bool dx_Loop_processEvents(vclosure*);
void dx_ResourceBox_new(dx__ResourceBox);
void dx_ResourceBox_reset(dx__ResourceBox);
void dx__Resource_Resource_Impl__updateSubresource(dx_resource*,int,dx__ResourceBox,vbyte*,int,int);
void dx__Resource_Resource_Impl__copySubresourceRegion(dx_resource*,int,int,int,int,dx_resource*,int,dx__ResourceBox);
void dx_Window_new(dx__Window,String,int,int);
String dx_Window_set_title(dx__Window,String);
int dx_Window_set_displayMode(dx__Window,int);
bool dx_Window_set_visible(dx__Window,bool);
void dx_Window_resize(dx__Window,int,int);
void dx_Window_setPosition(dx__Window,int,int);
int dx_Window_get_width(dx__Window);
int dx_Window_get_height(dx__Window);
int dx_Window_get_x(dx__Window);
int dx_Window_get_y(dx__Window);
void dx_Window_destroy(dx__Window);
void dx_Window_maximize(dx__Window);
void dx_Window_minimize(dx__Window);
void dx_Window_restore(dx__Window);
bool dx_Window_getNextEvent(dx__Window,dx__Event);
void dx_Window_clipCursor(dx__Window,bool);
void format_gif_Reader_new(format__gif__Reader,haxe__io__Input);
vvirtual* format_gif_Reader_read(format__gif__Reader);
venum* format_gif_Reader_readBlock(format__gif__Reader);
venum* format_gif_Reader_readImage(format__gif__Reader);
haxe__io__Bytes format_gif_Reader_readPixels(format__gif__Reader,int,int,bool);
int format_gif_Reader_deinterlace(format__gif__Reader,haxe__io__Bytes,haxe__io__Bytes,int,int,int,int,int);
venum* format_gif_Reader_readExtension(format__gif__Reader);
venum* format_gif_Reader_readApplicationExtension(format__gif__Reader);
haxe__io__Bytes format_gif_Reader_readBlocks(format__gif__Reader);
haxe__io__Bytes format_gif_Reader_readColorTable(format__gif__Reader,int);
int format_gif_Tools_framesCount(vvirtual*);
vvirtual* format_gif_Tools_frame(vvirtual*,int);
vvirtual* format_gif_Tools_graphicControl(vvirtual*,int);
haxe__io__Bytes format_gif_Tools_extractBGRA(vvirtual*,int);
haxe__io__Bytes format_gif_Tools_extractRGBA(vvirtual*,int);
haxe__io__Bytes format_gif_Tools_extractFullBGRA(vvirtual*,int);
haxe__io__Bytes format_gif_Tools_extractFullRGBA(vvirtual*,int);
int format_gif_Tools_loopCount(vvirtual*);
double format_gif_Tools_log2(double);
int format_mp3_MPEG_enum2Num(venum*);
venum* format_mp3_MPEG_num2Enum(int);
venum* format_mp3_MPEG_srNum2Enum(int);
int format_mp3_MPEG_srEnum2Num(venum*);
int format_mp3_MPEG_getBitrateIdx(venum*,venum*,venum*);
int format_mp3_MPEG_getSamplingRateIdx(venum*,venum*);
int format_mp3_MPEG_bitrateEnum2Num(venum*);
venum* format_mp3_MPEG_bitrateNum2Enum(int);
int format_mp3_CLayer_enum2Num(venum*);
venum* format_mp3_CLayer_num2Enum(int);
int format_mp3_CChannelMode_enum2Num(venum*);
venum* format_mp3_CChannelMode_num2Enum(int);
int format_mp3_CEmphasis_enum2Num(venum*);
venum* format_mp3_CEmphasis_num2Enum(int);
void format_mp3_Reader_new(format__mp3__Reader,haxe__io__Input);
void format_mp3_Reader_skipID3v2(format__mp3__Reader);
venum* format_mp3_Reader_seekFrame(format__mp3__Reader);
hl__types__ArrayObj format_mp3_Reader_readFrames(format__mp3__Reader);
vvirtual* format_mp3_Reader_readFrameHeader(format__mp3__Reader);
vvirtual* format_mp3_Reader_readFrame(format__mp3__Reader);
vvirtual* format_mp3_Reader_read(format__mp3__Reader);
venum* format_mp3_Tools_getBitrate(int,int,int);
venum* format_mp3_Tools_getSamplingRate(int,int);
bool format_mp3_Tools_isInvalidFrameHeader(vvirtual*);
int format_mp3_Tools_getSampleDataSize(int,int,int,bool,bool);
int format_mp3_Tools_getSampleDataSizeHdr(vvirtual*);
int format_mp3_Tools_getSampleCount(int);
int format_mp3_Tools_getSampleCountHdr(vvirtual*);
String format_mp3_Tools_getFrameInfo(vvirtual*);
vvirtual* format_png_Tools_getHeader(haxe__ds__List);
haxe__io__Bytes format_png_Tools_getPalette(haxe__ds__List);
int format_png_Tools_filter(haxe__io__Bytes,int,int,int,int,int,int*);
void format_png_Tools_reverseBytes(haxe__io__Bytes);
haxe__io__Bytes format_png_Tools_extractGrey(haxe__ds__List);
haxe__io__Bytes format_png_Tools_extract32(haxe__ds__List,haxe__io__Bytes,vdynamic*);
haxe__ds__List format_png_Tools_buildGrey(int,int,haxe__io__Bytes,vdynamic*);
haxe__ds__List format_png_Tools_buildRGB(int,int,haxe__io__Bytes,vdynamic*);
haxe__ds__List format_png_Tools_build32ARGB(int,int,haxe__io__Bytes,vdynamic*);
haxe__ds__List format_png_Tools_build32BGRA(int,int,haxe__io__Bytes,vdynamic*);
void format_png_Writer_new(format__png__Writer,haxe__io__Output);
void format_png_Writer_write(format__png__Writer,haxe__ds__List);
void format_png_Writer_writeChunk(format__png__Writer,String,haxe__io__Bytes);
void format_tga_Reader_new(format__tga__Reader,haxe__io__Input);
vvirtual* format_tga_Reader_read(format__tga__Reader);
vvirtual* format_tga_Reader_readHeader(format__tga__Reader);
hl__types__ArrayBytes_Int format_tga_Reader_readColorMapData(format__tga__Reader,vvirtual*);
hl__types__ArrayBytes_Int format_tga_Reader_readImageData(format__tga__Reader,vvirtual*,hl__types__ArrayBytes_Int);
hl__types__ArrayBytes_Int format_tga_Reader_readPixels(format__tga__Reader,int,int,int,bool);
hl__types__ArrayBytes_Int format_tga_Reader_readMono(format__tga__Reader,int,int,int,bool);
hl__types__ArrayBytes_Int format_tga_Reader_readIndexes(format__tga__Reader,int,int,hl__types__ArrayBytes_Int,int,bool);
int format_tga_Reader_parsePixel1(format__tga__Reader,int,bool);
int format_tga_Reader_parsePixelGreyAlpha(format__tga__Reader,int,bool);
int format_tga_Reader_parsePixel2(format__tga__Reader,int,bool);
int format_tga_Reader_parsePixel3(format__tga__Reader,int,bool);
int format_tga_Reader_parsePixel4(format__tga__Reader,int,bool);
void format_tools_BitsInput_new(format__tools__BitsInput,haxe__io__Input);
int format_tools_BitsInput_readBits(format__tools__BitsInput,int);
bool format_tools_BitsInput_readBit(format__tools__BitsInput);
void format_tools_BitsInput_reset(format__tools__BitsInput);
haxe__io__Bytes format_tools_Deflate_run(haxe__io__Bytes,vdynamic*);
haxe__io__Bytes format_tools_Inflate_run(haxe__io__Bytes);
void format_wav_Reader_new(format__wav__Reader,haxe__io__Input);
int format_wav_Reader_readInt(format__wav__Reader);
vvirtual* format_wav_Reader_read(format__wav__Reader);
void h2d_Object_new(h2d__Object,h2d__Object);
h2d__col__Bounds h2d_Object_getBounds(h2d__Object,h2d__Object,h2d__col__Bounds);
h2d__col__Bounds h2d_Object_getSize(h2d__Object,h2d__col__Bounds);
vdynamic* h2d_Object_find(h2d__Object,vclosure*);
hl__types__ArrayDyn h2d_Object_findAll(h2d__Object,vclosure*,hl__types__ArrayDyn);
h2d__filter__Filter h2d_Object_set_filter(h2d__Object,h2d__filter__Filter);
void h2d_Object_getBoundsRec(h2d__Object,h2d__Object,h2d__col__Bounds,bool);
void h2d_Object_addBounds(h2d__Object,h2d__Object,h2d__col__Bounds,double,double,double,double);
int h2d_Object_getObjectsCount(h2d__Object);
h2d__col__Point h2d_Object_localToGlobal(h2d__Object,h2d__col__Point);
h2d__col__Point h2d_Object_globalToLocal(h2d__Object,h2d__col__Point);
h2d__Scene h2d_Object_getScene(h2d__Object);
bool h2d_Object_set_visible(h2d__Object,bool);
void h2d_Object_addChild(h2d__Object,h2d__Object);
void h2d_Object_addChildAt(h2d__Object,h2d__Object,int);
void h2d_Object_onContentChanged(h2d__Object);
void h2d_Object_onParentChanged(h2d__Object);
void h2d_Object_onAdd(h2d__Object);
void h2d_Object_onRemove(h2d__Object);
void h2d_Object_getMatrix(h2d__Object,h2d__col__Matrix);
void h2d_Object_removeChild(h2d__Object,h2d__Object);
void h2d_Object_setParentContainer(h2d__Object,h2d__Object);
void h2d_Object_removeChildren(h2d__Object);
void h2d_Object_remove(h2d__Object);
void h2d_Object_drawTo(h2d__Object,h3d__mat__Texture);
void h2d_Object_draw(h2d__Object,h2d__RenderContext);
void h2d_Object_sync(h2d__Object,h2d__RenderContext);
void h2d_Object_syncPos(h2d__Object);
void h2d_Object_calcAbsPos(h2d__Object);
void h2d_Object_emitTile(h2d__Object,h2d__RenderContext,h2d__Tile);
void h2d_Object_clipBounds(h2d__Object,h2d__RenderContext,h2d__col__Bounds);
void h2d_Object_drawFilters(h2d__Object,h2d__RenderContext);
void h2d_Object_drawRec(h2d__Object,h2d__RenderContext);
double h2d_Object_set_x(h2d__Object,double);
double h2d_Object_set_y(h2d__Object,double);
double h2d_Object_set_scaleX(h2d__Object,double);
double h2d_Object_set_scaleY(h2d__Object,double);
double h2d_Object_set_rotation(h2d__Object,double);
void h2d_Object_move(h2d__Object,double,double);
void h2d_Object_setPosition(h2d__Object,double,double);
void h2d_Object_rotate(h2d__Object,double);
void h2d_Object_scale(h2d__Object,double);
void h2d_Object_setScale(h2d__Object,double);
h2d__Object h2d_Object_getChildAt(h2d__Object,int);
int h2d_Object_getChildIndex(h2d__Object,h2d__Object);
h2d__Object h2d_Object_getObjectByName(h2d__Object,String);
int h2d_Object_get_numChildren(h2d__Object);
hxd__impl__ArrayIterator_h2d_Object h2d_Object_iterator(h2d__Object);
String h2d_Object_toString(h2d__Object);
vbyte* h2d_Object___string(h2d__Object);
void h2d_Object_contentChanged(h2d__Object,h2d__Object);
void h2d_Object_constraintSize(h2d__Object,double,double);
void h2d_Drawable_new(h2d__Drawable,h2d__Object);
bool h2d_Drawable_set_tileWrap(h2d__Drawable,bool);
h3d__Vector h2d_Drawable_get_colorAdd(h2d__Drawable);
h3d__Vector h2d_Drawable_set_colorAdd(h2d__Drawable,h3d__Vector);
vdynamic* h2d_Drawable_set_colorKey(h2d__Drawable,vdynamic*);
void h2d_Drawable_adjustColor(h2d__Drawable,vvirtual*);
h3d__Matrix h2d_Drawable_get_colorMatrix(h2d__Drawable);
h3d__Matrix h2d_Drawable_set_colorMatrix(h2d__Drawable,h3d__Matrix);
String fun$2379(vvirtual*);
String h2d_Drawable_getDebugShaderCode(h2d__Drawable,bool*);
hxsl__Shader h2d_Drawable_getShader(h2d__Drawable,hl__Class);
hxsl___ShaderList__ShaderIterator h2d_Drawable_getShaders(h2d__Drawable);
hxsl__Shader h2d_Drawable_addShader(h2d__Drawable,hxsl__Shader);
bool h2d_Drawable_removeShader(h2d__Drawable,hxsl__Shader);
void h2d_Drawable_emitTile(h2d__Drawable,h2d__RenderContext,h2d__Tile);
void h2d_Bitmap_new(h2d__Bitmap,h2d__Tile,h2d__Object);
bool h2d_Bitmap_set_tileWrap(h2d__Bitmap,bool);
void h2d_Bitmap_getBoundsRec(h2d__Bitmap,h2d__Object,h2d__col__Bounds,bool);
void h2d_Bitmap_draw(h2d__Bitmap,h2d__RenderContext);
void h2d_Kerning_new(h2d__Kerning,int,int);
void h2d_FontChar_new(h2d__FontChar,h2d__Tile,int);
void h2d_FontChar_addKerning(h2d__FontChar,int,int);
int h2d_FontChar_getKerningOffset(h2d__FontChar,int);
h2d__FontChar h2d_FontChar_clone(h2d__FontChar);
void h2d_Font_new(h2d__Font,String,int);
h2d__FontChar h2d_Font_getChar(h2d__Font,int);
void h2d_Font_setOffset(h2d__Font,int,int);
h2d__Font h2d_Font_clone(h2d__Font);
void h2d_Font_resizeTo(h2d__Font,int);
bool h2d_Font_hasChar(h2d__Font,int);
void h2d_Font_dispose(h2d__Font);
void h2d_Interactive_new(h2d__Interactive,double,double,h2d__Object);
void h2d_Interactive_onAdd(h2d__Interactive);
void h2d_Interactive_draw(h2d__Interactive,h2d__RenderContext);
void h2d_Interactive_getBoundsRec(h2d__Interactive,h2d__Object,h2d__col__Bounds,bool);
void h2d_Interactive_onParentChanged(h2d__Interactive);
void h2d_Interactive_updateMask(h2d__Interactive);
void h2d_Interactive_onRemove(h2d__Interactive);
bool h2d_Interactive_checkBounds(h2d__Interactive,hxd__Event);
void h2d_Interactive_preventClick(h2d__Interactive);
vvirtual* h2d_Interactive_getInteractiveScene(h2d__Interactive);
void h2d_Interactive_handleEvent(h2d__Interactive,hxd__Event);
venum* h2d_Interactive_set_cursor(h2d__Interactive,venum*);
void h2d_Interactive_eventToLocal(h2d__Interactive,hxd__Event);
void fun$2403(venum*,hxd__Event);
void h2d_Interactive_startDrag(h2d__Interactive,vclosure*,vclosure*);
void h2d_Interactive_stopDrag(h2d__Interactive);
void h2d_Interactive_focus(h2d__Interactive);
void h2d_Interactive_blur(h2d__Interactive);
bool h2d_Interactive_isOver(h2d__Interactive);
bool h2d_Interactive_hasFocus(h2d__Interactive);
void h2d_Interactive_onOver(h2d__Interactive,hxd__Event);
void h2d_Interactive_onOut(h2d__Interactive,hxd__Event);
void h2d_Interactive_onPush(h2d__Interactive,hxd__Event);
void h2d_Interactive_onRelease(h2d__Interactive,hxd__Event);
void h2d_Interactive_onClick(h2d__Interactive,hxd__Event);
void h2d_Interactive_onMove(h2d__Interactive,hxd__Event);
void h2d_Interactive_onWheel(h2d__Interactive,hxd__Event);
void h2d_Interactive_onFocus(h2d__Interactive,hxd__Event);
void h2d_Interactive_onFocusLost(h2d__Interactive,hxd__Event);
void h2d_Interactive_onKeyUp(h2d__Interactive,hxd__Event);
void h2d_Interactive_onKeyDown(h2d__Interactive,hxd__Event);
void h2d_Interactive_onCheck(h2d__Interactive,hxd__Event);
void h2d_Interactive_onTextInput(h2d__Interactive,hxd__Event);
void h2d_Layers_new(h2d__Layers,h2d__Object);
void h2d_Layers_addChild(h2d__Layers,h2d__Object);
void h2d_Layers_add(h2d__Layers,h2d__Object,int);
void h2d_Layers_addChildAt(h2d__Layers,h2d__Object,int);
void h2d_Layers_removeChild(h2d__Layers,h2d__Object);
void h2d_Layers_under(h2d__Layers,h2d__Object);
void h2d_Layers_over(h2d__Layers,h2d__Object);
vdynamic* h2d_Layers_getLayer(h2d__Layers,int);
void h2d_Layers_drawLayer(h2d__Layers,h2d__RenderContext,int);
void h2d_Layers_ysort(h2d__Layers,int);
void h2d_Mask_new(h2d__Mask,int,int,h2d__Object);
void h2d_Mask_onParentChanged(h2d__Mask);
void h2d_Mask_onAdd(h2d__Mask);
void h2d_Mask_updateMask(h2d__Mask);
void h2d_Mask_getBoundsRec(h2d__Mask,h2d__Object,h2d__col__Bounds,bool);
void h2d_Mask_drawRec(h2d__Mask,h2d__RenderContext);
void h3d_impl_RenderContext_new(h3d__impl__RenderContext);
void h2d_RenderContext_new(h2d__RenderContext,h2d__Scene);
void h2d_RenderContext_dispose(h2d__RenderContext);
bool h2d_RenderContext_hasBuffering(h2d__RenderContext);
void h2d_RenderContext_begin(h2d__RenderContext);
h3d__mat__Texture h2d_RenderContext_allocTarget(h2d__RenderContext,String,bool*);
void h2d_RenderContext_clear(h2d__RenderContext,vdynamic*);
void h2d_RenderContext_initShaders(h2d__RenderContext,hxsl__ShaderList);
void h2d_RenderContext_end(h2d__RenderContext);
bool h2d_RenderContext_pushFilter(h2d__RenderContext,h2d__Object);
void h2d_RenderContext_popFilter(h2d__RenderContext);
void h2d_RenderContext_pushTarget(h2d__RenderContext,h3d__mat__Texture,int*,int*,int*,int*);
void h2d_RenderContext_popTarget(h2d__RenderContext,bool*);
void h2d_RenderContext_setRenderZone(h2d__RenderContext,double,double,double,double);
void h2d_RenderContext_clearRenderZone(h2d__RenderContext);
void h2d_RenderContext_drawLayer(h2d__RenderContext,int);
void h2d_RenderContext_drawScene(h2d__RenderContext);
void h2d_RenderContext_flush(h2d__RenderContext);
void h2d_RenderContext__flush(h2d__RenderContext);
void h2d_RenderContext_beforeDraw(h2d__RenderContext);
bool h2d_RenderContext_beginDrawObject(h2d__RenderContext,h2d__Drawable,h3d__mat__Texture);
bool h2d_RenderContext_beginDrawBatch(h2d__RenderContext,h2d__Drawable,h3d__mat__Texture);
bool h2d_RenderContext_drawTile(h2d__RenderContext,h2d__Drawable,h2d__Tile);
bool h2d_RenderContext_beginDraw(h2d__RenderContext,h2d__Drawable,h3d__mat__Texture,bool,bool*);
void h2d_Scene_new(h2d__Scene);
bool h2d_Scene_get_defaultSmooth(h2d__Scene);
bool h2d_Scene_set_defaultSmooth(h2d__Scene,bool);
void h2d_Scene_setEvents(h2d__Scene,hxd__SceneEvents);
int h2d_Scene_get_zoom(h2d__Scene);
int h2d_Scene_set_zoom(h2d__Scene,int);
h2d__RenderContext h2d_Scene_get_renderer(h2d__Scene);
h2d__RenderContext h2d_Scene_set_renderer(h2d__Scene,h2d__RenderContext);
void h2d_Scene_setFixedSize(h2d__Scene,int,int);
void h2d_Scene_checkResize(h2d__Scene);
double h2d_Scene_screenXToLocal(h2d__Scene,double);
double h2d_Scene_screenYToLocal(h2d__Scene,double);
double h2d_Scene_get_mouseX(h2d__Scene);
double h2d_Scene_get_mouseY(h2d__Scene);
void h2d_Scene_dispatchListeners(h2d__Scene,hxd__Event);
bool h2d_Scene_isInteractiveVisible(h2d__Scene,vvirtual*);
h2d__Interactive h2d_Scene_getInteractive(h2d__Scene,double,double);
void h2d_Scene_screenToLocal(h2d__Scene,hxd__Event);
void h2d_Scene_dispatchEvent(h2d__Scene,hxd__Event,vvirtual*);
vvirtual* h2d_Scene_handleEvent(h2d__Scene,hxd__Event,vvirtual*);
void h2d_Scene_addEventListener(h2d__Scene,vclosure*);
bool h2d_Scene_removeEventListener(h2d__Scene,vclosure*);
void fun$2405(venum*,hxd__Event);
void h2d_Scene_startDrag(h2d__Scene,vclosure*,vclosure*,hxd__Event);
void h2d_Scene_stopDrag(h2d__Scene);
h2d__Interactive h2d_Scene_getFocus(h2d__Scene);
void h2d_Scene_addEventTarget(h2d__Scene,h2d__Interactive);
void h2d_Scene_removeEventTarget(h2d__Scene,h2d__Interactive,bool*);
void h2d_Scene_dispose(h2d__Scene);
void h2d_Scene_setElapsedTime(h2d__Scene,double);
void h2d_Scene_drawImplTo(h2d__Scene,h2d__Object,h3d__mat__Texture);
void h2d_Scene_syncOnly(h2d__Scene,double);
void h2d_Scene_render(h2d__Scene,h3d__Engine);
void h2d_Scene_sync(h2d__Scene,h2d__RenderContext);
h2d__Bitmap h2d_Scene_captureBitmap(h2d__Scene,h2d__Tile);
void h2d_Text_new(h2d__Text,h2d__Font,h2d__Object);
h2d__Font h2d_Text_set_font(h2d__Text,h2d__Font);
venum* h2d_Text_set_textAlign(h2d__Text,venum*);
int h2d_Text_set_letterSpacing(h2d__Text,int);
int h2d_Text_set_lineSpacing(h2d__Text,int);
void h2d_Text_constraintSize(h2d__Text,double,double);
void h2d_Text_onAdd(h2d__Text);
void h2d_Text_draw(h2d__Text,h2d__RenderContext);
String h2d_Text_set_text(h2d__Text,String);
void h2d_Text_rebuild(h2d__Text);
int h2d_Text_calcTextWidth(h2d__Text,String);
String h2d_Text_splitText(h2d__Text,String,int*,int*);
void h2d_Text_initGlyphs(h2d__Text,String,bool*,bool*,hl__types__ArrayBytes_Int);
void h2d_Text_updateSize(h2d__Text);
int h2d_Text_get_textHeight(h2d__Text);
int h2d_Text_get_textWidth(h2d__Text);
vdynamic* h2d_Text_set_maxWidth(h2d__Text,vdynamic*);
void h2d_Text_updateConstraint(h2d__Text);
int h2d_Text_set_textColor(h2d__Text,int);
void h2d_Text_getBoundsRec(h2d__Text,h2d__Object,h2d__col__Bounds,bool);
h2d__Tile h2d_Tile_fromColor(int,vdynamic*,vdynamic*,vdynamic*,vvirtual*);
h2d__Tile h2d_Tile_fromBitmap(hxd__BitmapData,vvirtual*);
vvirtual* h2d_Tile_autoCut(hxd__BitmapData,int,vdynamic*,vvirtual*);
h2d__Tile h2d_Tile_fromTexture(h3d__mat__Texture);
h2d__Tile h2d_Tile_fromPixels(hxd__Pixels,vvirtual*);
vvirtual* h2d_Tile_isEmpty(hxd__BitmapData,int,int,int,int,int);
void h2d_Tile_new(h2d__Tile,h3d__mat__Texture,int,int,int,int,int*,int*);
h3d__mat__Texture h2d_Tile_getTexture(h2d__Tile);
bool h2d_Tile_isDisposed(h2d__Tile);
void h2d_Tile_setTexture(h2d__Tile,h3d__mat__Texture);
void h2d_Tile_switchTexture(h2d__Tile,h2d__Tile);
h2d__Tile h2d_Tile_sub(h2d__Tile,int,int,int,int,int*,int*);
h2d__Tile h2d_Tile_center(h2d__Tile);
void h2d_Tile_setCenterRatio(h2d__Tile,vdynamic*,vdynamic*);
void h2d_Tile_flipX(h2d__Tile);
void h2d_Tile_flipY(h2d__Tile);
void h2d_Tile_setPosition(h2d__Tile,int,int);
void h2d_Tile_setSize(h2d__Tile,int,int);
void h2d_Tile_scaleToSize(h2d__Tile,int,int);
void h2d_Tile_scrollDiscrete(h2d__Tile,double,double);
void h2d_Tile_dispose(h2d__Tile);
h2d__Tile h2d_Tile_clone(h2d__Tile);
hl__types__ArrayObj h2d_Tile_split(h2d__Tile,int*,bool*);
hl__types__ArrayObj h2d_Tile_gridFlatten(h2d__Tile,int,int*,int*);
hl__types__ArrayObj h2d_Tile_grid(h2d__Tile,int,int*,int*);
String h2d_Tile_toString(h2d__Tile);
vbyte* h2d_Tile___string(h2d__Tile);
void h2d_Tile_upload(h2d__Tile,hxd__BitmapData);
int h3d_prim_Primitive_triCount(h3d__prim__Primitive);
int h3d_prim_Primitive_vertexCount(h3d__prim__Primitive);
vvirtual* h3d_prim_Primitive_getCollider(h3d__prim__Primitive);
h3d__col__Bounds h3d_prim_Primitive_getBounds(h3d__prim__Primitive);
void h3d_prim_Primitive_alloc(h3d__prim__Primitive,h3d__Engine);
void h3d_prim_Primitive_selectMaterial(h3d__prim__Primitive,int);
h3d__prim__Primitive h3d_prim_Primitive_buildNormalsDisplay(h3d__prim__Primitive);
void h3d_prim_Primitive_render(h3d__prim__Primitive,h3d__Engine);
void h3d_prim_Primitive_dispose(h3d__prim__Primitive);
String h3d_prim_Primitive_toString(h3d__prim__Primitive);
vbyte* h3d_prim_Primitive___string(h3d__prim__Primitive);
void h2d__TileGroup_TileLayerContent_new(h2d___TileGroup__TileLayerContent);
void h2d__TileGroup_TileLayerContent_clear(h2d___TileGroup__TileLayerContent);
bool h2d__TileGroup_TileLayerContent_isEmpty(h2d___TileGroup__TileLayerContent);
int h2d__TileGroup_TileLayerContent_triCount(h2d___TileGroup__TileLayerContent);
void h2d__TileGroup_TileLayerContent_addColor(h2d___TileGroup__TileLayerContent,int,int,h3d__Vector,h2d__Tile);
void h2d__TileGroup_TileLayerContent_add(h2d___TileGroup__TileLayerContent,int,int,double,double,double,double,h2d__Tile);
void h2d__TileGroup_TileLayerContent_addTransform(h2d___TileGroup__TileLayerContent,int,int,double,double,double,h3d__Vector,h2d__Tile);
void h2d__TileGroup_TileLayerContent_addPoint(h2d___TileGroup__TileLayerContent,double,double,int);
void h2d__TileGroup_TileLayerContent_insertColor(h2d___TileGroup__TileLayerContent,int);
void h2d__TileGroup_TileLayerContent_rectColor(h2d___TileGroup__TileLayerContent,double,double,double,double,int);
void h2d__TileGroup_TileLayerContent_rectGradient(h2d___TileGroup__TileLayerContent,double,double,double,double,int,int,int,int);
void h2d__TileGroup_TileLayerContent_fillArc(h2d___TileGroup__TileLayerContent,double,double,double,int,double,double);
void h2d__TileGroup_TileLayerContent_fillCircle(h2d___TileGroup__TileLayerContent,double,double,double,int);
void h2d__TileGroup_TileLayerContent_circle(h2d___TileGroup__TileLayerContent,double,double,double,double,int);
void h2d__TileGroup_TileLayerContent_arc(h2d___TileGroup__TileLayerContent,double,double,double,double,double,double,int);
void h2d__TileGroup_TileLayerContent_alloc(h2d___TileGroup__TileLayerContent,h3d__Engine);
void h2d__TileGroup_TileLayerContent_flush(h2d___TileGroup__TileLayerContent);
void h2d__TileGroup_TileLayerContent_doRender(h2d___TileGroup__TileLayerContent,h3d__Engine,int,int);
void h2d_TileGroup_new(h2d__TileGroup,h2d__Tile,h2d__Object);
void h2d_TileGroup_getBoundsRec(h2d__TileGroup,h2d__Object,h2d__col__Bounds,bool);
void h2d_TileGroup_clear(h2d__TileGroup);
void h2d_TileGroup_invalidate(h2d__TileGroup);
int h2d_TileGroup_count(h2d__TileGroup);
void h2d_TileGroup_onRemove(h2d__TileGroup);
void h2d_TileGroup_setDefaultColor(h2d__TileGroup,int,double*);
void h2d_TileGroup_add(h2d__TileGroup,int,int,h2d__Tile);
void h2d_TileGroup_addColor(h2d__TileGroup,int,int,double,double,double,double,h2d__Tile);
void h2d_TileGroup_addAlpha(h2d__TileGroup,int,int,double,h2d__Tile);
void h2d_TileGroup_addTransform(h2d__TileGroup,int,int,double,double,double,h2d__Tile);
void h2d_TileGroup_draw(h2d__TileGroup,h2d__RenderContext);
void h2d_TileGroup_sync(h2d__TileGroup,h2d__RenderContext);
void h2d_TileGroup_drawWith(h2d__TileGroup,h2d__RenderContext,h2d__Drawable);
h2d__col__Bounds h2d_col_Bounds_fromValues(double,double,double,double);
h2d__col__Bounds h2d_col_Bounds_fromPoints(h2d__col__Point,h2d__col__Point);
void h2d_col_Bounds_new(h2d__col__Bounds);
h2d__col__IBounds h2d_col_Bounds_toIBounds(h2d__col__Bounds,double*);
bool h2d_col_Bounds_intersects(h2d__col__Bounds,h2d__col__Bounds);
bool h2d_col_Bounds_contains(h2d__col__Bounds,h2d__col__Point);
void h2d_col_Bounds_addBounds(h2d__col__Bounds,h2d__col__Bounds);
void h2d_col_Bounds_addPoint(h2d__col__Bounds,h2d__col__Point);
void h2d_col_Bounds_addPos(h2d__col__Bounds,double,double);
void h2d_col_Bounds_set(h2d__col__Bounds,double,double,double,double);
void h2d_col_Bounds_setMin(h2d__col__Bounds,h2d__col__Point);
void h2d_col_Bounds_setMax(h2d__col__Bounds,h2d__col__Point);
void h2d_col_Bounds_doIntersect(h2d__col__Bounds,h2d__col__Bounds);
void h2d_col_Bounds_doUnion(h2d__col__Bounds,h2d__col__Bounds);
h2d__col__Bounds h2d_col_Bounds_intersection(h2d__col__Bounds,h2d__col__Bounds);
h2d__col__Bounds h2d_col_Bounds_union(h2d__col__Bounds,h2d__col__Bounds);
void h2d_col_Bounds_load(h2d__col__Bounds,h2d__col__Bounds);
void h2d_col_Bounds_scalePivot(h2d__col__Bounds,double);
void h2d_col_Bounds_scaleCenter(h2d__col__Bounds,double);
void h2d_col_Bounds_rotate(h2d__col__Bounds,double);
void h2d_col_Bounds_offset(h2d__col__Bounds,double,double);
h2d__col__Point h2d_col_Bounds_getMin(h2d__col__Bounds);
h2d__col__Point h2d_col_Bounds_getCenter(h2d__col__Bounds);
h2d__col__Point h2d_col_Bounds_getSize(h2d__col__Bounds);
h2d__col__Point h2d_col_Bounds_getMax(h2d__col__Bounds);
bool h2d_col_Bounds_isEmpty(h2d__col__Bounds);
void h2d_col_Bounds_empty(h2d__col__Bounds);
void h2d_col_Bounds_all(h2d__col__Bounds);
h2d__col__Bounds h2d_col_Bounds_clone(h2d__col__Bounds);
double h2d_col_Bounds_get_x(h2d__col__Bounds);
double h2d_col_Bounds_get_y(h2d__col__Bounds);
double h2d_col_Bounds_set_x(h2d__col__Bounds,double);
double h2d_col_Bounds_set_y(h2d__col__Bounds,double);
double h2d_col_Bounds_get_width(h2d__col__Bounds);
double h2d_col_Bounds_get_height(h2d__col__Bounds);
double h2d_col_Bounds_set_width(h2d__col__Bounds,double);
double h2d_col_Bounds_set_height(h2d__col__Bounds,double);
String h2d_col_Bounds_toString(h2d__col__Bounds);
vbyte* h2d_col_Bounds___string(h2d__col__Bounds);
h2d__col__IBounds h2d_col_IBounds_fromValues(int,int,int,int);
h2d__col__IBounds h2d_col_IBounds_fromPoints(h2d__col__IPoint,h2d__col__IPoint);
void h2d_col_IBounds_new(h2d__col__IBounds);
h2d__col__Bounds h2d_col_IBounds_toBounds(h2d__col__IBounds,double*);
bool h2d_col_IBounds_intersects(h2d__col__IBounds,h2d__col__IBounds);
bool h2d_col_IBounds_contains(h2d__col__IBounds,h2d__col__IPoint);
void h2d_col_IBounds_addBounds(h2d__col__IBounds,h2d__col__IBounds);
void h2d_col_IBounds_addPoint(h2d__col__IBounds,h2d__col__IPoint);
void h2d_col_IBounds_addPos(h2d__col__IBounds,int,int);
void h2d_col_IBounds_set(h2d__col__IBounds,int,int,int,int);
void h2d_col_IBounds_setMin(h2d__col__IBounds,h2d__col__IPoint);
void h2d_col_IBounds_setMax(h2d__col__IBounds,h2d__col__IPoint);
void h2d_col_IBounds_doIntersect(h2d__col__IBounds,h2d__col__IBounds);
void h2d_col_IBounds_doUnion(h2d__col__IBounds,h2d__col__IBounds);
h2d__col__Bounds h2d_col_IBounds_intersection(h2d__col__IBounds,h2d__col__IBounds);
h2d__col__Bounds h2d_col_IBounds_union(h2d__col__IBounds,h2d__col__IBounds);
void h2d_col_IBounds_load(h2d__col__IBounds,h2d__col__IBounds);
void h2d_col_IBounds_offset(h2d__col__IBounds,int,int);
h2d__col__IPoint h2d_col_IBounds_getMin(h2d__col__IBounds);
h2d__col__IPoint h2d_col_IBounds_getCenter(h2d__col__IBounds);
h2d__col__IPoint h2d_col_IBounds_getSize(h2d__col__IBounds);
h2d__col__IPoint h2d_col_IBounds_getMax(h2d__col__IBounds);
bool h2d_col_IBounds_isEmpty(h2d__col__IBounds);
void h2d_col_IBounds_empty(h2d__col__IBounds);
void h2d_col_IBounds_all(h2d__col__IBounds);
h2d__col__IBounds h2d_col_IBounds_clone(h2d__col__IBounds);
int h2d_col_IBounds_get_x(h2d__col__IBounds);
int h2d_col_IBounds_get_y(h2d__col__IBounds);
int h2d_col_IBounds_set_x(h2d__col__IBounds,int);
int h2d_col_IBounds_set_y(h2d__col__IBounds,int);
int h2d_col_IBounds_get_width(h2d__col__IBounds);
int h2d_col_IBounds_get_height(h2d__col__IBounds);
int h2d_col_IBounds_set_width(h2d__col__IBounds,int);
int h2d_col_IBounds_set_height(h2d__col__IBounds,int);
String h2d_col_IBounds_toString(h2d__col__IBounds);
vbyte* h2d_col_IBounds___string(h2d__col__IBounds);
void h2d_col_IPoint_new(h2d__col__IPoint,int*,int*);
h2d__col__Point h2d_col_IPoint_toPoint(h2d__col__IPoint,double*);
int h2d_col_IPoint_distanceSq(h2d__col__IPoint,h2d__col__IPoint);
double h2d_col_IPoint_distance(h2d__col__IPoint,h2d__col__IPoint);
String h2d_col_IPoint_toString(h2d__col__IPoint);
vbyte* h2d_col_IPoint___string(h2d__col__IPoint);
h2d__col__Point h2d_col_IPoint_sub(h2d__col__IPoint,h2d__col__IPoint);
h2d__col__Point h2d_col_IPoint_add(h2d__col__IPoint,h2d__col__IPoint);
int h2d_col_IPoint_dot(h2d__col__IPoint,h2d__col__IPoint);
int h2d_col_IPoint_lengthSq(h2d__col__IPoint);
double h2d_col_IPoint_length(h2d__col__IPoint);
void h2d_col_IPoint_set(h2d__col__IPoint,int,int);
h2d__col__IPoint h2d_col_IPoint_clone(h2d__col__IPoint);
void h2d_col_Matrix_new(h2d__col__Matrix);
void h2d_col_Matrix_identity(h2d__col__Matrix);
void h2d_col_Matrix_initTranslate(h2d__col__Matrix,double,double);
void h2d_col_Matrix_initScale(h2d__col__Matrix,double,double);
void h2d_col_Matrix_initRotate(h2d__col__Matrix,double);
void h2d_col_Matrix_invert(h2d__col__Matrix);
double h2d_col_Matrix_getDeterminant(h2d__col__Matrix);
void h2d_col_Matrix_inverse(h2d__col__Matrix,h2d__col__Matrix);
h2d__col__Point h2d_col_Matrix_transform(h2d__col__Matrix,h2d__col__Point);
void h2d_col_Matrix_translate(h2d__col__Matrix,double,double);
void h2d_col_Matrix_prependTranslate(h2d__col__Matrix,int,int);
void h2d_col_Matrix_multiply(h2d__col__Matrix,h2d__col__Matrix,h2d__col__Matrix);
void h2d_col_Matrix_scale(h2d__col__Matrix,double,double);
void h2d_col_Matrix_rotate(h2d__col__Matrix,double);
String h2d_col_Matrix_toString(h2d__col__Matrix);
vbyte* h2d_col_Matrix___string(h2d__col__Matrix);
void h2d_col_Point_new(h2d__col__Point,double*,double*);
h2d__col__IPoint h2d_col_Point_toIPoint(h2d__col__Point,double*);
double h2d_col_Point_distanceSq(h2d__col__Point,h2d__col__Point);
double h2d_col_Point_distance(h2d__col__Point,h2d__col__Point);
String h2d_col_Point_toString(h2d__col__Point);
vbyte* h2d_col_Point___string(h2d__col__Point);
h2d__col__Point h2d_col_Point_sub(h2d__col__Point,h2d__col__Point);
h2d__col__Point h2d_col_Point_add(h2d__col__Point,h2d__col__Point);
double h2d_col_Point_dot(h2d__col__Point,h2d__col__Point);
void h2d_col_Point_rotate(h2d__col__Point,double);
double h2d_col_Point_lengthSq(h2d__col__Point);
double h2d_col_Point_length(h2d__col__Point);
void h2d_col_Point_normalize(h2d__col__Point);
void h2d_col_Point_normalizeFast(h2d__col__Point);
void h2d_col_Point_set(h2d__col__Point,double,double);
h2d__col__Point h2d_col_Point_scale(h2d__col__Point,double);
h2d__col__Point h2d_col_Point_clone(h2d__col__Point);
void h2d_filter_Filter_new(h2d__filter__Filter);
void h2d_filter_Filter_sync(h2d__filter__Filter,h2d__RenderContext,h2d__Object);
void h2d_filter_Filter_bind(h2d__filter__Filter,h2d__Object);
void h2d_filter_Filter_unbind(h2d__filter__Filter,h2d__Object);
void h2d_filter_Filter_getBounds(h2d__filter__Filter,h2d__Object,h2d__col__Bounds);
h2d__Tile h2d_filter_Filter_draw(h2d__filter__Filter,h2d__RenderContext,h2d__Tile);
h3d__Buffer h3d_Buffer_ofFloats(hl__types__ArrayBytes_Single,int,hl__types__ArrayObj,vvirtual*);
h3d__Buffer h3d_Buffer_ofSubFloats(hl__types__ArrayBytes_Single,int,int,hl__types__ArrayObj,vvirtual*);
void h3d_Buffer_new(h3d__Buffer,int,int,hl__types__ArrayObj,vvirtual*);
bool h3d_Buffer_isDisposed(h3d__Buffer);
void h3d_Buffer_dispose(h3d__Buffer);
int h3d_Buffer_totalVertices(h3d__Buffer);
void h3d_Buffer_uploadVector(h3d__Buffer,hl__types__ArrayBytes_Single,int,int,int*);
void h3d_Buffer_uploadBytes(h3d__Buffer,haxe__io__Bytes,int,int);
void h3d_Buffer_readBytes(h3d__Buffer,haxe__io__Bytes,int,int,int*);
void h3d_BufferOffset_new(h3d__BufferOffset,h3d__Buffer,int);
void h3d_BufferOffset_dispose(h3d__BufferOffset);
void h3d_Camera_new(h3d__Camera,double*,double*,double*,double*,double*,bool*);
void h3d_Camera_setFovX(h3d__Camera,double,double);
double h3d_Camera_getFovX(h3d__Camera);
h3d__Camera h3d_Camera_clone(h3d__Camera);
h3d__Matrix h3d_Camera_getInverseViewProj(h3d__Camera);
h3d__Matrix h3d_Camera_getInverseView(h3d__Camera);
void h3d_Camera_setCubeMap(h3d__Camera,int,h3d__Vector);
h3d__Vector h3d_Camera_unproject(h3d__Camera,double,double,double);
h3d__col__Ray h3d_Camera_rayFromScreen(h3d__Camera,double,double);
void h3d_Camera_update(h3d__Camera);
h3d__col__Frustum h3d_Camera_getFrustum(h3d__Camera);
hl__types__ArrayObj h3d_Camera_getFrustumCorners(h3d__Camera);
bool h3d_Camera_lostUp(h3d__Camera);
void h3d_Camera_movePosAxis(h3d__Camera,double,double,double*);
void h3d_Camera_moveTargetAxis(h3d__Camera,double,double,double*);
void h3d_Camera_forward(h3d__Camera,double*);
void h3d_Camera_backward(h3d__Camera,double*);
void h3d_Camera_makeCameraMatrix(h3d__Camera,h3d__Matrix);
void h3d_Camera_makeFrustumMatrix(h3d__Camera,h3d__Matrix);
h3d__Vector h3d_Camera_project(h3d__Camera,double,double,double,double,double,bool*);
void h3d_Camera_load(h3d__Camera,h3d__Camera);
void h3d__Engine_TargetTmp_new(h3d___Engine__TargetTmp,h3d__mat__Texture,h3d___Engine__TargetTmp,int,int);
h3d__Engine h3d_Engine_getCurrent(void);
void h3d_Engine_new(h3d__Engine,bool*,int*);
void h3d_Engine_setDriver(h3d__Engine,h3d__impl__Driver);
void h3d_Engine_setCurrent(h3d__Engine);
void h3d_Engine_init(h3d__Engine);
String h3d_Engine_driverName(h3d__Engine,bool*);
void h3d_Engine_selectShader(h3d__Engine,hxsl__RuntimeShader);
void h3d_Engine_selectMaterial(h3d__Engine,h3d__mat__Pass);
void h3d_Engine_uploadShaderBuffers(h3d__Engine,h3d__shader__Buffers,int);
bool h3d_Engine_selectBuffer(h3d__Engine,h3d__Buffer);
void h3d_Engine_renderTriBuffer(h3d__Engine,h3d__Buffer,int*,int*);
void h3d_Engine_renderQuadBuffer(h3d__Engine,h3d__Buffer,int*,int*);
void h3d_Engine_renderBuffer(h3d__Engine,h3d__Buffer,h3d__Indexes,int,int*,int*);
void h3d_Engine_renderIndexed(h3d__Engine,h3d__Buffer,h3d__Indexes,int*,int*);
void h3d_Engine_renderMultiBuffers(h3d__Engine,h3d__BufferOffset,h3d__Indexes,int*,int*);
void h3d_Engine_renderInstanced(h3d__Engine,h3d__BufferOffset,h3d__Indexes,h3d__impl__InstanceBuffer);
bool h3d_Engine_set_debug(h3d__Engine,bool);
void h3d_Engine_onCreate(h3d__Engine,bool);
void h3d_Engine_onContextLost(h3d__Engine);
void h3d_Engine_onReady(h3d__Engine);
void h3d_Engine_onWindowResize(h3d__Engine);
bool h3d_Engine_set_fullScreen(h3d__Engine,bool);
void h3d_Engine_onResized(h3d__Engine);
void h3d_Engine_resize(h3d__Engine,int,int);
bool h3d_Engine_begin(h3d__Engine);
bool h3d_Engine_hasFeature(h3d__Engine,venum*);
void h3d_Engine_end(h3d__Engine);
h3d__mat__Texture h3d_Engine_getCurrentTarget(h3d__Engine);
void h3d_Engine_pushTarget(h3d__Engine,h3d__mat__Texture,int*,int*);
void h3d_Engine_updateNeedFlush(h3d__Engine);
void h3d_Engine_pushTargets(h3d__Engine,hl__types__ArrayObj);
void h3d_Engine_popTarget(h3d__Engine);
void h3d_Engine_flushTarget(h3d__Engine);
void h3d_Engine_doFlushTarget(h3d__Engine);
void h3d_Engine_clearF(h3d__Engine,h3d__Vector,vdynamic*,vdynamic*);
void h3d_Engine_clear(h3d__Engine,vdynamic*,vdynamic*,vdynamic*);
void h3d_Engine_setRenderZone(h3d__Engine,int*,int*,int*,int*);
bool h3d_Engine_render(h3d__Engine,vdynamic*);
void h3d_Engine_dispose(h3d__Engine);
double h3d_Engine_get_fps(h3d__Engine);
h3d__Indexes h3d_Indexes_alloc(hl__types__ArrayBytes_hl_UI16,int*,int*);
void h3d_Indexes_new(h3d__Indexes,int,bool*);
bool h3d_Indexes_isDisposed(h3d__Indexes);
void h3d_Indexes_upload(h3d__Indexes,hl__types__ArrayBytes_hl_UI16,int,int,int*);
void h3d_Indexes_uploadBytes(h3d__Indexes,haxe__io__Bytes,int,int);
void h3d_Indexes_readBytes(h3d__Indexes,haxe__io__Bytes,int,int,int*);
void h3d_Indexes_dispose(h3d__Indexes);
h3d__Matrix h3d_Matrix_I(void);
h3d__Matrix h3d_Matrix_L(hl__types__ArrayBytes_Float);
h3d__Matrix h3d_Matrix_T(double*,double*,double*);
h3d__Matrix h3d_Matrix_R(double,double,double);
h3d__Matrix h3d_Matrix_S(double*,double*,double*);
h3d__Matrix h3d_Matrix_lookAtX(h3d__Vector,h3d__Vector,h3d__Matrix);
void h3d_Matrix_new(h3d__Matrix);
double h3d_Matrix_get_tx(h3d__Matrix);
double h3d_Matrix_get_ty(h3d__Matrix);
double h3d_Matrix_get_tz(h3d__Matrix);
double h3d_Matrix_set_tx(h3d__Matrix,double);
double h3d_Matrix_set_ty(h3d__Matrix,double);
double h3d_Matrix_set_tz(h3d__Matrix,double);
void h3d_Matrix_zero(h3d__Matrix);
void h3d_Matrix_identity(h3d__Matrix);
void h3d_Matrix_initRotationX(h3d__Matrix,double);
void h3d_Matrix_initRotationY(h3d__Matrix,double);
void h3d_Matrix_initRotationZ(h3d__Matrix,double);
void h3d_Matrix_initTranslation(h3d__Matrix,double*,double*,double*);
void h3d_Matrix_initScale(h3d__Matrix,double*,double*,double*);
void h3d_Matrix_initRotationAxis(h3d__Matrix,h3d__Vector,double);
void h3d_Matrix_initRotation(h3d__Matrix,double,double,double);
void h3d_Matrix_translate(h3d__Matrix,double*,double*,double*);
void h3d_Matrix_scale(h3d__Matrix,double*,double*,double*);
void h3d_Matrix_rotate(h3d__Matrix,double,double,double);
void h3d_Matrix_rotateAxis(h3d__Matrix,h3d__Vector,double);
h3d__Vector h3d_Matrix_getPosition(h3d__Matrix,h3d__Vector);
void h3d_Matrix_setPosition(h3d__Matrix,h3d__Vector);
void h3d_Matrix_prependTranslation(h3d__Matrix,double*,double*,double*);
h3d__Vector h3d_Matrix_getScale(h3d__Matrix);
void h3d_Matrix_prependRotation(h3d__Matrix,double,double,double);
void h3d_Matrix_prependRotationAxis(h3d__Matrix,h3d__Vector,double);
void h3d_Matrix_prependScale(h3d__Matrix,double*,double*,double*);
void h3d_Matrix_multiply3x4(h3d__Matrix,h3d__Matrix,h3d__Matrix);
void h3d_Matrix_multiply3x4inline(h3d__Matrix,h3d__Matrix,h3d__Matrix);
void h3d_Matrix_multiply(h3d__Matrix,h3d__Matrix,h3d__Matrix);
void h3d_Matrix_multiplyValue(h3d__Matrix,double);
void h3d_Matrix_invert(h3d__Matrix);
double h3d_Matrix_getDeterminant(h3d__Matrix);
void h3d_Matrix_inverse3x4(h3d__Matrix,h3d__Matrix);
void h3d_Matrix_initInverse(h3d__Matrix,h3d__Matrix);
void h3d_Matrix_initInverse3x3(h3d__Matrix,h3d__Matrix);
h3d__Vector h3d_Matrix_front(h3d__Matrix);
h3d__Vector h3d_Matrix_right(h3d__Matrix);
h3d__Vector h3d_Matrix_up(h3d__Matrix);
void h3d_Matrix_transpose(h3d__Matrix);
h3d__Matrix h3d_Matrix_clone(h3d__Matrix);
void h3d_Matrix_load(h3d__Matrix,h3d__Matrix);
void h3d_Matrix_loadValues(h3d__Matrix,hl__types__ArrayBytes_Float);
hl__types__ArrayBytes_Float h3d_Matrix_getFloats(h3d__Matrix);
h3d__Vector h3d_Matrix_getEulerAngles(h3d__Matrix);
String h3d_Matrix_toString(h3d__Matrix);
vbyte* h3d_Matrix___string(h3d__Matrix);
void h3d_Matrix_colorHue(h3d__Matrix,double);
void h3d_Matrix_colorSaturate(h3d__Matrix,double);
void h3d_Matrix_colorContrast(h3d__Matrix,double);
void h3d_Matrix_colorLightness(h3d__Matrix,double);
void h3d_Matrix_colorGain(h3d__Matrix,int,double);
void h3d_Matrix_colorBits(h3d__Matrix,int,double);
void h3d_Matrix_colorAdd(h3d__Matrix,int);
void h3d_Matrix_colorSet(h3d__Matrix,int,double*);
void h3d_Quat_new(h3d__Quat,double*,double*,double*,double*);
void h3d_Quat_set(h3d__Quat,double,double,double,double);
void h3d_Quat_identity(h3d__Quat);
double h3d_Quat_lengthSq(h3d__Quat);
double h3d_Quat_length(h3d__Quat);
void h3d_Quat_load(h3d__Quat,h3d__Quat);
h3d__Quat h3d_Quat_clone(h3d__Quat);
void h3d_Quat_initMoveTo(h3d__Quat,h3d__Vector,h3d__Vector);
void h3d_Quat_initDirection(h3d__Quat,h3d__Vector);
void h3d_Quat_initRotateAxis(h3d__Quat,double,double,double,double);
void h3d_Quat_initRotateMatrix(h3d__Quat,h3d__Matrix);
void h3d_Quat_normalize(h3d__Quat);
void h3d_Quat_initRotation(h3d__Quat,double,double,double);
void h3d_Quat_multiply(h3d__Quat,h3d__Quat,h3d__Quat);
h3d__Vector h3d_Quat_toEuler(h3d__Quat);
void h3d_Quat_lerp(h3d__Quat,h3d__Quat,h3d__Quat,double,bool*);
void h3d_Quat_slerp(h3d__Quat,h3d__Quat,h3d__Quat,double);
void h3d_Quat_conjugate(h3d__Quat);
void h3d_Quat_negate(h3d__Quat);
double h3d_Quat_dot(h3d__Quat,h3d__Quat);
h3d__Vector h3d_Quat_getDirection(h3d__Quat);
h3d__Matrix h3d_Quat_toMatrix(h3d__Quat,h3d__Matrix);
String h3d_Quat_toString(h3d__Quat);
vbyte* h3d_Quat___string(h3d__Quat);
h3d__Vector h3d_Vector_fromColor(int,double*);
h3d__Vector h3d_Vector_fromArray(hl__types__ArrayBytes_Float);
void h3d_Vector_new(h3d__Vector,double*,double*,double*,double*);
double h3d_Vector_distance(h3d__Vector,h3d__Vector);
double h3d_Vector_distanceSq(h3d__Vector,h3d__Vector);
h3d__Vector h3d_Vector_sub(h3d__Vector,h3d__Vector);
h3d__Vector h3d_Vector_add(h3d__Vector,h3d__Vector);
h3d__Vector h3d_Vector_cross(h3d__Vector,h3d__Vector);
h3d__Vector h3d_Vector_reflect(h3d__Vector,h3d__Vector);
double h3d_Vector_dot3(h3d__Vector,h3d__Vector);
double h3d_Vector_dot4(h3d__Vector,h3d__Vector);
double h3d_Vector_lengthSq(h3d__Vector);
double h3d_Vector_length(h3d__Vector);
void h3d_Vector_normalize(h3d__Vector);
void h3d_Vector_normalizeFast(h3d__Vector);
h3d__Vector h3d_Vector_getNormalized(h3d__Vector);
void h3d_Vector_set(h3d__Vector,double*,double*,double*,double*);
void h3d_Vector_load(h3d__Vector,h3d__Vector);
void h3d_Vector_scale3(h3d__Vector,double);
void h3d_Vector_project(h3d__Vector,h3d__Matrix);
void h3d_Vector_lerp(h3d__Vector,h3d__Vector,h3d__Vector,double);
void h3d_Vector_transform3x4(h3d__Vector,h3d__Matrix);
void h3d_Vector_transform3x3(h3d__Vector,h3d__Matrix);
void h3d_Vector_transform(h3d__Vector,h3d__Matrix);
h3d__Vector h3d_Vector_clone(h3d__Vector);
h3d__col__Point h3d_Vector_toPoint(h3d__Vector);
String h3d_Vector_toString(h3d__Vector);
vbyte* h3d_Vector___string(h3d__Vector);
double h3d_Vector_get_r(h3d__Vector);
double h3d_Vector_get_g(h3d__Vector);
double h3d_Vector_get_b(h3d__Vector);
double h3d_Vector_get_a(h3d__Vector);
double h3d_Vector_set_r(h3d__Vector,double);
double h3d_Vector_set_g(h3d__Vector,double);
double h3d_Vector_set_b(h3d__Vector,double);
double h3d_Vector_set_a(h3d__Vector,double);
void h3d_Vector_setColor(h3d__Vector,int);
void h3d_Vector_makeColor(h3d__Vector,double,double*,double*);
int h3d_Vector_toColor(h3d__Vector);
h3d__Vector h3d_Vector_toColorHSL(h3d__Vector);
void h3d_anim_AnimatedObject_new(h3d__anim__AnimatedObject,String);
h3d__anim__AnimatedObject h3d_anim_AnimatedObject_clone(h3d__anim__AnimatedObject);
void h3d_anim_Animation_new(h3d__anim__Animation,String,int,double);
double h3d_anim_Animation_getDuration(h3d__anim__Animation);
int h3d_anim_Animation_getIFrame(h3d__anim__Animation);
void h3d_anim_Animation_unbind(h3d__anim__Animation,String);
void h3d_anim_Animation_setEvents(h3d__anim__Animation,vdynamic*);
void h3d_anim_Animation_addEvent(h3d__anim__Animation,int,String);
void h3d_anim_Animation_setFrame(h3d__anim__Animation,double);
h3d__anim__Animation h3d_anim_Animation_clone(h3d__anim__Animation,h3d__anim__Animation);
void h3d_anim_Animation_initInstance(h3d__anim__Animation);
h3d__anim__Animation h3d_anim_Animation_createInstance(h3d__anim__Animation,h3d__scene__Object);
void h3d_anim_Animation_bind(h3d__anim__Animation,h3d__scene__Object);
vdynamic* h3d_anim_Animation_getPropValue(h3d__anim__Animation,String,String);
void h3d_anim_Animation_sync(h3d__anim__Animation,bool*);
bool h3d_anim_Animation_isPlaying(h3d__anim__Animation);
int h3d_anim_Animation_endFrame(h3d__anim__Animation);
double h3d_anim_Animation_update(h3d__anim__Animation,double);
void h3d_anim_Animation_initAndBind(h3d__anim__Animation,h3d__scene__Object);
String h3d_anim_Animation_toString(h3d__anim__Animation);
vbyte* h3d_anim_Animation___string(h3d__anim__Animation);
void h3d_anim_LinearFrame_new(h3d__anim__LinearFrame);
h3d__Matrix h3d_anim_LinearFrame_toMatrix(h3d__anim__LinearFrame);
void h3d_anim_LinearObject_new(h3d__anim__LinearObject,String);
h3d__anim__AnimatedObject h3d_anim_LinearObject_clone(h3d__anim__LinearObject);
void h3d_anim_LinearAnimation_new(h3d__anim__LinearAnimation,String,int,double);
void h3d_anim_LinearAnimation_addCurve(h3d__anim__LinearAnimation,String,hl__types__ArrayObj,bool,bool);
void h3d_anim_LinearAnimation_addAlphaCurve(h3d__anim__LinearAnimation,String,hl__types__ArrayBytes_Float);
void h3d_anim_LinearAnimation_addUVCurve(h3d__anim__LinearAnimation,String,hl__types__ArrayBytes_Float);
void h3d_anim_LinearAnimation_addPropCurve(h3d__anim__LinearAnimation,String,String,hl__types__ArrayBytes_Float);
vdynamic* h3d_anim_LinearAnimation_getPropValue(h3d__anim__LinearAnimation,String,String);
hl__types__ArrayObj h3d_anim_LinearAnimation_getFrames(h3d__anim__LinearAnimation);
h3d__anim__Animation h3d_anim_LinearAnimation_clone(h3d__anim__LinearAnimation,h3d__anim__Animation);
int h3d_anim_LinearAnimation_endFrame(h3d__anim__LinearAnimation);
int fun$2571(vclosure*,vdynamic*,vdynamic*);
void h3d_anim_LinearAnimation_initInstance(h3d__anim__LinearAnimation);
int h3d_anim_LinearAnimation_sortByFrameCountDesc(h3d__anim__LinearAnimation,h3d__anim__LinearObject,h3d__anim__LinearObject);
double h3d_anim_LinearAnimation_uvLerp(h3d__anim__LinearAnimation,double,double,double);
void h3d_anim_LinearAnimation_sync(h3d__anim__LinearAnimation,bool*);
void h3d_anim_Joint_new(h3d__anim__Joint);
void h3d_anim__Skin_Permut_new(h3d__anim___Skin__Permut);
void h3d_anim__Skin_Influence_new(h3d__anim___Skin__Influence,h3d__anim__Joint,double);
void h3d_anim_Skin_new(h3d__anim__Skin,String,int,int);
void h3d_anim_Skin_setJoints(h3d__anim__Skin,hl__types__ArrayObj,hl__types__ArrayObj);
void h3d_anim_Skin_addInfluence(h3d__anim__Skin,int,h3d__anim__Joint,double);
int h3d_anim_Skin_sortInfluences(h3d__anim__Skin,h3d__anim___Skin__Influence,h3d__anim___Skin__Influence);
bool h3d_anim_Skin_isSplit(h3d__anim__Skin);
int fun$2583(vclosure*,vdynamic*,vdynamic*);
void h3d_anim_Skin_initWeights(h3d__anim__Skin);
int h3d_anim_Skin_sortByBindIndex(h3d__anim__Skin,h3d__anim__Joint,h3d__anim__Joint);
bool h3d_anim_Skin_isSub(h3d__anim__Skin,hl__types__ArrayObj,hl__types__ArrayObj);
bool h3d_anim_Skin_merge(h3d__anim__Skin,hl__types__ArrayObj);
int h3d_anim_Skin_jointsDiff(h3d__anim__Skin,h3d__anim___Skin__Permut,h3d__anim___Skin__Permut);
int fun$2584(vclosure*,vdynamic*,vdynamic*);
int fun$2585(vvirtual*,vvirtual*);
int fun$2586(vclosure*,vdynamic*,vdynamic*);
bool h3d_anim_Skin_split(h3d__anim__Skin,int,hl__types__ArrayBytes_Int,hl__types__ArrayBytes_Int);
h3d__col__Bounds h3d_col_Bounds_fromPoints(h3d__col__Point,h3d__col__Point);
h3d__col__Bounds h3d_col_Bounds_fromValues(double,double,double,double,double,double);
void h3d_col_Bounds_new(h3d__col__Bounds);
bool h3d_col_Bounds_inFrustum(h3d__col__Bounds,h3d__Matrix);
double h3d_col_Bounds_testPlane(h3d__col__Bounds,h3d__col__Plane);
double h3d_col_Bounds_rayIntersection(h3d__col__Bounds,h3d__col__Ray,bool);
int h3d_col_Bounds_inFrustumDetails(h3d__col__Bounds,h3d__Matrix,bool*);
void h3d_col_Bounds_transform3x3(h3d__col__Bounds,h3d__Matrix);
void h3d_col_Bounds_transform(h3d__col__Bounds,h3d__Matrix);
bool h3d_col_Bounds_collide(h3d__col__Bounds,h3d__col__Bounds);
bool h3d_col_Bounds_contains(h3d__col__Bounds,h3d__col__Point);
void h3d_col_Bounds_add(h3d__col__Bounds,h3d__col__Bounds);
void h3d_col_Bounds_addPoint(h3d__col__Bounds,h3d__col__Point);
void h3d_col_Bounds_addPos(h3d__col__Bounds,double,double,double);
void h3d_col_Bounds_intersection(h3d__col__Bounds,h3d__col__Bounds,h3d__col__Bounds);
void h3d_col_Bounds_offset(h3d__col__Bounds,double,double,double);
void h3d_col_Bounds_setMin(h3d__col__Bounds,h3d__col__Point);
void h3d_col_Bounds_setMax(h3d__col__Bounds,h3d__col__Point);
void h3d_col_Bounds_load(h3d__col__Bounds,h3d__col__Bounds);
void h3d_col_Bounds_scalePivot(h3d__col__Bounds,double);
void h3d_col_Bounds_scaleCenter(h3d__col__Bounds,double);
h3d__col__Point h3d_col_Bounds_getMin(h3d__col__Bounds);
h3d__col__Point h3d_col_Bounds_getCenter(h3d__col__Bounds);
h3d__col__Point h3d_col_Bounds_getSize(h3d__col__Bounds);
h3d__col__Point h3d_col_Bounds_getMax(h3d__col__Bounds);
double h3d_col_Bounds_get_xSize(h3d__col__Bounds);
double h3d_col_Bounds_get_ySize(h3d__col__Bounds);
double h3d_col_Bounds_get_zSize(h3d__col__Bounds);
double h3d_col_Bounds_set_xSize(h3d__col__Bounds,double);
double h3d_col_Bounds_set_ySize(h3d__col__Bounds,double);
double h3d_col_Bounds_set_zSize(h3d__col__Bounds,double);
bool h3d_col_Bounds_isEmpty(h3d__col__Bounds);
void h3d_col_Bounds_empty(h3d__col__Bounds);
void h3d_col_Bounds_all(h3d__col__Bounds);
h3d__col__Bounds h3d_col_Bounds_clone(h3d__col__Bounds);
String h3d_col_Bounds_toString(h3d__col__Bounds);
vbyte* h3d_col_Bounds___string(h3d__col__Bounds);
h3d__col__Sphere h3d_col_Bounds_toSphere(h3d__col__Bounds);
void h3d_col_OptimizedCollider_new(h3d__col__OptimizedCollider,vvirtual*,vvirtual*);
double h3d_col_OptimizedCollider_rayIntersection(h3d__col__OptimizedCollider,h3d__col__Ray,bool);
bool h3d_col_OptimizedCollider_contains(h3d__col__OptimizedCollider,h3d__col__Point);
bool h3d_col_OptimizedCollider_inFrustum(h3d__col__OptimizedCollider,h3d__Matrix);
void h3d_col_GroupCollider_new(h3d__col__GroupCollider,hl__types__ArrayObj);
double h3d_col_GroupCollider_rayIntersection(h3d__col__GroupCollider,h3d__col__Ray,bool);
bool h3d_col_GroupCollider_contains(h3d__col__GroupCollider,h3d__col__Point);
bool h3d_col_GroupCollider_inFrustum(h3d__col__GroupCollider,h3d__Matrix);
void h3d_col_FPoint_new(h3d__col__FPoint,double*,double*,double*);
h3d__col__FPoint h3d_col_FPoint_sub(h3d__col__FPoint,h3d__col__FPoint);
h3d__col__FPoint h3d_col_FPoint_add(h3d__col__FPoint,h3d__col__FPoint);
h3d__col__FPoint h3d_col_FPoint_cross(h3d__col__FPoint,h3d__col__FPoint);
float h3d_col_FPoint_dot(h3d__col__FPoint,h3d__col__FPoint);
String h3d_col_FPoint_toString(h3d__col__FPoint);
vbyte* h3d_col_FPoint___string(h3d__col__FPoint);
void h3d_col_Frustum_new(h3d__col__Frustum,h3d__Matrix);
void h3d_col_Frustum_transform(h3d__col__Frustum,h3d__Matrix);
void h3d_col_Frustum_transform3x3(h3d__col__Frustum,h3d__Matrix);
bool h3d_col_Frustum_hasSphere(h3d__col__Frustum,h3d__col__Sphere);
bool h3d_col_Frustum_hasBounds(h3d__col__Frustum,h3d__col__Bounds);
void h3d_col_ObjectCollider_new(h3d__col__ObjectCollider,h3d__scene__Object,vvirtual*);
double h3d_col_ObjectCollider_rayIntersection(h3d__col__ObjectCollider,h3d__col__Ray,bool);
bool h3d_col_ObjectCollider_contains(h3d__col__ObjectCollider,h3d__col__Point);
bool h3d_col_ObjectCollider_inFrustum(h3d__col__ObjectCollider,h3d__Matrix);
h3d__col__Plane h3d_col_Plane_fromPoints(h3d__col__Point,h3d__col__Point,h3d__col__Point);
h3d__col__Plane h3d_col_Plane_fromNormalPoint(h3d__col__Point,h3d__col__Point);
h3d__col__Plane h3d_col_Plane_X(double);
h3d__col__Plane h3d_col_Plane_Y(double);
h3d__col__Plane h3d_col_Plane_Z(double);
h3d__col__Plane h3d_col_Plane_frustumLeft(h3d__Matrix);
h3d__col__Plane h3d_col_Plane_frustumRight(h3d__Matrix);
h3d__col__Plane h3d_col_Plane_frustumBottom(h3d__Matrix);
h3d__col__Plane h3d_col_Plane_frustumTop(h3d__Matrix);
h3d__col__Plane h3d_col_Plane_frustumNear(h3d__Matrix);
h3d__col__Plane h3d_col_Plane_frustumFar(h3d__Matrix);
void h3d_col_Plane_new(h3d__col__Plane,double,double,double,double);
h3d__col__Point h3d_col_Plane_getNormal(h3d__col__Plane);
double h3d_col_Plane_getNormalDistance(h3d__col__Plane);
void h3d_col_Plane_transform(h3d__col__Plane,h3d__Matrix);
void h3d_col_Plane_transform3x3(h3d__col__Plane,h3d__Matrix);
void h3d_col_Plane_transformInverseTranspose(h3d__col__Plane,h3d__Matrix);
void h3d_col_Plane_normalize(h3d__col__Plane);
String h3d_col_Plane_toString(h3d__col__Plane);
vbyte* h3d_col_Plane___string(h3d__col__Plane);
double h3d_col_Plane_distance(h3d__col__Plane,h3d__col__Point);
bool h3d_col_Plane_side(h3d__col__Plane,h3d__col__Point);
h3d__col__Point h3d_col_Plane_project(h3d__col__Plane,h3d__col__Point);
void h3d_col_Plane_projectTo(h3d__col__Plane,h3d__col__Point,h3d__col__Point);
void h3d_col_Point_new(h3d__col__Point,double*,double*,double*);
void h3d_col_Point_scale(h3d__col__Point,double);
bool h3d_col_Point_inFrustum(h3d__col__Point,h3d__Matrix);
void h3d_col_Point_set(h3d__col__Point,double,double,double);
h3d__col__Point h3d_col_Point_sub(h3d__col__Point,h3d__col__Point);
h3d__col__Point h3d_col_Point_add(h3d__col__Point,h3d__col__Point);
h3d__col__Point h3d_col_Point_cross(h3d__col__Point,h3d__col__Point);
double h3d_col_Point_lengthSq(h3d__col__Point);
void h3d_col_Point_setLength(h3d__col__Point,double);
double h3d_col_Point_length(h3d__col__Point);
double h3d_col_Point_dot(h3d__col__Point,h3d__col__Point);
double h3d_col_Point_distanceSq(h3d__col__Point,h3d__col__Point);
double h3d_col_Point_distance(h3d__col__Point,h3d__col__Point);
void h3d_col_Point_normalize(h3d__col__Point);
void h3d_col_Point_normalizeFast(h3d__col__Point);
void h3d_col_Point_transform(h3d__col__Point,h3d__Matrix);
void h3d_col_Point_transform3x3(h3d__col__Point,h3d__Matrix);
h3d__Vector h3d_col_Point_toVector(h3d__col__Point);
h3d__col__Point h3d_col_Point_clone(h3d__col__Point);
void h3d_col_Point_load(h3d__col__Point,h3d__col__Point);
String h3d_col_Point_toString(h3d__col__Point);
vbyte* h3d_col_Point___string(h3d__col__Point);
void h3d_col_TriPlane_new(h3d__col__TriPlane);
void h3d_col_TriPlane_init(h3d__col__TriPlane,h3d__col__Point,h3d__col__Point,h3d__col__Point);
h3d__col__TriPlane h3d_col_TriPlane_clone(h3d__col__TriPlane);
void h3d_col_TriPlane_load(h3d__col__TriPlane,h3d__col__TriPlane);
void h3d_col_TriPlane_transform(h3d__col__TriPlane,h3d__Matrix);
bool h3d_col_TriPlane_contains(h3d__col__TriPlane,h3d__col__Point);
bool h3d_col_TriPlane_side(h3d__col__TriPlane,h3d__col__Point);
bool h3d_col_TriPlane_inFrustum(h3d__col__TriPlane,h3d__Matrix);
double h3d_col_TriPlane_rayIntersection(h3d__col__TriPlane,h3d__col__Ray,bool);
bool h3d_col_TriPlane_isPointInTriangle(h3d__col__TriPlane,double,double,double);
hl__types__ArrayObj h3d_col_TriPlane_getPoints(h3d__col__TriPlane);
void h3d_col_Polygon_new(h3d__col__Polygon);
void h3d_col_Polygon_addBuffers(h3d__col__Polygon,hl__types__ArrayBytes_Single,hl__types__ArrayBytes_hl_UI16,int*);
bool h3d_col_Polygon_isConvex(h3d__col__Polygon);
h3d__col__Polygon h3d_col_Polygon_clone(h3d__col__Polygon);
void h3d_col_Polygon_transform(h3d__col__Polygon,h3d__Matrix);
hl__types__ArrayObj h3d_col_Polygon_getPoints(h3d__col__Polygon);
bool h3d_col_Polygon_contains(h3d__col__Polygon,h3d__col__Point);
double h3d_col_Polygon_rayIntersection(h3d__col__Polygon,h3d__col__Ray,bool);
bool h3d_col_Polygon_inFrustum(h3d__col__Polygon,h3d__Matrix);
void h3d_col_PolygonBuffer_new(h3d__col__PolygonBuffer);
void h3d_col_PolygonBuffer_setData(h3d__col__PolygonBuffer,hl__types__ArrayBytes_Single,hl__types__ArrayBytes_hl_UI16,int*,int*);
bool h3d_col_PolygonBuffer_contains(h3d__col__PolygonBuffer,h3d__col__Point);
bool h3d_col_PolygonBuffer_inFrustum(h3d__col__PolygonBuffer,h3d__Matrix);
double h3d_col_PolygonBuffer_rayIntersection(h3d__col__PolygonBuffer,h3d__col__Ray,bool);
h3d__col__Ray h3d_col_Ray_fromPoints(h3d__col__Point,h3d__col__Point);
h3d__col__Ray h3d_col_Ray_fromValues(double,double,double,double,double,double);
void h3d_col_Ray_new(h3d__col__Ray);
h3d__col__Ray h3d_col_Ray_clone(h3d__col__Ray);
void h3d_col_Ray_load(h3d__col__Ray,h3d__col__Ray);
void h3d_col_Ray_normalize(h3d__col__Ray);
void h3d_col_Ray_transform(h3d__col__Ray,h3d__Matrix);
h3d__col__Point h3d_col_Ray_getPos(h3d__col__Ray);
h3d__col__Point h3d_col_Ray_getDir(h3d__col__Ray);
h3d__col__Point h3d_col_Ray_getPoint(h3d__col__Ray,double);
String h3d_col_Ray_toString(h3d__col__Ray);
vbyte* h3d_col_Ray___string(h3d__col__Ray);
h3d__col__Point h3d_col_Ray_intersect(h3d__col__Ray,h3d__col__Plane);
bool h3d_col_Ray_collideFrustum(h3d__col__Ray,h3d__Matrix);
bool h3d_col_Ray_collide(h3d__col__Ray,h3d__col__Bounds);
void h3d_col_SkinCollider_new(h3d__col__SkinCollider,h3d__scene__Skin,h3d__col__PolygonBuffer);
bool h3d_col_SkinCollider_contains(h3d__col__SkinCollider,h3d__col__Point);
bool h3d_col_SkinCollider_inFrustum(h3d__col__SkinCollider,h3d__Matrix);
double h3d_col_SkinCollider_rayIntersection(h3d__col__SkinCollider,h3d__col__Ray,bool);
void h3d_col_SkinCollider_applyTransform(h3d__col__SkinCollider);
void h3d_col_Sphere_new(h3d__col__Sphere,double*,double*,double*,double*);
h3d__col__Point h3d_col_Sphere_getCenter(h3d__col__Sphere);
bool h3d_col_Sphere_contains(h3d__col__Sphere,h3d__col__Point);
double h3d_col_Sphere_rayIntersection(h3d__col__Sphere,h3d__col__Ray,bool);
bool h3d_col_Sphere_inFrustum(h3d__col__Sphere,h3d__Matrix);
String h3d_col_Sphere_toString(h3d__col__Sphere);
vbyte* h3d_col_Sphere___string(h3d__col__Sphere);
void h3d_impl__DirectXDriver_ShaderContext_new(h3d__impl___DirectXDriver__ShaderContext,dx_pointer*);
void h3d_impl__DirectXDriver_CompiledShader_new(h3d__impl___DirectXDriver__CompiledShader);
void h3d_impl_PipelineState_new(h3d__impl__PipelineState,venum*);
bool h3d_impl_Driver_hasFeature(h3d__impl__Driver,venum*);
void h3d_impl_Driver_setRenderFlag(h3d__impl__Driver,venum*,int);
bool h3d_impl_Driver_isSupportedFormat(h3d__impl__Driver,venum*);
bool h3d_impl_Driver_isDisposed(h3d__impl__Driver);
void h3d_impl_Driver_dispose(h3d__impl__Driver);
void h3d_impl_Driver_begin(h3d__impl__Driver,int);
void h3d_impl_Driver_log(h3d__impl__Driver,String);
void h3d_impl_Driver_generateMipMaps(h3d__impl__Driver,h3d__mat__Texture);
String h3d_impl_Driver_getNativeShaderCode(h3d__impl__Driver,hxsl__RuntimeShader);
void h3d_impl_Driver_logImpl(h3d__impl__Driver,String);
void h3d_impl_Driver_clear(h3d__impl__Driver,h3d__Vector,vdynamic*,vdynamic*);
void h3d_impl_Driver_captureRenderBuffer(h3d__impl__Driver,hxd__Pixels);
hxd__Pixels h3d_impl_Driver_capturePixels(h3d__impl__Driver,h3d__mat__Texture,int,int);
String h3d_impl_Driver_getDriverName(h3d__impl__Driver,bool);
void h3d_impl_Driver_init(h3d__impl__Driver,vclosure*,bool*);
void h3d_impl_Driver_resize(h3d__impl__Driver,int,int);
bool h3d_impl_Driver_selectShader(h3d__impl__Driver,hxsl__RuntimeShader);
void h3d_impl_Driver_selectMaterial(h3d__impl__Driver,h3d__mat__Pass);
void h3d_impl_Driver_uploadShaderBuffers(h3d__impl__Driver,h3d__shader__Buffers,int);
hl__types__ArrayObj h3d_impl_Driver_getShaderInputNames(h3d__impl__Driver);
void h3d_impl_Driver_selectBuffer(h3d__impl__Driver,h3d__Buffer);
void h3d_impl_Driver_selectMultiBuffers(h3d__impl__Driver,h3d__BufferOffset);
void h3d_impl_Driver_draw(h3d__impl__Driver,vvirtual*,int,int);
void h3d_impl_Driver_drawInstanced(h3d__impl__Driver,vvirtual*,h3d__impl__InstanceBuffer);
void h3d_impl_Driver_setRenderZone(h3d__impl__Driver,int,int,int,int);
void h3d_impl_Driver_setRenderTarget(h3d__impl__Driver,h3d__mat__Texture,int*,int*);
void h3d_impl_Driver_setRenderTargets(h3d__impl__Driver,hl__types__ArrayObj);
vvirtual* h3d_impl_Driver_allocDepthBuffer(h3d__impl__Driver,h3d__mat__DepthBuffer);
void h3d_impl_Driver_disposeDepthBuffer(h3d__impl__Driver,h3d__mat__DepthBuffer);
h3d__mat__DepthBuffer h3d_impl_Driver_getDefaultDepthBuffer(h3d__impl__Driver);
void h3d_impl_Driver_present(h3d__impl__Driver);
void h3d_impl_Driver_end(h3d__impl__Driver);
void h3d_impl_Driver_setDebug(h3d__impl__Driver,bool);
vvirtual* h3d_impl_Driver_allocTexture(h3d__impl__Driver,h3d__mat__Texture);
vvirtual* h3d_impl_Driver_allocIndexes(h3d__impl__Driver,int,bool);
vvirtual* h3d_impl_Driver_allocVertexes(h3d__impl__Driver,h3d__impl__ManagedBuffer);
void h3d_impl_Driver_allocInstanceBuffer(h3d__impl__Driver,h3d__impl__InstanceBuffer,haxe__io__Bytes);
void h3d_impl_Driver_disposeTexture(h3d__impl__Driver,h3d__mat__Texture);
void h3d_impl_Driver_disposeIndexes(h3d__impl__Driver,vvirtual*);
void h3d_impl_Driver_disposeVertexes(h3d__impl__Driver,vvirtual*);
void h3d_impl_Driver_disposeInstanceBuffer(h3d__impl__Driver,h3d__impl__InstanceBuffer);
void h3d_impl_Driver_uploadIndexBuffer(h3d__impl__Driver,vvirtual*,int,int,hl__types__ArrayBytes_hl_UI16,int);
void h3d_impl_Driver_uploadIndexBytes(h3d__impl__Driver,vvirtual*,int,int,haxe__io__Bytes,int);
void h3d_impl_Driver_uploadVertexBuffer(h3d__impl__Driver,vvirtual*,int,int,hl__types__ArrayBytes_Single,int);
void h3d_impl_Driver_uploadVertexBytes(h3d__impl__Driver,vvirtual*,int,int,haxe__io__Bytes,int);
void h3d_impl_Driver_uploadTextureBitmap(h3d__impl__Driver,h3d__mat__Texture,hxd__BitmapData,int,int);
void h3d_impl_Driver_uploadTexturePixels(h3d__impl__Driver,h3d__mat__Texture,hxd__Pixels,int,int);
void h3d_impl_Driver_readVertexBytes(h3d__impl__Driver,vvirtual*,int,int,haxe__io__Bytes,int);
void h3d_impl_Driver_readIndexBytes(h3d__impl__Driver,vvirtual*,int,int,haxe__io__Bytes,int);
bool h3d_impl_Driver_copyTexture(h3d__impl__Driver,h3d__mat__Texture,h3d__mat__Texture);
vdynamic* h3d_impl_Driver_allocQuery(h3d__impl__Driver,venum*);
void h3d_impl_Driver_deleteQuery(h3d__impl__Driver,vdynamic*);
void h3d_impl_Driver_beginQuery(h3d__impl__Driver,vdynamic*);
void h3d_impl_Driver_endQuery(h3d__impl__Driver,vdynamic*);
bool h3d_impl_Driver_queryResultAvailable(h3d__impl__Driver,vdynamic*);
double h3d_impl_Driver_queryResult(h3d__impl__Driver,vdynamic*);
void h3d_impl_DirectXDriver_new(h3d__impl__DirectXDriver);
void h3d_impl_DirectXDriver_reset(h3d__impl__DirectXDriver);
void h3d_impl_DirectXDriver_dispose(h3d__impl__DirectXDriver);
void h3d_impl_DirectXDriver_onDXError(h3d__impl__DirectXDriver,int,int,int);
void h3d_impl_DirectXDriver_resize(h3d__impl__DirectXDriver,int,int);
void h3d_impl_DirectXDriver_begin(h3d__impl__DirectXDriver,int);
bool h3d_impl_DirectXDriver_isDisposed(h3d__impl__DirectXDriver);
void fun$2644(vclosure*);
void fun$2645(vclosure*);
void h3d_impl_DirectXDriver_init(h3d__impl__DirectXDriver,vclosure*,bool*);
void h3d_impl_DirectXDriver_clear(h3d__impl__DirectXDriver,h3d__Vector,vdynamic*,vdynamic*);
String h3d_impl_DirectXDriver_getDriverName(h3d__impl__DirectXDriver,bool);
void h3d_impl_DirectXDriver_forceDeviceError(h3d__impl__DirectXDriver);
void h3d_impl_DirectXDriver_present(h3d__impl__DirectXDriver);
h3d__mat__DepthBuffer h3d_impl_DirectXDriver_getDefaultDepthBuffer(h3d__impl__DirectXDriver);
vvirtual* h3d_impl_DirectXDriver_allocVertexes(h3d__impl__DirectXDriver,h3d__impl__ManagedBuffer);
vvirtual* h3d_impl_DirectXDriver_allocIndexes(h3d__impl__DirectXDriver,int,bool);
vvirtual* h3d_impl_DirectXDriver_allocDepthBuffer(h3d__impl__DirectXDriver,h3d__mat__DepthBuffer);
void h3d_impl_DirectXDriver_disposeDepthBuffer(h3d__impl__DirectXDriver,h3d__mat__DepthBuffer);
void h3d_impl_DirectXDriver_captureRenderBuffer(h3d__impl__DirectXDriver,hxd__Pixels);
bool h3d_impl_DirectXDriver_isSupportedFormat(h3d__impl__DirectXDriver,venum*);
int h3d_impl_DirectXDriver_getTextureFormat(h3d__impl__DirectXDriver,h3d__mat__Texture);
vvirtual* h3d_impl_DirectXDriver_allocTexture(h3d__impl__DirectXDriver,h3d__mat__Texture);
void h3d_impl_DirectXDriver_disposeTexture(h3d__impl__DirectXDriver,h3d__mat__Texture);
void h3d_impl_DirectXDriver_disposeVertexes(h3d__impl__DirectXDriver,vvirtual*);
void h3d_impl_DirectXDriver_disposeIndexes(h3d__impl__DirectXDriver,vvirtual*);
void h3d_impl_DirectXDriver_generateMipMaps(h3d__impl__DirectXDriver,h3d__mat__Texture);
void h3d_impl_DirectXDriver_updateBuffer(h3d__impl__DirectXDriver,dx_resource*,vbyte*,int,int);
void h3d_impl_DirectXDriver_uploadIndexBuffer(h3d__impl__DirectXDriver,vvirtual*,int,int,hl__types__ArrayBytes_hl_UI16,int);
void h3d_impl_DirectXDriver_uploadIndexBytes(h3d__impl__DirectXDriver,vvirtual*,int,int,haxe__io__Bytes,int);
void h3d_impl_DirectXDriver_uploadVertexBuffer(h3d__impl__DirectXDriver,vvirtual*,int,int,hl__types__ArrayBytes_Single,int);
void h3d_impl_DirectXDriver_uploadVertexBytes(h3d__impl__DirectXDriver,vvirtual*,int,int,haxe__io__Bytes,int);
void h3d_impl_DirectXDriver_readIndexBytes(h3d__impl__DirectXDriver,vvirtual*,int,int,haxe__io__Bytes,int);
void h3d_impl_DirectXDriver_readVertexBytes(h3d__impl__DirectXDriver,vvirtual*,int,int,haxe__io__Bytes,int);
hxd__Pixels h3d_impl_DirectXDriver_capturePixels(h3d__impl__DirectXDriver,h3d__mat__Texture,int,int);
hxd__Pixels h3d_impl_DirectXDriver_captureTexPixels(h3d__impl__DirectXDriver,hxd__Pixels,h3d__mat__Texture,int,int);
void h3d_impl_DirectXDriver_uploadTextureBitmap(h3d__impl__DirectXDriver,h3d__mat__Texture,hxd__BitmapData,int,int);
void h3d_impl_DirectXDriver_uploadTexturePixels(h3d__impl__DirectXDriver,h3d__mat__Texture,hxd__Pixels,int,int);
void h3d_impl_DirectXDriver_selectMaterial(h3d__impl__DirectXDriver,h3d__mat__Pass);
haxe__io__Bytes h3d_impl_DirectXDriver_getBinaryPayload(h3d__impl__DirectXDriver,String);
String h3d_impl_DirectXDriver_addBinaryPayload(h3d__impl__DirectXDriver,haxe__io__Bytes);
String fun$2685(hxsl__RuntimeShaderData,EReg);
vvirtual* h3d_impl_DirectXDriver_compileShader(h3d__impl__DirectXDriver,hxsl__RuntimeShaderData,bool*);
String h3d_impl_DirectXDriver_getNativeShaderCode(h3d__impl__DirectXDriver,hxsl__RuntimeShader);
bool h3d_impl_DirectXDriver_hasFeature(h3d__impl__DirectXDriver,venum*);
bool h3d_impl_DirectXDriver_copyTexture(h3d__impl__DirectXDriver,h3d__mat__Texture,h3d__mat__Texture);
void h3d_impl_DirectXDriver_setRenderTarget(h3d__impl__DirectXDriver,h3d__mat__Texture,int*,int*);
void h3d_impl_DirectXDriver_unbind(h3d__impl__DirectXDriver,dx_pointer*);
void h3d_impl_DirectXDriver_setRenderTargets(h3d__impl__DirectXDriver,hl__types__ArrayObj);
void h3d_impl_DirectXDriver__setRenderTargets(h3d__impl__DirectXDriver,hl__types__ArrayObj,int,int);
void h3d_impl_DirectXDriver_setRenderZone(h3d__impl__DirectXDriver,int,int,int,int);
bool h3d_impl_DirectXDriver_selectShader(h3d__impl__DirectXDriver,hxsl__RuntimeShader);
hl__types__ArrayObj h3d_impl_DirectXDriver_getShaderInputNames(h3d__impl__DirectXDriver);
void h3d_impl_DirectXDriver_selectBuffer(h3d__impl__DirectXDriver,h3d__Buffer);
void h3d_impl_DirectXDriver_selectMultiBuffers(h3d__impl__DirectXDriver,h3d__BufferOffset);
void h3d_impl_DirectXDriver_uploadShaderBuffers(h3d__impl__DirectXDriver,h3d__shader__Buffers,int);
void h3d_impl_DirectXDriver_uploadShaderBuffer(h3d__impl__DirectXDriver,dx_resource*,hl__types__ArrayBytes_Single,int,vbyte*);
void h3d_impl_DirectXDriver_uploadBuffers(h3d__impl__DirectXDriver,h3d__impl__PipelineState,h3d__impl___DirectXDriver__ShaderContext,h3d__shader__ShaderBuffers,int);
void h3d_impl_DirectXDriver_draw(h3d__impl__DirectXDriver,vvirtual*,int,int);
void h3d_impl_DirectXDriver_allocInstanceBuffer(h3d__impl__DirectXDriver,h3d__impl__InstanceBuffer,haxe__io__Bytes);
void h3d_impl_DirectXDriver_disposeInstanceBuffer(h3d__impl__DirectXDriver,h3d__impl__InstanceBuffer);
void h3d_impl_DirectXDriver_drawInstanced(h3d__impl__DirectXDriver,vvirtual*,h3d__impl__InstanceBuffer);
void h3d_impl_InstanceBuffer_new(h3d__impl__InstanceBuffer,int,haxe__io__Bytes);
void h3d_impl_InstanceBuffer_dispose(h3d__impl__InstanceBuffer);
void h3d_impl__ManagedBuffer_FreeCell_new(h3d__impl___ManagedBuffer__FreeCell,int,int,h3d__impl___ManagedBuffer__FreeCell);
void h3d_impl_ManagedBuffer_new(h3d__impl__ManagedBuffer,int,int,hl__types__ArrayObj);
void h3d_impl_ManagedBuffer_uploadVertexBuffer(h3d__impl__ManagedBuffer,int,int,hl__types__ArrayBytes_Single,int*);
void h3d_impl_ManagedBuffer_uploadVertexBytes(h3d__impl__ManagedBuffer,int,int,haxe__io__Bytes,int*);
void h3d_impl_ManagedBuffer_readVertexBytes(h3d__impl__ManagedBuffer,int,int,haxe__io__Bytes,int*);
h3d__Buffer h3d_impl_ManagedBuffer_alloc(h3d__impl__ManagedBuffer,int,int);
int h3d_impl_ManagedBuffer_getFreeVertices(h3d__impl__ManagedBuffer);
int h3d_impl_ManagedBuffer_allocPosition(h3d__impl__ManagedBuffer,int,int);
bool h3d_impl_ManagedBuffer_allocBuffer(h3d__impl__ManagedBuffer,h3d__Buffer);
void h3d_impl_ManagedBuffer_freeBuffer(h3d__impl__ManagedBuffer,h3d__Buffer);
void h3d_impl_ManagedBuffer_dispose(h3d__impl__ManagedBuffer);
bool h3d_impl_ManagedBuffer_isDisposed(h3d__impl__ManagedBuffer);
void h3d_impl_MemoryManager_new(h3d__impl__MemoryManager,h3d__impl__Driver);
void h3d_impl_MemoryManager_init(h3d__impl__MemoryManager);
void h3d_impl_MemoryManager_initIndexes(h3d__impl__MemoryManager);
void h3d_impl_MemoryManager_garbage(h3d__impl__MemoryManager);
void h3d_impl_MemoryManager_cleanManagedBuffers(h3d__impl__MemoryManager);
void h3d_impl_MemoryManager_allocManaged(h3d__impl__MemoryManager,h3d__impl__ManagedBuffer);
void h3d_impl_MemoryManager_freeManaged(h3d__impl__MemoryManager,h3d__impl__ManagedBuffer);
void h3d_impl_MemoryManager_allocBuffer(h3d__impl__MemoryManager,h3d__Buffer,int);
void h3d_impl_MemoryManager_deleteIndexes(h3d__impl__MemoryManager,h3d__Indexes);
void h3d_impl_MemoryManager_allocIndexes(h3d__impl__MemoryManager,h3d__Indexes);
int h3d_impl_MemoryManager_bpp(h3d__impl__MemoryManager,h3d__mat__Texture);
int fun$2691(vclosure*,vdynamic*,vdynamic*);
bool h3d_impl_MemoryManager_cleanTextures(h3d__impl__MemoryManager,bool*);
int h3d_impl_MemoryManager_sortByLRU(h3d__impl__MemoryManager,h3d__mat__Texture,h3d__mat__Texture);
void h3d_impl_MemoryManager_deleteTexture(h3d__impl__MemoryManager,h3d__mat__Texture);
void h3d_impl_MemoryManager_allocTexture(h3d__impl__MemoryManager,h3d__mat__Texture);
void h3d_impl_MemoryManager_allocDepth(h3d__impl__MemoryManager,h3d__mat__DepthBuffer);
void h3d_impl_MemoryManager_deleteDepth(h3d__impl__MemoryManager,h3d__mat__DepthBuffer);
void h3d_impl_MemoryManager_onContextLost(h3d__impl__MemoryManager);
void h3d_impl_MemoryManager_dispose(h3d__impl__MemoryManager);
int h3d_impl_MemoryManager_freeMemorySize(h3d__impl__MemoryManager);
vvirtual* h3d_impl_MemoryManager_stats(h3d__impl__MemoryManager);
hl__types__ArrayObj h3d_impl_MemoryManager_allocStats(h3d__impl__MemoryManager);
void h3d_impl_TextureCache_new(h3d__impl__TextureCache,h3d__impl__RenderContext);
h3d__mat__Texture h3d_impl_TextureCache_get(h3d__impl__TextureCache,int*);
h3d__mat__Texture h3d_impl_TextureCache_getNamed(h3d__impl__TextureCache,String);
void h3d_impl_TextureCache_set(h3d__impl__TextureCache,h3d__mat__Texture,int);
void h3d_impl_TextureCache_begin(h3d__impl__TextureCache);
h3d__mat__Texture h3d_impl_TextureCache_allocTarget(h3d__impl__TextureCache,String,int,int,bool*,venum*,hl__types__ArrayObj);
h3d__mat__Texture h3d_impl_TextureCache_allocTargetScale(h3d__impl__TextureCache,String,double,bool*,venum*);
void h3d_impl_TextureCache_dispose(h3d__impl__TextureCache);
vdynamic* hxd_impl_AnyProps_set_props(hxd__impl__AnyProps,vdynamic*);
void hxd_impl_AnyProps_setDefaultProps(hxd__impl__AnyProps,String);
vdynamic* hxd_impl_AnyProps_getDefaultProps(hxd__impl__AnyProps,String);
void hxd_impl_AnyProps_refreshProps(hxd__impl__AnyProps);
void h3d_mat_BaseMaterial_new(h3d__mat__BaseMaterial,hxsl__Shader);
h3d__mat__Pass h3d_mat_BaseMaterial_addPass(h3d__mat__BaseMaterial,h3d__mat__Pass);
bool h3d_mat_BaseMaterial_removePass(h3d__mat__BaseMaterial,h3d__mat__Pass);
h3d__mat__Pass h3d_mat_BaseMaterial_get_mainPass(h3d__mat__BaseMaterial);
vdynamic* h3d_mat_BaseMaterial_getPasses(h3d__mat__BaseMaterial);
h3d__mat__Pass h3d_mat_BaseMaterial_getPass(h3d__mat__BaseMaterial,String);
h3d__mat__Pass h3d_mat_BaseMaterial_allocPass(h3d__mat__BaseMaterial,String,vdynamic*);
h3d__mat__BaseMaterial h3d_mat_BaseMaterial_clone(h3d__mat__BaseMaterial,h3d__mat__BaseMaterial);
hxsl__Shader h3d_mat_Defaults_get_shadowShader(void);
hxsl__Shader h3d_mat_Defaults_set_shadowShader(hxsl__Shader);
hxsl__Shader h3d_mat_Defaults_makeVolumeDecal(h3d__col__Bounds);
h3d__mat__DepthBuffer h3d_mat_DepthBuffer_getDefault(void);
void h3d_mat_DepthBuffer_new(h3d__mat__DepthBuffer,int,int,venum*);
bool h3d_mat_DepthBuffer_hasStencil(h3d__mat__DepthBuffer);
void h3d_mat_DepthBuffer_alloc(h3d__mat__DepthBuffer);
void h3d_mat_DepthBuffer_dispose(h3d__mat__DepthBuffer);
bool h3d_mat_DepthBuffer_isDisposed(h3d__mat__DepthBuffer);
h3d__mat__Material h3d_mat_Material_create(h3d__mat__Texture);
void h3d_mat_Material_new(h3d__mat__Material,h3d__mat__Texture);
double h3d_mat_Material_get_specularPower(h3d__mat__Material);
double h3d_mat_Material_set_specularPower(h3d__mat__Material,double);
double h3d_mat_Material_get_specularAmount(h3d__mat__Material);
double h3d_mat_Material_set_specularAmount(h3d__mat__Material,double);
h3d__Vector h3d_mat_Material_get_color(h3d__mat__Material);
h3d__Vector h3d_mat_Material_set_color(h3d__mat__Material,h3d__Vector);
bool h3d_mat_Material_get_shadows(h3d__mat__Material);
bool h3d_mat_Material_set_shadows(h3d__mat__Material,bool);
bool h3d_mat_Material_set_castShadows(h3d__mat__Material,bool);
bool h3d_mat_Material_set_receiveShadows(h3d__mat__Material,bool);
bool h3d_mat_Material_set_staticShadows(h3d__mat__Material,bool);
h3d__mat__BaseMaterial h3d_mat_Material_clone(h3d__mat__Material,h3d__mat__BaseMaterial);
venum* h3d_mat_Material_set_blendMode(h3d__mat__Material,venum*);
h3d__mat__Texture h3d_mat_Material_get_specularTexture(h3d__mat__Material);
h3d__mat__Texture h3d_mat_Material_get_texture(h3d__mat__Material);
h3d__mat__Texture h3d_mat_Material_set_texture(h3d__mat__Material,h3d__mat__Texture);
h3d__mat__Texture h3d_mat_Material_get_normalMap(h3d__mat__Material);
h3d__mat__Texture h3d_mat_Material_set_normalMap(h3d__mat__Material,h3d__mat__Texture);
h3d__mat__Texture h3d_mat_Material_set_specularTexture(h3d__mat__Material,h3d__mat__Texture);
vdynamic* h3d_mat_Material_getDefaultModelProps(h3d__mat__Material);
vdynamic* h3d_mat_Material_getDefaultProps(h3d__mat__Material,String);
void h3d_mat_Material_refreshProps(h3d__mat__Material);
void h3d_mat_MaterialDatabase_new(h3d__mat__MaterialDatabase);
String h3d_mat_MaterialDatabase_getFilePath(h3d__mat__MaterialDatabase,hxd__res__Resource);
vdynamic* h3d_mat_MaterialDatabase_getModelData(h3d__mat__MaterialDatabase,hxd__res__Resource);
void h3d_mat_MaterialDatabase_saveData(h3d__mat__MaterialDatabase,hxd__res__Resource,vdynamic*);
vdynamic* h3d_mat_MaterialDatabase_loadMatProps(h3d__mat__MaterialDatabase,h3d__mat__Material,h3d__mat__MaterialSetup);
void h3d_mat_MaterialDatabase_saveMatProps(h3d__mat__MaterialDatabase,h3d__mat__Material,h3d__mat__MaterialSetup);
void h3d_mat_MaterialSetup_new(h3d__mat__MaterialSetup,String);
h3d__scene__Renderer h3d_mat_MaterialSetup_createRenderer(h3d__mat__MaterialSetup);
h3d__scene__LightSystem h3d_mat_MaterialSetup_createLightSystem(h3d__mat__MaterialSetup);
h3d__mat__Material h3d_mat_MaterialSetup_createMaterial(h3d__mat__MaterialSetup);
vdynamic* h3d_mat_MaterialSetup_getDefaults(h3d__mat__MaterialSetup,String);
vdynamic* h3d_mat_MaterialSetup_loadMaterialProps(h3d__mat__MaterialSetup,h3d__mat__Material);
void h3d_mat_MaterialSetup_saveMaterialProps(h3d__mat__MaterialSetup,h3d__mat__Material);
void h3d_mat_MaterialSetup_customMeshInit(h3d__mat__MaterialSetup,h3d__scene__Mesh);
int h3d_mat_Pass_getCulling(int);
int h3d_mat_Pass_getDepthWrite(int);
int h3d_mat_Pass_getDepthTest(int);
int h3d_mat_Pass_getBlendSrc(int);
int h3d_mat_Pass_getBlendDst(int);
int h3d_mat_Pass_getBlendAlphaSrc(int);
int h3d_mat_Pass_getBlendAlphaDst(int);
int h3d_mat_Pass_getBlendOp(int);
int h3d_mat_Pass_getBlendAlphaOp(int);
int h3d_mat_Pass_getWireframe(int);
int h3d_mat_Pass_getReserved(int);
void h3d_mat_Pass_new(h3d__mat__Pass,String,hxsl__ShaderList,h3d__mat__Pass);
void h3d_mat_Pass_load(h3d__mat__Pass,h3d__mat__Pass);
void h3d_mat_Pass_setPassName(h3d__mat__Pass,String);
void h3d_mat_Pass_blend(h3d__mat__Pass,venum*,venum*);
void h3d_mat_Pass_setBlendMode(h3d__mat__Pass,venum*);
void h3d_mat_Pass_depth(h3d__mat__Pass,bool,venum*);
void h3d_mat_Pass_setColorMask(h3d__mat__Pass,bool,bool,bool,bool);
void h3d_mat_Pass_setColorChannel(h3d__mat__Pass,venum*);
hxsl__Shader h3d_mat_Pass_addShader(h3d__mat__Pass,hxsl__Shader);
hxsl__Shader h3d_mat_Pass_addShaderAtIndex(h3d__mat__Pass,hxsl__Shader,int);
int h3d_mat_Pass_getShaderIndex(h3d__mat__Pass,hxsl__Shader);
bool h3d_mat_Pass_removeShader(h3d__mat__Pass,hxsl__Shader);
hxsl__Shader h3d_mat_Pass_getShader(h3d__mat__Pass,hl__Class);
hxsl__Shader h3d_mat_Pass_getShaderByName(h3d__mat__Pass,String);
hxsl___ShaderList__ShaderIterator h3d_mat_Pass_getShaders(h3d__mat__Pass);
hxsl__ShaderList h3d_mat_Pass_getShadersRec(h3d__mat__Pass);
h3d__mat__Pass h3d_mat_Pass_clone(h3d__mat__Pass);
String fun$2832(vvirtual*);
String h3d_mat_Pass_getDebugShaderCode(h3d__mat__Pass,h3d__scene__Scene,bool*);
venum* h3d_mat_Pass_set_culling(h3d__mat__Pass,venum*);
bool h3d_mat_Pass_set_depthWrite(h3d__mat__Pass,bool);
venum* h3d_mat_Pass_set_depthTest(h3d__mat__Pass,venum*);
venum* h3d_mat_Pass_set_blendSrc(h3d__mat__Pass,venum*);
venum* h3d_mat_Pass_set_blendDst(h3d__mat__Pass,venum*);
venum* h3d_mat_Pass_set_blendAlphaSrc(h3d__mat__Pass,venum*);
venum* h3d_mat_Pass_set_blendAlphaDst(h3d__mat__Pass,venum*);
venum* h3d_mat_Pass_set_blendOp(h3d__mat__Pass,venum*);
venum* h3d_mat_Pass_set_blendAlphaOp(h3d__mat__Pass,venum*);
bool h3d_mat_Pass_set_wireframe(h3d__mat__Pass,bool);
bool h3d_mat_Pass_set_reserved(h3d__mat__Pass,bool);
void h3d_mat_Pass_loadBits(h3d__mat__Pass,int);
int h3d_mat_Stencil_getReadMask(int);
int h3d_mat_Stencil_getWriteMask(int);
int h3d_mat_Stencil_getReference(int);
int h3d_mat_Stencil_getFrontTest(int);
int h3d_mat_Stencil_getFrontPass(int);
int h3d_mat_Stencil_getFrontSTfail(int);
int h3d_mat_Stencil_getFrontDPfail(int);
int h3d_mat_Stencil_getBackTest(int);
int h3d_mat_Stencil_getBackPass(int);
int h3d_mat_Stencil_getBackSTfail(int);
int h3d_mat_Stencil_getBackDPfail(int);
void h3d_mat_Stencil_new(h3d__mat__Stencil);
void h3d_mat_Stencil_setFront(h3d__mat__Stencil,venum*,venum*,venum*);
void h3d_mat_Stencil_setBack(h3d__mat__Stencil,venum*,venum*,venum*);
void h3d_mat_Stencil_setOp(h3d__mat__Stencil,venum*,venum*,venum*);
void h3d_mat_Stencil_setFunc(h3d__mat__Stencil,venum*,int*,int*,int*);
h3d__mat__Stencil h3d_mat_Stencil_clone(h3d__mat__Stencil);
void h3d_mat_Stencil_load(h3d__mat__Stencil,h3d__mat__Stencil);
int h3d_mat_Stencil_set_readMask(h3d__mat__Stencil,int);
int h3d_mat_Stencil_set_writeMask(h3d__mat__Stencil,int);
int h3d_mat_Stencil_set_reference(h3d__mat__Stencil,int);
venum* h3d_mat_Stencil_set_frontTest(h3d__mat__Stencil,venum*);
venum* h3d_mat_Stencil_set_frontPass(h3d__mat__Stencil,venum*);
venum* h3d_mat_Stencil_set_frontSTfail(h3d__mat__Stencil,venum*);
venum* h3d_mat_Stencil_set_frontDPfail(h3d__mat__Stencil,venum*);
venum* h3d_mat_Stencil_set_backTest(h3d__mat__Stencil,venum*);
venum* h3d_mat_Stencil_set_backPass(h3d__mat__Stencil,venum*);
venum* h3d_mat_Stencil_set_backSTfail(h3d__mat__Stencil,venum*);
venum* h3d_mat_Stencil_set_backDPfail(h3d__mat__Stencil,venum*);
void h3d_mat_Stencil_loadOpBits(h3d__mat__Stencil,int);
void h3d_mat_Stencil_loadMaskBits(h3d__mat__Stencil,int);
h3d__mat__Texture h3d_mat_Texture_fromBitmap(hxd__BitmapData,vvirtual*);
h3d__mat__Texture h3d_mat_Texture_fromPixels(hxd__Pixels,vvirtual*);
void fun$2833(venum*);
h3d__mat__Texture h3d_mat_Texture_fromColor(int,vdynamic*,vvirtual*);
void fun$2834(h3d__mat__Texture);
h3d__mat__Texture h3d_mat_Texture_defaultCubeTexture(void);
void fun$2835(venum*);
h3d__mat__Texture h3d_mat_Texture_genChecker(int);
void fun$2836(venum*);
h3d__mat__Texture h3d_mat_Texture_genNoise(int);
void h3d_mat_Texture_allocNoise(h3d__mat__Texture,int);
void h3d_mat_Texture_allocChecker(h3d__mat__Texture,int);
void fun$2837(void);
void h3d_mat_Texture_new(h3d__mat__Texture,int,int,hl__types__ArrayObj,venum*,vvirtual*);
int h3d_mat_Texture_get_layerCount(h3d__mat__Texture);
void h3d_mat_Texture_alloc(h3d__mat__Texture);
bool h3d_mat_Texture_isSRGB(h3d__mat__Texture);
void h3d_mat_Texture_checkAlloc(h3d__mat__Texture);
h3d__mat__Texture h3d_mat_Texture_clone(h3d__mat__Texture,vvirtual*);
void h3d_mat_Texture_preventAutoDispose(h3d__mat__Texture);
void h3d_mat_Texture_waitLoad(h3d__mat__Texture,vclosure*);
String h3d_mat_Texture_toString(h3d__mat__Texture);
vbyte* h3d_mat_Texture___string(h3d__mat__Texture);
void h3d_mat_Texture_setName(h3d__mat__Texture,String);
venum* h3d_mat_Texture_set_mipMap(h3d__mat__Texture,venum*);
venum* h3d_mat_Texture_set_filter(h3d__mat__Texture,venum*);
venum* h3d_mat_Texture_set_wrap(h3d__mat__Texture,venum*);
bool h3d_mat_Texture_isDisposed(h3d__mat__Texture);
void h3d_mat_Texture_resize(h3d__mat__Texture,int,int);
void h3d_mat_Texture_clear(h3d__mat__Texture,int,double*,vdynamic*);
void h3d_mat_Texture_checkSize(h3d__mat__Texture,int,int,int);
void h3d_mat_Texture_checkMipMapGen(h3d__mat__Texture,int,int);
void h3d_mat_Texture_uploadBitmap(h3d__mat__Texture,hxd__BitmapData,int*,int*);
void h3d_mat_Texture_uploadPixels(h3d__mat__Texture,hxd__Pixels,int*,int*);
void h3d_mat_Texture_dispose(h3d__mat__Texture);
void h3d_mat_Texture_swapTexture(h3d__mat__Texture,h3d__mat__Texture);
hxd__Pixels h3d_mat_Texture_capturePixels(h3d__mat__Texture,int*,int*);
void h3d_mat_TextureArray_new(h3d__mat__TextureArray,int,int,int,hl__types__ArrayObj,venum*,vvirtual*);
int h3d_mat_TextureArray_get_layerCount(h3d__mat__TextureArray);
h3d__mat__Texture h3d_mat_TextureArray_clone(h3d__mat__TextureArray,vvirtual*);
String h3d_mat_TextureArray_toString(h3d__mat__TextureArray);
void h3d_pass_Base_new(h3d__pass__Base,String);
hxsl__RuntimeShader h3d_pass_Base_compileShader(h3d__pass__Base,h3d__mat__Pass);
void h3d_pass_Base_setContext(h3d__pass__Base,h3d__scene__RenderContext);
void h3d_pass_Base_dispose(h3d__pass__Base);
h3d__pass__Object h3d_pass_Base_draw(h3d__pass__Base,h3d__pass__Object);
void h3d_pass_ScreenFx_new(h3d__pass__ScreenFx,h3d__shader__ScreenShader,hl__types__ArrayObj);
h3d__Engine h3d_pass_ScreenFx_get_engine(h3d__pass__ScreenFx);
void h3d_pass_ScreenFx_copy(h3d__pass__ScreenFx,h3d__mat__Texture,h3d__mat__Texture);
void h3d_pass_ScreenFx_setGlobals(h3d__pass__ScreenFx,h3d__scene__RenderContext);
hxsl__Shader h3d_pass_ScreenFx_addShader(h3d__pass__ScreenFx,hxsl__Shader);
bool h3d_pass_ScreenFx_removeShader(h3d__pass__ScreenFx,hxsl__Shader);
hxsl__Shader h3d_pass_ScreenFx_getShader(h3d__pass__ScreenFx,hl__Class);
void h3d_pass_ScreenFx_render(h3d__pass__ScreenFx);
void h3d_pass_ScreenFx_dispose(h3d__pass__ScreenFx);
void h3d_pass_Blur_new(h3d__pass__Blur,double*,double*,double*,double*);
double h3d_pass_Blur_set_radius(h3d__pass__Blur,double);
double h3d_pass_Blur_set_quality(h3d__pass__Blur,double);
double h3d_pass_Blur_set_gain(h3d__pass__Blur,double);
double h3d_pass_Blur_set_linear(h3d__pass__Blur,double);
double h3d_pass_Blur_gauss(h3d__pass__Blur,double,double);
void h3d_pass_Blur_calcValues(h3d__pass__Blur);
int h3d_pass_Blur_getKernelSize(h3d__pass__Blur);
void h3d_pass_Blur_apply(h3d__pass__Blur,h3d__impl__RenderContext,h3d__mat__Texture,h3d__mat__Texture);
void hxsl_Shader_new(hxsl__Shader);
void hxsl_Shader_initialize(hxsl__Shader);
void hxsl_Shader_setPriority(hxsl__Shader,int);
vdynamic* hxsl_Shader_getParamValue(hxsl__Shader,int);
double hxsl_Shader_getParamFloatValue(hxsl__Shader,int);
void hxsl_Shader_updateConstants(hxsl__Shader,hxsl__Globals);
void hxsl_Shader_updateConstantsFinal(hxsl__Shader,hxsl__Globals);
hxsl__Shader hxsl_Shader_clone(hxsl__Shader);
String hxsl_Shader_toString(hxsl__Shader);
vbyte* hxsl_Shader___string(hxsl__Shader);
void h3d_shader_ScreenShader_new(h3d__shader__ScreenShader);
double h3d_shader_ScreenShader_get_flipY(h3d__shader__ScreenShader);
double h3d_shader_ScreenShader_set_flipY(h3d__shader__ScreenShader,double);
void h3d_shader_ScreenShader_updateConstants(h3d__shader__ScreenShader,hxsl__Globals);
vdynamic* h3d_shader_ScreenShader_getParamValue(h3d__shader__ScreenShader,int);
double h3d_shader_ScreenShader_getParamFloatValue(h3d__shader__ScreenShader,int);
hxsl__Shader h3d_shader_ScreenShader_clone(h3d__shader__ScreenShader);
void h3d_pass__Border_BorderShader_new(h3d__pass___Border__BorderShader);
h3d__Vector h3d_pass__Border_BorderShader_get_color(h3d__pass___Border__BorderShader);
h3d__Vector h3d_pass__Border_BorderShader_set_color(h3d__pass___Border__BorderShader,h3d__Vector);
void h3d_pass__Border_BorderShader_updateConstants(h3d__pass___Border__BorderShader,hxsl__Globals);
vdynamic* h3d_pass__Border_BorderShader_getParamValue(h3d__pass___Border__BorderShader,int);
double h3d_pass__Border_BorderShader_getParamFloatValue(h3d__pass___Border__BorderShader,int);
hxsl__Shader h3d_pass__Border_BorderShader_clone(h3d__pass___Border__BorderShader);
void h3d_pass_Border_new(h3d__pass__Border,int,int,int*);
void h3d_pass_Border_dispose(h3d__pass__Border);
void h3d_pass__Copy_CopyShader_new(h3d__pass___Copy__CopyShader);
h3d__mat__Texture h3d_pass__Copy_CopyShader_get_texture(h3d__pass___Copy__CopyShader);
h3d__mat__Texture h3d_pass__Copy_CopyShader_set_texture(h3d__pass___Copy__CopyShader,h3d__mat__Texture);
void h3d_pass__Copy_CopyShader_updateConstants(h3d__pass___Copy__CopyShader,hxsl__Globals);
vdynamic* h3d_pass__Copy_CopyShader_getParamValue(h3d__pass___Copy__CopyShader,int);
double h3d_pass__Copy_CopyShader_getParamFloatValue(h3d__pass___Copy__CopyShader,int);
hxsl__Shader h3d_pass__Copy_CopyShader_clone(h3d__pass___Copy__CopyShader);
void h3d_pass_Copy_run(h3d__mat__Texture,h3d__mat__Texture,venum*,h3d__mat__Pass);
void h3d_pass_Copy_new(h3d__pass__Copy);
void h3d_pass_Copy_apply(h3d__pass__Copy,h3d__mat__Texture,h3d__mat__Texture,venum*,h3d__mat__Pass,vdynamic*);
void h3d_pass__CubeCopy_CubeCopyShader_new(h3d__pass___CubeCopy__CubeCopyShader);
h3d__mat__Texture h3d_pass__CubeCopy_CubeCopyShader_get_texture(h3d__pass___CubeCopy__CubeCopyShader);
h3d__mat__Texture h3d_pass__CubeCopy_CubeCopyShader_set_texture(h3d__pass___CubeCopy__CubeCopyShader,h3d__mat__Texture);
h3d__Matrix h3d_pass__CubeCopy_CubeCopyShader_get_mat(h3d__pass___CubeCopy__CubeCopyShader);
h3d__Matrix h3d_pass__CubeCopy_CubeCopyShader_set_mat(h3d__pass___CubeCopy__CubeCopyShader,h3d__Matrix);
void h3d_pass__CubeCopy_CubeCopyShader_updateConstants(h3d__pass___CubeCopy__CubeCopyShader,hxsl__Globals);
vdynamic* h3d_pass__CubeCopy_CubeCopyShader_getParamValue(h3d__pass___CubeCopy__CubeCopyShader,int);
double h3d_pass__CubeCopy_CubeCopyShader_getParamFloatValue(h3d__pass___CubeCopy__CubeCopyShader,int);
hxsl__Shader h3d_pass__CubeCopy_CubeCopyShader_clone(h3d__pass___CubeCopy__CubeCopyShader);
void h3d_pass_CubeCopy_run(h3d__mat__Texture,h3d__mat__Texture,venum*,h3d__mat__Pass);
void h3d_pass_CubeCopy_new(h3d__pass__CubeCopy);
void h3d_pass_CubeCopy_apply(h3d__pass__CubeCopy,h3d__mat__Texture,h3d__mat__Texture,venum*,h3d__mat__Pass);
void h3d_pass_Default_new(h3d__pass__Default,String);
hxsl__Globals h3d_pass_Default_get_globals(h3d__pass__Default);
bool h3d_pass_Default_get_logEnable(h3d__pass__Default);
hl__types__ArrayObj h3d_pass_Default_getOutputs(h3d__pass__Default);
hxsl__RuntimeShader h3d_pass_Default_compileShader(h3d__pass__Default,h3d__mat__Pass);
hxsl__ShaderList h3d_pass_Default_processShaders(h3d__pass__Default,h3d__pass__Object,hxsl__ShaderList);
void h3d_pass_Default_setupShaders(h3d__pass__Default,h3d__pass__Object);
void h3d_pass_Default_uploadParams(h3d__pass__Default);
void h3d_pass_Default_log(h3d__pass__Default,String);
void h3d_pass_Default_drawObject(h3d__pass__Default,h3d__pass__Object);
h3d__pass__Object h3d_pass_Default_draw(h3d__pass__Default,h3d__pass__Object);
h3d__Matrix h3d_pass_Default_get_cameraView(h3d__pass__Default);
h3d__Matrix h3d_pass_Default_set_cameraView(h3d__pass__Default,h3d__Matrix);
double h3d_pass_Default_get_cameraNear(h3d__pass__Default);
double h3d_pass_Default_set_cameraNear(h3d__pass__Default,double);
double h3d_pass_Default_get_cameraFar(h3d__pass__Default);
double h3d_pass_Default_set_cameraFar(h3d__pass__Default,double);
h3d__Matrix h3d_pass_Default_get_cameraProj(h3d__pass__Default);
h3d__Matrix h3d_pass_Default_set_cameraProj(h3d__pass__Default,h3d__Matrix);
h3d__Vector h3d_pass_Default_get_cameraPos(h3d__pass__Default);
h3d__Vector h3d_pass_Default_set_cameraPos(h3d__pass__Default,h3d__Vector);
h3d__Vector h3d_pass_Default_get_cameraProjDiag(h3d__pass__Default);
h3d__Vector h3d_pass_Default_set_cameraProjDiag(h3d__pass__Default,h3d__Vector);
double h3d_pass_Default_get_cameraProjFlip(h3d__pass__Default);
double h3d_pass_Default_set_cameraProjFlip(h3d__pass__Default,double);
h3d__Matrix h3d_pass_Default_get_cameraViewProj(h3d__pass__Default);
h3d__Matrix h3d_pass_Default_set_cameraViewProj(h3d__pass__Default,h3d__Matrix);
h3d__Matrix h3d_pass_Default_get_cameraInverseViewProj(h3d__pass__Default);
h3d__Matrix h3d_pass_Default_set_cameraInverseViewProj(h3d__pass__Default,h3d__Matrix);
double h3d_pass_Default_get_globalTime(h3d__pass__Default);
double h3d_pass_Default_set_globalTime(h3d__pass__Default,double);
h3d__Vector h3d_pass_Default_get_pixelSize(h3d__pass__Default);
h3d__Vector h3d_pass_Default_set_pixelSize(h3d__pass__Default,h3d__Vector);
h3d__Matrix h3d_pass_Default_get_globalModelView(h3d__pass__Default);
h3d__Matrix h3d_pass_Default_set_globalModelView(h3d__pass__Default,h3d__Matrix);
h3d__Matrix h3d_pass_Default_get_globalModelViewInverse(h3d__pass__Default);
h3d__Matrix h3d_pass_Default_set_globalModelViewInverse(h3d__pass__Default,h3d__Matrix);
void h3d_pass_Default_initGlobals(h3d__pass__Default);
void h3d_pass_Default_setGlobals(h3d__pass__Default);
void h3d_pass_Shadows_new(h3d__pass__Shadows,h3d__scene__Light);
venum* h3d_pass_Shadows_set_mode(h3d__pass__Shadows,venum*);
int h3d_pass_Shadows_set_size(h3d__pass__Shadows,int);
void h3d_pass_Shadows_dispose(h3d__pass__Shadows);
h3d__Matrix h3d_pass_Shadows_getShadowProj(h3d__pass__Shadows);
h3d__mat__Texture h3d_pass_Shadows_getShadowTex(h3d__pass__Shadows);
bool h3d_pass_Shadows_isUsingWorldDist(h3d__pass__Shadows);
hl__types__ArrayObj h3d_pass_Shadows_getOutputs(h3d__pass__Shadows);
bool h3d_pass_Shadows_loadStaticData(h3d__pass__Shadows,haxe__io__Bytes);
haxe__io__Bytes h3d_pass_Shadows_saveStaticData(h3d__pass__Shadows);
void h3d_pass_Shadows_computeStatic(h3d__pass__Shadows,h3d__pass__Object);
h3d__pass__Object h3d_pass_Shadows_filterPasses(h3d__pass__Shadows,h3d__pass__Object);
void h3d_pass_DirShadowMap_new(h3d__pass__DirShadowMap,h3d__scene__Light);
venum* h3d_pass_DirShadowMap_set_mode(h3d__pass__DirShadowMap,venum*);
int h3d_pass_DirShadowMap_set_size(h3d__pass__DirShadowMap,int);
void h3d_pass_DirShadowMap_dispose(h3d__pass__DirShadowMap);
h3d__mat__Texture h3d_pass_DirShadowMap_getShadowTex(h3d__pass__DirShadowMap);
void fun$2927(venum*,h3d__scene__Mesh);
void h3d_pass_DirShadowMap_calcShadowBounds(h3d__pass__DirShadowMap,h3d__Camera);
void h3d_pass_DirShadowMap_setGlobals(h3d__pass__DirShadowMap);
void h3d_pass_DirShadowMap_syncShader(h3d__pass__DirShadowMap,h3d__mat__Texture);
haxe__io__Bytes h3d_pass_DirShadowMap_saveStaticData(h3d__pass__DirShadowMap);
bool h3d_pass_DirShadowMap_loadStaticData(h3d__pass__DirShadowMap,haxe__io__Bytes);
h3d__pass__Object h3d_pass_DirShadowMap_draw(h3d__pass__DirShadowMap,h3d__pass__Object);
void h3d_pass_DirShadowMap_computeStatic(h3d__pass__DirShadowMap,h3d__pass__Object);
void h3d_pass_DefaultShadowMap_new(h3d__pass__DefaultShadowMap,int*,venum*);
h3d__pass__Object h3d_pass_DefaultShadowMap_draw(h3d__pass__DefaultShadowMap,h3d__pass__Object);
void h3d_pass__HardwarePick_FixedColor_new(h3d__pass___HardwarePick__FixedColor);
h3d__Vector h3d_pass__HardwarePick_FixedColor_get_colorID(h3d__pass___HardwarePick__FixedColor);
h3d__Vector h3d_pass__HardwarePick_FixedColor_set_colorID(h3d__pass___HardwarePick__FixedColor,h3d__Vector);
h3d__Vector h3d_pass__HardwarePick_FixedColor_get_viewport(h3d__pass___HardwarePick__FixedColor);
h3d__Vector h3d_pass__HardwarePick_FixedColor_set_viewport(h3d__pass___HardwarePick__FixedColor,h3d__Vector);
void h3d_pass__HardwarePick_FixedColor_updateConstants(h3d__pass___HardwarePick__FixedColor,hxsl__Globals);
vdynamic* h3d_pass__HardwarePick_FixedColor_getParamValue(h3d__pass___HardwarePick__FixedColor,int);
double h3d_pass__HardwarePick_FixedColor_getParamFloatValue(h3d__pass___HardwarePick__FixedColor,int);
hxsl__Shader h3d_pass__HardwarePick_FixedColor_clone(h3d__pass___HardwarePick__FixedColor);
void h3d_pass_HardwarePick_new(h3d__pass__HardwarePick);
void h3d_pass_HardwarePick_dispose(h3d__pass__HardwarePick);
hl__types__ArrayObj h3d_pass_HardwarePick_getOutputs(h3d__pass__HardwarePick);
void h3d_pass_HardwarePick_drawObject(h3d__pass__HardwarePick,h3d__pass__Object);
void h3d_pass_HardwarePick_nextID(h3d__pass__HardwarePick);
h3d__pass__Object h3d_pass_HardwarePick_draw(h3d__pass__HardwarePick,h3d__pass__Object);
void h3d_pass_Object_new(h3d__pass__Object);
void h3d_pass_ShaderManager_new(h3d__pass__ShaderManager,hl__types__ArrayObj);
void h3d_pass_ShaderManager_setOutput(h3d__pass__ShaderManager,hl__types__ArrayObj);
int h3d_pass_ShaderManager_fillRec(h3d__pass__ShaderManager,vdynamic*,venum*,hl__types__ArrayBytes_Single,int);
String h3d_pass_ShaderManager_shaderInfo(h3d__pass__ShaderManager,hxsl__ShaderList,String);
vdynamic* h3d_pass_ShaderManager_getParamValue(h3d__pass__ShaderManager,hxsl__AllocParam,hxsl__ShaderList,bool*);
void h3d_pass_ShaderManager_fillGlobals(h3d__pass__ShaderManager,h3d__shader__Buffers,hxsl__RuntimeShader);
void h3d_pass_ShaderManager_fillParams(h3d__pass__ShaderManager,h3d__shader__Buffers,hxsl__RuntimeShader,hxsl__ShaderList);
hxsl__RuntimeShader h3d_pass_ShaderManager_compileShaders(h3d__pass__ShaderManager,hxsl__ShaderList);
void h3d_prim_BigPrimitive_new(h3d__prim__BigPrimitive,int,bool*,vvirtual*);
void h3d_prim_BigPrimitive_begin(h3d__prim__BigPrimitive,int,int);
void h3d_prim_BigPrimitive_addPoint(h3d__prim__BigPrimitive,float,float,float);
void h3d_prim_BigPrimitive_addBounds(h3d__prim__BigPrimitive,double,double,double);
void h3d_prim_BigPrimitive_addVertexValue(h3d__prim__BigPrimitive,float);
void h3d_prim_BigPrimitive_addIndex(h3d__prim__BigPrimitive,int);
int h3d_prim_BigPrimitive_triCount(h3d__prim__BigPrimitive);
int h3d_prim_BigPrimitive_vertexCount(h3d__prim__BigPrimitive);
void h3d_prim_BigPrimitive_flush(h3d__prim__BigPrimitive);
void h3d_prim_BigPrimitive_render(h3d__prim__BigPrimitive,h3d__Engine);
h3d__col__Bounds h3d_prim_BigPrimitive_getBounds(h3d__prim__BigPrimitive);
void h3d_prim_BigPrimitive_dispose(h3d__prim__BigPrimitive);
void h3d_prim_BigPrimitive_clear(h3d__prim__BigPrimitive);
void h3d_prim_BigPrimitive_add(h3d__prim__BigPrimitive,hl__types__ArrayBytes_Single,hl__types__ArrayBytes_hl_UI16,double*,double*,double*,double*,double*,int*);
void h3d_prim_BigPrimitive_addSub(h3d__prim__BigPrimitive,hl__types__ArrayBytes_Single,hl__types__ArrayBytes_hl_UI16,int,int,int,int,double*,double*,double*,double*,double*,int*,double*,double*,double*,h3d__Matrix);
h3d__BufferOffset h3d_prim_MeshPrimitive_allocBuffer(h3d__prim__MeshPrimitive,h3d__Engine,String);
bool h3d_prim_MeshPrimitive_hasBuffer(h3d__prim__MeshPrimitive,String);
void h3d_prim_MeshPrimitive_addBuffer(h3d__prim__MeshPrimitive,String,h3d__Buffer,int*);
void h3d_prim_MeshPrimitive_dispose(h3d__prim__MeshPrimitive);
h3d__BufferOffset h3d_prim_MeshPrimitive_getBuffers(h3d__prim__MeshPrimitive,h3d__Engine);
void h3d_prim_MeshPrimitive_render(h3d__prim__MeshPrimitive,h3d__Engine);
void h3d_prim_HMDModel_new(h3d__prim__HMDModel,hxd__fmt__hmd__Geometry,int,hxd__fmt__hmd__Library);
int h3d_prim_HMDModel_triCount(h3d__prim__HMDModel);
int h3d_prim_HMDModel_vertexCount(h3d__prim__HMDModel);
h3d__col__Bounds h3d_prim_HMDModel_getBounds(h3d__prim__HMDModel);
void h3d_prim_HMDModel_selectMaterial(h3d__prim__HMDModel,int);
hxd__fmt__hmd__GeometryBuffer h3d_prim_HMDModel_getDataBuffers(h3d__prim__HMDModel,hl__types__ArrayObj,hl__types__ArrayObj,vdynamic*);
void h3d_prim_HMDModel_loadSkin(h3d__prim__HMDModel,h3d__anim__Skin);
void h3d_prim_HMDModel_addAlias(h3d__prim__HMDModel,String,String,int*);
void h3d_prim_HMDModel_alloc(h3d__prim__HMDModel,h3d__Engine);
void h3d_prim_HMDModel_recomputeNormals(h3d__prim__HMDModel,String);
void h3d_prim_HMDModel_render(h3d__prim__HMDModel,h3d__Engine);
void h3d_prim_HMDModel_initCollider(h3d__prim__HMDModel,h3d__col__PolygonBuffer);
vvirtual* h3d_prim_HMDModel_getCollider(h3d__prim__HMDModel);
void h3d_prim_ModelCache_new(h3d__prim__ModelCache);
void h3d_prim_ModelCache_dispose(h3d__prim__ModelCache);
hxd__fmt__hmd__Library h3d_prim_ModelCache_loadLibrary(h3d__prim__ModelCache,hxd__res__Model);
h3d__mat__Texture fun$3009(venum*,String);
h3d__scene__Object h3d_prim_ModelCache_loadModel(h3d__prim__ModelCache,hxd__res__Model);
h3d__mat__Texture h3d_prim_ModelCache_loadTexture(h3d__prim__ModelCache,hxd__res__Model,String);
h3d__anim__Animation h3d_prim_ModelCache_loadAnimation(h3d__prim__ModelCache,hxd__res__Model,String);
h3d__anim__Animation h3d_prim_ModelCache_initAnimation(h3d__prim__ModelCache,hxd__res__Model,String);
vdynamic* h3d_prim_Plane2D_get(void);
void h3d_prim_Plane2D_new(h3d__prim__Plane2D);
int h3d_prim_Plane2D_triCount(h3d__prim__Plane2D);
int h3d_prim_Plane2D_vertexCount(h3d__prim__Plane2D);
void h3d_prim_Plane2D_alloc(h3d__prim__Plane2D,h3d__Engine);
void h3d_prim_Plane2D_render(h3d__prim__Plane2D,h3d__Engine);
void h3d_prim_Polygon_new(h3d__prim__Polygon,hl__types__ArrayObj,hl__types__ArrayBytes_hl_UI16);
h3d__col__Bounds h3d_prim_Polygon_getBounds(h3d__prim__Polygon);
void h3d_prim_Polygon_alloc(h3d__prim__Polygon,h3d__Engine);
void h3d_prim_Polygon_unindex(h3d__prim__Polygon);
void h3d_prim_Polygon_translate(h3d__prim__Polygon,double,double,double);
void h3d_prim_Polygon_scale(h3d__prim__Polygon,double);
void h3d_prim_Polygon_addNormals(h3d__prim__Polygon);
void h3d_prim_Polygon_addTangents(h3d__prim__Polygon);
void h3d_prim_Polygon_addUVs(h3d__prim__Polygon);
void h3d_prim_Polygon_uvScale(h3d__prim__Polygon,double,double);
int h3d_prim_Polygon_triCount(h3d__prim__Polygon);
int h3d_prim_Polygon_vertexCount(h3d__prim__Polygon);
vvirtual* h3d_prim_Polygon_getCollider(h3d__prim__Polygon);
void h3d_prim_Polygon_render(h3d__prim__Polygon,h3d__Engine);
vvirtual* fun$3015(vvirtual*);
void h3d_prim_RawPrimitive_new(h3d__prim__RawPrimitive,vvirtual*,bool*);
void h3d_prim_RawPrimitive_alloc(h3d__prim__RawPrimitive,h3d__Engine);
h3d__col__Bounds h3d_prim_RawPrimitive_getBounds(h3d__prim__RawPrimitive);
int h3d_prim_RawPrimitive_triCount(h3d__prim__RawPrimitive);
int h3d_prim_RawPrimitive_vertexCount(h3d__prim__RawPrimitive);
void h3d_prim_UV_new(h3d__prim__UV,double,double);
h3d__prim__UV h3d_prim_UV_clone(h3d__prim__UV);
String h3d_prim_UV_toString(h3d__prim__UV);
vbyte* h3d_prim_UV___string(h3d__prim__UV);
void h3d_scene_DepthPass_new(h3d__scene__DepthPass);
hl__types__ArrayObj h3d_scene_DepthPass_getOutputs(h3d__scene__DepthPass);
h3d__pass__Object h3d_scene_DepthPass_draw(h3d__scene__DepthPass,h3d__pass__Object);
void h3d_scene_NormalPass_new(h3d__scene__NormalPass);
hl__types__ArrayObj h3d_scene_NormalPass_getOutputs(h3d__scene__NormalPass);
h3d__pass__Object h3d_scene_NormalPass_draw(h3d__scene__NormalPass,h3d__pass__Object);
void h3d_scene_Renderer_new(h3d__scene__Renderer);
void h3d_scene_Renderer_dispose(h3d__scene__Renderer);
h3d__pass__Base h3d_scene_Renderer_getPass(h3d__scene__Renderer,hl__Class);
h3d__pass__Base h3d_scene_Renderer_getPassByName(h3d__scene__Renderer,String);
hxsl__RuntimeShader h3d_scene_Renderer_debugCompileShader(h3d__scene__Renderer,h3d__mat__Pass);
bool h3d_scene_Renderer_hasFeature(h3d__scene__Renderer,venum*);
h3d__scene__Light h3d_scene_Renderer_getDefaultLight(h3d__scene__Renderer,h3d__scene__Light);
h3d__scene__LightSystem h3d_scene_Renderer_getLightSystem(h3d__scene__Renderer);
void h3d_scene_Renderer_time(h3d__scene__Renderer,String);
h3d__pass__Object h3d_scene_Renderer_depthSort(h3d__scene__Renderer,h3d__pass__Object,bool*);
void h3d_scene_Renderer_clear(h3d__scene__Renderer,vdynamic*,vdynamic*,vdynamic*);
h3d__mat__Texture h3d_scene_Renderer_allocTarget(h3d__scene__Renderer,String,bool*,double*,venum*);
void h3d_scene_Renderer_copy(h3d__scene__Renderer,h3d__mat__Texture,h3d__mat__Texture,venum*);
void h3d_scene_Renderer_setTarget(h3d__scene__Renderer,h3d__mat__Texture);
void h3d_scene_Renderer_setTargets(h3d__scene__Renderer,hl__types__ArrayObj);
void h3d_scene_Renderer_resetTarget(h3d__scene__Renderer);
bool h3d_scene_Renderer_has(h3d__scene__Renderer,String);
h3d__pass__Object h3d_scene_Renderer_get(h3d__scene__Renderer,String);
h3d__pass__Object h3d_scene_Renderer_getSort(h3d__scene__Renderer,String,bool*);
void h3d_scene_Renderer_draw(h3d__scene__Renderer,String);
void h3d_scene_Renderer_render(h3d__scene__Renderer);
void h3d_scene_Renderer_computeStatic(h3d__scene__Renderer);
void h3d_scene_Renderer_start(h3d__scene__Renderer);
void h3d_scene_Renderer_process(h3d__scene__Renderer,hl__types__ArrayObj);
void h3d_scene_DefaultRenderer_new(h3d__scene__DefaultRenderer);
h3d__pass__Base h3d_scene_DefaultRenderer_get_def(h3d__scene__DefaultRenderer);
void h3d_scene_DefaultRenderer_renderPass(h3d__scene__DefaultRenderer,h3d__pass__Base,h3d__pass__Object);
void h3d_scene_DefaultRenderer_render(h3d__scene__DefaultRenderer);
void h3d_scene__Graphics_GPoint_new(h3d__scene___Graphics__GPoint,double,double,double,double,double,double,double);
void h3d_scene_Object_new(h3d__scene__Object,h3d__scene__Object);
bool h3d_scene_Object_get_visible(h3d__scene__Object);
bool h3d_scene_Object_get_allocated(h3d__scene__Object);
bool h3d_scene_Object_get_posChanged(h3d__scene__Object);
bool h3d_scene_Object_get_culled(h3d__scene__Object);
bool h3d_scene_Object_get_followPositionOnly(h3d__scene__Object);
bool h3d_scene_Object_get_lightCameraCenter(h3d__scene__Object);
bool h3d_scene_Object_get_alwaysSync(h3d__scene__Object);
bool h3d_scene_Object_get_inheritCulled(h3d__scene__Object);
bool h3d_scene_Object_get_ignoreBounds(h3d__scene__Object);
bool h3d_scene_Object_get_ignoreCollide(h3d__scene__Object);
bool h3d_scene_Object_get_allowSerialize(h3d__scene__Object);
bool h3d_scene_Object_get_ignoreParentTransform(h3d__scene__Object);
bool h3d_scene_Object_set_posChanged(h3d__scene__Object,bool);
bool h3d_scene_Object_set_culled(h3d__scene__Object,bool);
bool h3d_scene_Object_set_visible(h3d__scene__Object,bool);
bool h3d_scene_Object_set_allocated(h3d__scene__Object,bool);
bool h3d_scene_Object_set_followPositionOnly(h3d__scene__Object,bool);
bool h3d_scene_Object_set_lightCameraCenter(h3d__scene__Object,bool);
bool h3d_scene_Object_set_alwaysSync(h3d__scene__Object,bool);
bool h3d_scene_Object_set_ignoreBounds(h3d__scene__Object,bool);
bool h3d_scene_Object_set_inheritCulled(h3d__scene__Object,bool);
bool h3d_scene_Object_set_ignoreCollide(h3d__scene__Object,bool);
bool h3d_scene_Object_set_allowSerialize(h3d__scene__Object,bool);
bool h3d_scene_Object_set_ignoreParentTransform(h3d__scene__Object,bool);
h3d__anim__Animation h3d_scene_Object_playAnimation(h3d__scene__Object,h3d__anim__Animation);
h3d__anim__Animation h3d_scene_Object_switchToAnimation(h3d__scene__Object,h3d__anim__Animation);
void h3d_scene_Object_stopAnimation(h3d__scene__Object,vdynamic*);
void h3d_scene_Object_applyAnimationTransform(h3d__scene__Object,bool*);
int h3d_scene_Object_getObjectsCount(h3d__scene__Object);
h3d__mat__Material h3d_scene_Object_getMaterialByName(h3d__scene__Object,String);
vdynamic* h3d_scene_Object_find(h3d__scene__Object,vclosure*);
hl__types__ArrayDyn h3d_scene_Object_findAll(h3d__scene__Object,vclosure*,hl__types__ArrayDyn);
hl__types__ArrayObj h3d_scene_Object_getMaterials(h3d__scene__Object,hl__types__ArrayObj);
h3d__Vector h3d_scene_Object_localToGlobal(h3d__scene__Object,h3d__Vector);
h3d__Vector h3d_scene_Object_globalToLocal(h3d__scene__Object,h3d__Vector);
h3d__Matrix h3d_scene_Object_getInvPos(h3d__scene__Object);
h3d__col__Bounds h3d_scene_Object_getBounds(h3d__scene__Object,h3d__col__Bounds);
h3d__col__Bounds h3d_scene_Object_getBoundsRec(h3d__scene__Object,h3d__col__Bounds);
hl__types__ArrayObj h3d_scene_Object_getMeshes(h3d__scene__Object,hl__types__ArrayObj);
h3d__scene__Mesh h3d_scene_Object_getMeshByName(h3d__scene__Object,String);
h3d__scene__Object h3d_scene_Object_getObjectByName(h3d__scene__Object,String);
h3d__scene__Object h3d_scene_Object_clone(h3d__scene__Object,h3d__scene__Object);
void h3d_scene_Object_addChild(h3d__scene__Object,h3d__scene__Object);
void h3d_scene_Object_addChildAt(h3d__scene__Object,h3d__scene__Object,int);
void h3d_scene_Object_iterVisibleMeshes(h3d__scene__Object,vclosure*);
void h3d_scene_Object_onParentChanged(h3d__scene__Object);
void h3d_scene_Object_onAdd(h3d__scene__Object);
void h3d_scene_Object_onRemove(h3d__scene__Object);
void h3d_scene_Object_removeChild(h3d__scene__Object,h3d__scene__Object);
void h3d_scene_Object_removeChildren(h3d__scene__Object);
void h3d_scene_Object_remove(h3d__scene__Object);
h3d__scene__Scene h3d_scene_Object_getScene(h3d__scene__Object);
h3d__Matrix h3d_scene_Object_getAbsPos(h3d__scene__Object);
bool h3d_scene_Object_isMesh(h3d__scene__Object);
h3d__scene__Mesh h3d_scene_Object_toMesh(h3d__scene__Object);
vvirtual* h3d_scene_Object_getCollider(h3d__scene__Object);
vvirtual* h3d_scene_Object_getGlobalCollider(h3d__scene__Object);
vvirtual* h3d_scene_Object_getLocalCollider(h3d__scene__Object);
void h3d_scene_Object_draw(h3d__scene__Object,h3d__scene__RenderContext);
h3d__scene__Object h3d_scene_Object_set_follow(h3d__scene__Object,h3d__scene__Object);
void h3d_scene_Object_calcAbsPos(h3d__scene__Object);
void h3d_scene_Object_sync(h3d__scene__Object,h3d__scene__RenderContext);
void h3d_scene_Object_syncRec(h3d__scene__Object,h3d__scene__RenderContext);
void h3d_scene_Object_syncPos(h3d__scene__Object);
void h3d_scene_Object_emit(h3d__scene__Object,h3d__scene__RenderContext);
void h3d_scene_Object_emitRec(h3d__scene__Object,h3d__scene__RenderContext);
double h3d_scene_Object_set_x(h3d__scene__Object,double);
double h3d_scene_Object_set_y(h3d__scene__Object,double);
double h3d_scene_Object_set_z(h3d__scene__Object,double);
double h3d_scene_Object_set_scaleX(h3d__scene__Object,double);
double h3d_scene_Object_set_scaleY(h3d__scene__Object,double);
double h3d_scene_Object_set_scaleZ(h3d__scene__Object,double);
h3d__Matrix h3d_scene_Object_set_defaultTransform(h3d__scene__Object,h3d__Matrix);
void h3d_scene_Object_setPosition(h3d__scene__Object,double,double,double);
void h3d_scene_Object_setTransform(h3d__scene__Object,h3d__Matrix);
void h3d_scene_Object_rotate(h3d__scene__Object,double,double,double);
void h3d_scene_Object_setRotation(h3d__scene__Object,double,double,double);
void h3d_scene_Object_setRotationAxis(h3d__scene__Object,double,double,double,double);
void h3d_scene_Object_setDirection(h3d__scene__Object,h3d__Vector);
h3d__Vector h3d_scene_Object_getDirection(h3d__scene__Object);
h3d__Quat h3d_scene_Object_getRotationQuat(h3d__scene__Object);
void h3d_scene_Object_setRotationQuat(h3d__scene__Object,h3d__Quat);
void h3d_scene_Object_scale(h3d__scene__Object,double);
void h3d_scene_Object_setScale(h3d__scene__Object,double);
String h3d_scene_Object_toString(h3d__scene__Object);
vbyte* h3d_scene_Object___string(h3d__scene__Object);
h3d__scene__Object h3d_scene_Object_getChildAt(h3d__scene__Object,int);
int h3d_scene_Object_getChildIndex(h3d__scene__Object,h3d__scene__Object);
int h3d_scene_Object_get_numChildren(h3d__scene__Object);
hxd__impl__ArrayIterator_h3d_scene_Object h3d_scene_Object_iterator(h3d__scene__Object);
void h3d_scene_Object_dispose(h3d__scene__Object);
void h3d_scene_Mesh_new(h3d__scene__Mesh,h3d__prim__Primitive,h3d__mat__Material,h3d__scene__Object);
hl__types__ArrayObj h3d_scene_Mesh_getMeshMaterials(h3d__scene__Mesh);
h3d__col__Bounds h3d_scene_Mesh_getBoundsRec(h3d__scene__Mesh,h3d__col__Bounds);
h3d__scene__Object h3d_scene_Mesh_clone(h3d__scene__Mesh,h3d__scene__Object);
vvirtual* h3d_scene_Mesh_getLocalCollider(h3d__scene__Mesh);
void h3d_scene_Mesh_draw(h3d__scene__Mesh,h3d__scene__RenderContext);
void h3d_scene_Mesh_emit(h3d__scene__Mesh,h3d__scene__RenderContext);
h3d__mat__Material h3d_scene_Mesh_getMaterialByName(h3d__scene__Mesh,String);
hl__types__ArrayObj h3d_scene_Mesh_getMaterials(h3d__scene__Mesh,hl__types__ArrayObj);
void h3d_scene_Mesh_dispose(h3d__scene__Mesh);
void h3d_scene_Graphics_new(h3d__scene__Graphics,h3d__scene__Object);
void h3d_scene_Graphics_onRemove(h3d__scene__Graphics);
bool h3d_scene_Graphics_set_is3D(h3d__scene__Graphics,bool);
void h3d_scene_Graphics_flushLine(h3d__scene__Graphics);
void h3d_scene_Graphics_flush(h3d__scene__Graphics);
void h3d_scene_Graphics_sync(h3d__scene__Graphics,h3d__scene__RenderContext);
void h3d_scene_Graphics_draw(h3d__scene__Graphics,h3d__scene__RenderContext);
void h3d_scene_Graphics_clear(h3d__scene__Graphics);
void h3d_scene_Graphics_lineStyle(h3d__scene__Graphics,double*,int*,double*);
void h3d_scene_Graphics_setColor(h3d__scene__Graphics,int,double*);
void h3d_scene_Graphics_drawLine(h3d__scene__Graphics,h3d__col__Point,h3d__col__Point);
void h3d_scene_Graphics_moveTo(h3d__scene__Graphics,double,double,double);
void h3d_scene_Graphics_addVertex(h3d__scene__Graphics,double,double,double,double,double,double,double);
void h3d_scene_Graphics_lineTo(h3d__scene__Graphics,double,double,double);
void h3d_scene_Interactive_new(h3d__scene__Interactive,vvirtual*,h3d__scene__Object);
void h3d_scene_Interactive_onAdd(h3d__scene__Interactive);
void h3d_scene_Interactive_onRemove(h3d__scene__Interactive);
void h3d_scene_Interactive_preventClick(h3d__scene__Interactive);
vvirtual* h3d_scene_Interactive_getInteractiveScene(h3d__scene__Interactive);
void h3d_scene_Interactive_handleEvent(h3d__scene__Interactive,hxd__Event);
venum* h3d_scene_Interactive_set_cursor(h3d__scene__Interactive,venum*);
void h3d_scene_Interactive_focus(h3d__scene__Interactive);
void h3d_scene_Interactive_blur(h3d__scene__Interactive);
bool h3d_scene_Interactive_isOver(h3d__scene__Interactive);
bool h3d_scene_Interactive_hasFocus(h3d__scene__Interactive);
void h3d_scene_Interactive_onOver(h3d__scene__Interactive,hxd__Event);
void h3d_scene_Interactive_onOut(h3d__scene__Interactive,hxd__Event);
void h3d_scene_Interactive_onPush(h3d__scene__Interactive,hxd__Event);
void h3d_scene_Interactive_onRelease(h3d__scene__Interactive,hxd__Event);
void h3d_scene_Interactive_onClick(h3d__scene__Interactive,hxd__Event);
void h3d_scene_Interactive_onMove(h3d__scene__Interactive,hxd__Event);
void h3d_scene_Interactive_onWheel(h3d__scene__Interactive,hxd__Event);
void h3d_scene_Interactive_onFocus(h3d__scene__Interactive,hxd__Event);
void h3d_scene_Interactive_onFocusLost(h3d__scene__Interactive,hxd__Event);
void h3d_scene_Interactive_onKeyUp(h3d__scene__Interactive,hxd__Event);
void h3d_scene_Interactive_onKeyDown(h3d__scene__Interactive,hxd__Event);
void h3d_scene_Interactive_onCheck(h3d__scene__Interactive,hxd__Event);
void h3d_scene_Interactive_onTextInput(h3d__scene__Interactive,hxd__Event);
void h3d_scene_Light_new(h3d__scene__Light,hxsl__Shader,h3d__scene__Object);
h3d__Vector h3d_scene_Light_get_color(h3d__scene__Light);
h3d__Vector h3d_scene_Light_set_color(h3d__scene__Light,h3d__Vector);
bool h3d_scene_Light_get_enableSpecular(h3d__scene__Light);
bool h3d_scene_Light_set_enableSpecular(h3d__scene__Light,bool);
void h3d_scene_Light_emit(h3d__scene__Light,h3d__scene__RenderContext);
h3d__Vector h3d_scene_Light_getShadowDirection(h3d__scene__Light);
void h3d_scene_LightSystem_new(h3d__scene__LightSystem);
bool h3d_scene_LightSystem_get_additiveLighting(h3d__scene__LightSystem);
bool h3d_scene_LightSystem_set_additiveLighting(h3d__scene__LightSystem,bool);
void h3d_scene_LightSystem_initLights(h3d__scene__LightSystem,h3d__scene__RenderContext);
void h3d_scene_LightSystem_initGlobals(h3d__scene__LightSystem,hxsl__Globals);
int h3d_scene_LightSystem_sortLight(h3d__scene__LightSystem,h3d__scene__Light,h3d__scene__Light);
hxsl__ShaderList h3d_scene_LightSystem_computeLight(h3d__scene__LightSystem,h3d__scene__Object,hxsl__ShaderList);
void h3d_scene_MultiMaterial_new(h3d__scene__MultiMaterial,h3d__prim__Primitive,hl__types__ArrayObj,h3d__scene__Object);
hl__types__ArrayObj h3d_scene_MultiMaterial_getMeshMaterials(h3d__scene__MultiMaterial);
h3d__scene__Object h3d_scene_MultiMaterial_clone(h3d__scene__MultiMaterial,h3d__scene__Object);
void h3d_scene_MultiMaterial_emit(h3d__scene__MultiMaterial,h3d__scene__RenderContext);
h3d__mat__Material h3d_scene_MultiMaterial_getMaterialByName(h3d__scene__MultiMaterial,String);
hl__types__ArrayObj h3d_scene_MultiMaterial_getMaterials(h3d__scene__MultiMaterial,hl__types__ArrayObj);
void h3d_scene_MultiMaterial_draw(h3d__scene__MultiMaterial,h3d__scene__RenderContext);
int h3d_scene__Object_ObjectFlags_Impl___new(void);
int h3d_scene__Object_ObjectFlags_Impl__toInt(int);
bool h3d_scene__Object_ObjectFlags_Impl__has(int,int);
bool h3d_scene__Object_ObjectFlags_Impl__set(int,int,bool);
void h3d_scene__RenderContext_SharedGlobal_new(h3d__scene___RenderContext__SharedGlobal,int,vdynamic*);
void h3d_scene_RenderContext_new(h3d__scene__RenderContext);
void h3d_scene_RenderContext_emit(h3d__scene__RenderContext,h3d__mat__Material,h3d__scene__Object,int*);
void h3d_scene_RenderContext_start(h3d__scene__RenderContext);
void h3d_scene_RenderContext_nextPass(h3d__scene__RenderContext);
vdynamic* h3d_scene_RenderContext_getGlobal(h3d__scene__RenderContext,String);
void h3d_scene_RenderContext_setGlobal(h3d__scene__RenderContext,String,vdynamic*);
void h3d_scene_RenderContext_setGlobalID(h3d__scene__RenderContext,int,vdynamic*);
h3d__pass__Object h3d_scene_RenderContext_emitPass(h3d__scene__RenderContext,h3d__mat__Pass,h3d__scene__Object);
hxsl__ShaderList h3d_scene_RenderContext_allocShaderList(h3d__scene__RenderContext,hxsl__Shader,hxsl__ShaderList);
void h3d_scene_RenderContext_emitLight(h3d__scene__RenderContext,h3d__scene__Light);
void h3d_scene_RenderContext_done(h3d__scene__RenderContext);
void h3d_scene_PassObjects_new(h3d__scene__PassObjects,String,h3d__pass__Object);
void h3d_scene_Scene_new(h3d__scene__Scene);
void h3d_scene_Scene_setEvents(h3d__scene__Scene,hxd__SceneEvents);
void h3d_scene_Scene_addEventListener(h3d__scene__Scene,vclosure*);
bool h3d_scene_Scene_removeEventListener(h3d__scene__Scene,vclosure*);
void h3d_scene_Scene_dispatchListeners(h3d__scene__Scene,hxd__Event);
h3d__scene__Renderer h3d_scene_Scene_set_renderer(h3d__scene__Scene,h3d__scene__Renderer);
int h3d_scene_Scene_sortHitPointByCameraDistance(h3d__scene__Scene,h3d__scene__Interactive,h3d__scene__Interactive);
void h3d_scene_Scene_dispatchEvent(h3d__scene__Scene,hxd__Event,vvirtual*);
bool h3d_scene_Scene_isInteractiveVisible(h3d__scene__Scene,vvirtual*);
int fun$3044(vclosure*,vdynamic*,vdynamic*);
h3d__scene__Interactive h3d_scene_Scene_handleEvent(h3d__scene__Scene,hxd__Event,vvirtual*);
h3d__scene__Object h3d_scene_Scene_clone(h3d__scene__Scene,h3d__scene__Object);
void h3d_scene_Scene_dispose(h3d__scene__Scene);
void h3d_scene_Scene_addEventTarget(h3d__scene__Scene,h3d__scene__Interactive);
void h3d_scene_Scene_removeEventTarget(h3d__scene__Scene,h3d__scene__Interactive);
void h3d_scene_Scene_setElapsedTime(h3d__scene__Scene,double);
void fun$3045(venum*,h3d__scene__Mesh);
h3d__scene__Object h3d_scene_Scene_hardwarePick(h3d__scene__Scene,double,double);
void h3d_scene_Scene_syncOnly(h3d__scene__Scene,double);
void h3d_scene_Scene_computeStatic(h3d__scene__Scene);
void h3d_scene_Scene_render(h3d__scene__Scene,h3d__Engine);
haxe__io__Bytes h3d_scene_Scene_serializeScene(h3d__scene__Scene);
void h3d_scene_Joint_new(h3d__scene__Joint,h3d__scene__Skin,h3d__anim__Joint);
h3d__scene__Object h3d_scene_Joint_getObjectByName(h3d__scene__Joint,String);
void h3d_scene_Joint_syncPos(h3d__scene__Joint);
void h3d_scene_Skin_new(h3d__scene__Skin,h3d__anim__Skin,hl__types__ArrayObj,h3d__scene__Object);
h3d__scene__Object h3d_scene_Skin_clone(h3d__scene__Skin,h3d__scene__Object);
h3d__col__Bounds h3d_scene_Skin_getBoundsRec(h3d__scene__Skin,h3d__col__Bounds);
h3d__scene__Object h3d_scene_Skin_getObjectByName(h3d__scene__Skin,String);
vvirtual* h3d_scene_Skin_getLocalCollider(h3d__scene__Skin);
vvirtual* h3d_scene_Skin_getGlobalCollider(h3d__scene__Skin);
void h3d_scene_Skin_calcAbsPos(h3d__scene__Skin);
h3d__anim__Skin h3d_scene_Skin_getSkinData(h3d__scene__Skin);
void h3d_scene_Skin_setSkinData(h3d__scene__Skin,h3d__anim__Skin,bool*);
void h3d_scene_Skin_sync(h3d__scene__Skin,h3d__scene__RenderContext);
void h3d_scene_Skin_syncJoints(h3d__scene__Skin);
void h3d_scene_Skin_emit(h3d__scene__Skin,h3d__scene__RenderContext);
void h3d_scene_Skin_draw(h3d__scene__Skin,h3d__scene__RenderContext);
void h3d_shader_AmbientLight_new(h3d__shader__AmbientLight);
bool h3d_shader_AmbientLight_get_additive(h3d__shader__AmbientLight);
bool h3d_shader_AmbientLight_set_additive(h3d__shader__AmbientLight,bool);
void h3d_shader_AmbientLight_updateConstants(h3d__shader__AmbientLight,hxsl__Globals);
vdynamic* h3d_shader_AmbientLight_getParamValue(h3d__shader__AmbientLight,int);
double h3d_shader_AmbientLight_getParamFloatValue(h3d__shader__AmbientLight,int);
hxsl__Shader h3d_shader_AmbientLight_clone(h3d__shader__AmbientLight);
void h3d_shader_Base2d_new(h3d__shader__Base2d);
double h3d_shader_Base2d_get_zValue(h3d__shader__Base2d);
double h3d_shader_Base2d_set_zValue(h3d__shader__Base2d,double);
h3d__mat__Texture h3d_shader_Base2d_get_texture(h3d__shader__Base2d);
h3d__mat__Texture h3d_shader_Base2d_set_texture(h3d__shader__Base2d,h3d__mat__Texture);
bool h3d_shader_Base2d_get_isRelative(h3d__shader__Base2d);
bool h3d_shader_Base2d_set_isRelative(h3d__shader__Base2d,bool);
h3d__Vector h3d_shader_Base2d_get_color(h3d__shader__Base2d);
h3d__Vector h3d_shader_Base2d_set_color(h3d__shader__Base2d,h3d__Vector);
h3d__Vector h3d_shader_Base2d_get_absoluteMatrixA(h3d__shader__Base2d);
h3d__Vector h3d_shader_Base2d_set_absoluteMatrixA(h3d__shader__Base2d,h3d__Vector);
h3d__Vector h3d_shader_Base2d_get_absoluteMatrixB(h3d__shader__Base2d);
h3d__Vector h3d_shader_Base2d_set_absoluteMatrixB(h3d__shader__Base2d,h3d__Vector);
h3d__Vector h3d_shader_Base2d_get_filterMatrixA(h3d__shader__Base2d);
h3d__Vector h3d_shader_Base2d_set_filterMatrixA(h3d__shader__Base2d,h3d__Vector);
h3d__Vector h3d_shader_Base2d_get_filterMatrixB(h3d__shader__Base2d);
h3d__Vector h3d_shader_Base2d_set_filterMatrixB(h3d__shader__Base2d,h3d__Vector);
bool h3d_shader_Base2d_get_hasUVPos(h3d__shader__Base2d);
bool h3d_shader_Base2d_set_hasUVPos(h3d__shader__Base2d,bool);
h3d__Vector h3d_shader_Base2d_get_uvPos(h3d__shader__Base2d);
h3d__Vector h3d_shader_Base2d_set_uvPos(h3d__shader__Base2d,h3d__Vector);
bool h3d_shader_Base2d_get_killAlpha(h3d__shader__Base2d);
bool h3d_shader_Base2d_set_killAlpha(h3d__shader__Base2d,bool);
bool h3d_shader_Base2d_get_pixelAlign(h3d__shader__Base2d);
bool h3d_shader_Base2d_set_pixelAlign(h3d__shader__Base2d,bool);
h3d__Vector h3d_shader_Base2d_get_halfPixelInverse(h3d__shader__Base2d);
h3d__Vector h3d_shader_Base2d_set_halfPixelInverse(h3d__shader__Base2d,h3d__Vector);
h3d__Vector h3d_shader_Base2d_get_viewport(h3d__shader__Base2d);
h3d__Vector h3d_shader_Base2d_set_viewport(h3d__shader__Base2d,h3d__Vector);
void h3d_shader_Base2d_updateConstants(h3d__shader__Base2d,hxsl__Globals);
vdynamic* h3d_shader_Base2d_getParamValue(h3d__shader__Base2d,int);
double h3d_shader_Base2d_getParamFloatValue(h3d__shader__Base2d,int);
hxsl__Shader h3d_shader_Base2d_clone(h3d__shader__Base2d);
void h3d_shader_BaseMesh_new(h3d__shader__BaseMesh);
h3d__Vector h3d_shader_BaseMesh_get_color(h3d__shader__BaseMesh);
h3d__Vector h3d_shader_BaseMesh_set_color(h3d__shader__BaseMesh,h3d__Vector);
double h3d_shader_BaseMesh_get_specularPower(h3d__shader__BaseMesh);
double h3d_shader_BaseMesh_set_specularPower(h3d__shader__BaseMesh,double);
double h3d_shader_BaseMesh_get_specularAmount(h3d__shader__BaseMesh);
double h3d_shader_BaseMesh_set_specularAmount(h3d__shader__BaseMesh,double);
h3d__Vector h3d_shader_BaseMesh_get_specularColor(h3d__shader__BaseMesh);
h3d__Vector h3d_shader_BaseMesh_set_specularColor(h3d__shader__BaseMesh,h3d__Vector);
void h3d_shader_BaseMesh_updateConstants(h3d__shader__BaseMesh,hxsl__Globals);
vdynamic* h3d_shader_BaseMesh_getParamValue(h3d__shader__BaseMesh,int);
double h3d_shader_BaseMesh_getParamFloatValue(h3d__shader__BaseMesh,int);
hxsl__Shader h3d_shader_BaseMesh_clone(h3d__shader__BaseMesh);
void h3d_shader_Blur_new(h3d__shader__Blur);
h3d__Matrix h3d_shader_Blur_get_cameraInverseViewProj(h3d__shader__Blur);
h3d__Matrix h3d_shader_Blur_set_cameraInverseViewProj(h3d__shader__Blur,h3d__Matrix);
h3d__mat__Texture h3d_shader_Blur_get_texture(h3d__shader__Blur);
h3d__mat__Texture h3d_shader_Blur_set_texture(h3d__shader__Blur,h3d__mat__Texture);
h3d__mat__Texture h3d_shader_Blur_get_depthTexture(h3d__shader__Blur);
h3d__mat__Texture h3d_shader_Blur_set_depthTexture(h3d__shader__Blur,h3d__mat__Texture);
int h3d_shader_Blur_get_Quality(h3d__shader__Blur);
int h3d_shader_Blur_set_Quality(h3d__shader__Blur,int);
bool h3d_shader_Blur_get_isDepth(h3d__shader__Blur);
bool h3d_shader_Blur_set_isDepth(h3d__shader__Blur,bool);
hl__types__ArrayBytes_Float h3d_shader_Blur_get_values(h3d__shader__Blur);
hl__types__ArrayBytes_Float h3d_shader_Blur_set_values(h3d__shader__Blur,hl__types__ArrayBytes_Float);
hl__types__ArrayBytes_Float h3d_shader_Blur_get_offsets(h3d__shader__Blur);
hl__types__ArrayBytes_Float h3d_shader_Blur_set_offsets(h3d__shader__Blur,hl__types__ArrayBytes_Float);
h3d__Vector h3d_shader_Blur_get_pixel(h3d__shader__Blur);
h3d__Vector h3d_shader_Blur_set_pixel(h3d__shader__Blur,h3d__Vector);
bool h3d_shader_Blur_get_hasFixedColor(h3d__shader__Blur);
bool h3d_shader_Blur_set_hasFixedColor(h3d__shader__Blur,bool);
bool h3d_shader_Blur_get_smoothFixedColor(h3d__shader__Blur);
bool h3d_shader_Blur_set_smoothFixedColor(h3d__shader__Blur,bool);
h3d__Vector h3d_shader_Blur_get_fixedColor(h3d__shader__Blur);
h3d__Vector h3d_shader_Blur_set_fixedColor(h3d__shader__Blur,h3d__Vector);
bool h3d_shader_Blur_get_isDepthDependant(h3d__shader__Blur);
bool h3d_shader_Blur_set_isDepthDependant(h3d__shader__Blur,bool);
bool h3d_shader_Blur_get_hasNormal(h3d__shader__Blur);
bool h3d_shader_Blur_set_hasNormal(h3d__shader__Blur,bool);
h3d__mat__Texture h3d_shader_Blur_get_normalTexture(h3d__shader__Blur);
h3d__mat__Texture h3d_shader_Blur_set_normalTexture(h3d__shader__Blur,h3d__mat__Texture);
bool h3d_shader_Blur_get_isCube(h3d__shader__Blur);
bool h3d_shader_Blur_set_isCube(h3d__shader__Blur,bool);
h3d__mat__Texture h3d_shader_Blur_get_cubeTexture(h3d__shader__Blur);
h3d__mat__Texture h3d_shader_Blur_set_cubeTexture(h3d__shader__Blur,h3d__mat__Texture);
h3d__Matrix h3d_shader_Blur_get_cubeDir(h3d__shader__Blur);
h3d__Matrix h3d_shader_Blur_set_cubeDir(h3d__shader__Blur,h3d__Matrix);
void h3d_shader_Blur_updateConstants(h3d__shader__Blur,hxsl__Globals);
vdynamic* h3d_shader_Blur_getParamValue(h3d__shader__Blur,int);
double h3d_shader_Blur_getParamFloatValue(h3d__shader__Blur,int);
hxsl__Shader h3d_shader_Blur_clone(h3d__shader__Blur);
void h3d_shader_ShaderBuffers_new(h3d__shader__ShaderBuffers,hxsl__RuntimeShaderData);
void h3d_shader_ShaderBuffers_grow(h3d__shader__ShaderBuffers,hxsl__RuntimeShaderData);
void h3d_shader_Buffers_new(h3d__shader__Buffers,hxsl__RuntimeShader);
void h3d_shader_Buffers_grow(h3d__shader__Buffers,hxsl__RuntimeShader);
void h3d_shader_ColorAdd_new(h3d__shader__ColorAdd,int*);
h3d__Vector h3d_shader_ColorAdd_get_color(h3d__shader__ColorAdd);
h3d__Vector h3d_shader_ColorAdd_set_color(h3d__shader__ColorAdd,h3d__Vector);
void h3d_shader_ColorAdd_updateConstants(h3d__shader__ColorAdd,hxsl__Globals);
vdynamic* h3d_shader_ColorAdd_getParamValue(h3d__shader__ColorAdd,int);
double h3d_shader_ColorAdd_getParamFloatValue(h3d__shader__ColorAdd,int);
hxsl__Shader h3d_shader_ColorAdd_clone(h3d__shader__ColorAdd);
void h3d_shader_ColorKey_new(h3d__shader__ColorKey,int*);
h3d__Vector h3d_shader_ColorKey_get_colorKey(h3d__shader__ColorKey);
h3d__Vector h3d_shader_ColorKey_set_colorKey(h3d__shader__ColorKey,h3d__Vector);
void h3d_shader_ColorKey_updateConstants(h3d__shader__ColorKey,hxsl__Globals);
vdynamic* h3d_shader_ColorKey_getParamValue(h3d__shader__ColorKey,int);
double h3d_shader_ColorKey_getParamFloatValue(h3d__shader__ColorKey,int);
hxsl__Shader h3d_shader_ColorKey_clone(h3d__shader__ColorKey);
void h3d_shader_ColorMatrix_new(h3d__shader__ColorMatrix,hl__types__ArrayBytes_Float);
h3d__Matrix h3d_shader_ColorMatrix_get_matrix(h3d__shader__ColorMatrix);
h3d__Matrix h3d_shader_ColorMatrix_set_matrix(h3d__shader__ColorMatrix,h3d__Matrix);
void h3d_shader_ColorMatrix_updateConstants(h3d__shader__ColorMatrix,hxsl__Globals);
vdynamic* h3d_shader_ColorMatrix_getParamValue(h3d__shader__ColorMatrix,int);
double h3d_shader_ColorMatrix_getParamFloatValue(h3d__shader__ColorMatrix,int);
hxsl__Shader h3d_shader_ColorMatrix_clone(h3d__shader__ColorMatrix);
void h3d_shader_DirShadow_new(h3d__shader__DirShadow);
bool h3d_shader_DirShadow_get_enable(h3d__shader__DirShadow);
bool h3d_shader_DirShadow_set_enable(h3d__shader__DirShadow,bool);
h3d__mat__Texture h3d_shader_DirShadow_get_shadowMap(h3d__shader__DirShadow);
h3d__mat__Texture h3d_shader_DirShadow_set_shadowMap(h3d__shader__DirShadow,h3d__mat__Texture);
venum* h3d_shader_DirShadow_get_shadowMapChannel(h3d__shader__DirShadow);
venum* h3d_shader_DirShadow_set_shadowMapChannel(h3d__shader__DirShadow,venum*);
h3d__Matrix h3d_shader_DirShadow_get_shadowProj(h3d__shader__DirShadow);
h3d__Matrix h3d_shader_DirShadow_set_shadowProj(h3d__shader__DirShadow,h3d__Matrix);
double h3d_shader_DirShadow_get_shadowPower(h3d__shader__DirShadow);
double h3d_shader_DirShadow_set_shadowPower(h3d__shader__DirShadow,double);
double h3d_shader_DirShadow_get_shadowBias(h3d__shader__DirShadow);
double h3d_shader_DirShadow_set_shadowBias(h3d__shader__DirShadow,double);
void h3d_shader_DirShadow_updateConstants(h3d__shader__DirShadow,hxsl__Globals);
vdynamic* h3d_shader_DirShadow_getParamValue(h3d__shader__DirShadow,int);
double h3d_shader_DirShadow_getParamFloatValue(h3d__shader__DirShadow,int);
hxsl__Shader h3d_shader_DirShadow_clone(h3d__shader__DirShadow);
void h3d_shader_LineShader_new(h3d__shader__LineShader,double*,double*);
double h3d_shader_LineShader_get_lengthScale(h3d__shader__LineShader);
double h3d_shader_LineShader_set_lengthScale(h3d__shader__LineShader,double);
double h3d_shader_LineShader_get_width(h3d__shader__LineShader);
double h3d_shader_LineShader_set_width(h3d__shader__LineShader,double);
void h3d_shader_LineShader_updateConstants(h3d__shader__LineShader,hxsl__Globals);
vdynamic* h3d_shader_LineShader_getParamValue(h3d__shader__LineShader,int);
double h3d_shader_LineShader_getParamFloatValue(h3d__shader__LineShader,int);
hxsl__Shader h3d_shader_LineShader_clone(h3d__shader__LineShader);
void h3d_shader_MinMaxShader_new(h3d__shader__MinMaxShader);
h3d__mat__Texture h3d_shader_MinMaxShader_get_texA(h3d__shader__MinMaxShader);
h3d__mat__Texture h3d_shader_MinMaxShader_set_texA(h3d__shader__MinMaxShader,h3d__mat__Texture);
h3d__mat__Texture h3d_shader_MinMaxShader_get_texB(h3d__shader__MinMaxShader);
h3d__mat__Texture h3d_shader_MinMaxShader_set_texB(h3d__shader__MinMaxShader,h3d__mat__Texture);
bool h3d_shader_MinMaxShader_get_isMax(h3d__shader__MinMaxShader);
bool h3d_shader_MinMaxShader_set_isMax(h3d__shader__MinMaxShader,bool);
void h3d_shader_MinMaxShader_updateConstants(h3d__shader__MinMaxShader,hxsl__Globals);
vdynamic* h3d_shader_MinMaxShader_getParamValue(h3d__shader__MinMaxShader,int);
double h3d_shader_MinMaxShader_getParamFloatValue(h3d__shader__MinMaxShader,int);
hxsl__Shader h3d_shader_MinMaxShader_clone(h3d__shader__MinMaxShader);
void h3d_shader_CubeMinMaxShader_new(h3d__shader__CubeMinMaxShader);
h3d__mat__Texture h3d_shader_CubeMinMaxShader_get_texA(h3d__shader__CubeMinMaxShader);
h3d__mat__Texture h3d_shader_CubeMinMaxShader_set_texA(h3d__shader__CubeMinMaxShader,h3d__mat__Texture);
h3d__mat__Texture h3d_shader_CubeMinMaxShader_get_texB(h3d__shader__CubeMinMaxShader);
h3d__mat__Texture h3d_shader_CubeMinMaxShader_set_texB(h3d__shader__CubeMinMaxShader,h3d__mat__Texture);
bool h3d_shader_CubeMinMaxShader_get_isMax(h3d__shader__CubeMinMaxShader);
bool h3d_shader_CubeMinMaxShader_set_isMax(h3d__shader__CubeMinMaxShader,bool);
h3d__Matrix h3d_shader_CubeMinMaxShader_get_mat(h3d__shader__CubeMinMaxShader);
h3d__Matrix h3d_shader_CubeMinMaxShader_set_mat(h3d__shader__CubeMinMaxShader,h3d__Matrix);
void h3d_shader_CubeMinMaxShader_updateConstants(h3d__shader__CubeMinMaxShader,hxsl__Globals);
vdynamic* h3d_shader_CubeMinMaxShader_getParamValue(h3d__shader__CubeMinMaxShader,int);
double h3d_shader_CubeMinMaxShader_getParamFloatValue(h3d__shader__CubeMinMaxShader,int);
hxsl__Shader h3d_shader_CubeMinMaxShader_clone(h3d__shader__CubeMinMaxShader);
void h3d_shader_NormalMap_new(h3d__shader__NormalMap,h3d__mat__Texture);
h3d__mat__Texture h3d_shader_NormalMap_get_texture(h3d__shader__NormalMap);
h3d__mat__Texture h3d_shader_NormalMap_set_texture(h3d__shader__NormalMap,h3d__mat__Texture);
void h3d_shader_NormalMap_updateConstants(h3d__shader__NormalMap,hxsl__Globals);
vdynamic* h3d_shader_NormalMap_getParamValue(h3d__shader__NormalMap,int);
double h3d_shader_NormalMap_getParamFloatValue(h3d__shader__NormalMap,int);
hxsl__Shader h3d_shader_NormalMap_clone(h3d__shader__NormalMap);
void h3d_shader_Shadow_new(h3d__shader__Shadow);
void h3d_shader_Shadow_updateConstants(h3d__shader__Shadow,hxsl__Globals);
vdynamic* h3d_shader_Shadow_getParamValue(h3d__shader__Shadow,int);
double h3d_shader_Shadow_getParamFloatValue(h3d__shader__Shadow,int);
void h3d_shader_SkinBase_new(h3d__shader__SkinBase);
int h3d_shader_SkinBase_get_MaxBones(h3d__shader__SkinBase);
int h3d_shader_SkinBase_set_MaxBones(h3d__shader__SkinBase,int);
hl__types__ArrayObj h3d_shader_SkinBase_get_bonesMatrixes(h3d__shader__SkinBase);
hl__types__ArrayObj h3d_shader_SkinBase_set_bonesMatrixes(h3d__shader__SkinBase,hl__types__ArrayObj);
void h3d_shader_SkinBase_updateConstants(h3d__shader__SkinBase,hxsl__Globals);
vdynamic* h3d_shader_SkinBase_getParamValue(h3d__shader__SkinBase,int);
double h3d_shader_SkinBase_getParamFloatValue(h3d__shader__SkinBase,int);
hxsl__Shader h3d_shader_SkinBase_clone(h3d__shader__SkinBase);
void h3d_shader_Skin_new(h3d__shader__Skin);
void h3d_shader_Skin_updateConstants(h3d__shader__Skin,hxsl__Globals);
vdynamic* h3d_shader_Skin_getParamValue(h3d__shader__Skin,int);
double h3d_shader_Skin_getParamFloatValue(h3d__shader__Skin,int);
hxsl__Shader h3d_shader_Skin_clone(h3d__shader__Skin);
void h3d_shader_SkinTangent_new(h3d__shader__SkinTangent);
void h3d_shader_SkinTangent_updateConstants(h3d__shader__SkinTangent,hxsl__Globals);
vdynamic* h3d_shader_SkinTangent_getParamValue(h3d__shader__SkinTangent,int);
double h3d_shader_SkinTangent_getParamFloatValue(h3d__shader__SkinTangent,int);
hxsl__Shader h3d_shader_SkinTangent_clone(h3d__shader__SkinTangent);
void h3d_shader_SpecularTexture_new(h3d__shader__SpecularTexture,h3d__mat__Texture);
h3d__mat__Texture h3d_shader_SpecularTexture_get_texture(h3d__shader__SpecularTexture);
h3d__mat__Texture h3d_shader_SpecularTexture_set_texture(h3d__shader__SpecularTexture,h3d__mat__Texture);
void h3d_shader_SpecularTexture_updateConstants(h3d__shader__SpecularTexture,hxsl__Globals);
vdynamic* h3d_shader_SpecularTexture_getParamValue(h3d__shader__SpecularTexture,int);
double h3d_shader_SpecularTexture_getParamFloatValue(h3d__shader__SpecularTexture,int);
hxsl__Shader h3d_shader_SpecularTexture_clone(h3d__shader__SpecularTexture);
void h3d_shader_Texture_new(h3d__shader__Texture,h3d__mat__Texture);
bool h3d_shader_Texture_get_additive(h3d__shader__Texture);
bool h3d_shader_Texture_set_additive(h3d__shader__Texture,bool);
bool h3d_shader_Texture_get_killAlpha(h3d__shader__Texture);
bool h3d_shader_Texture_set_killAlpha(h3d__shader__Texture,bool);
bool h3d_shader_Texture_get_specularAlpha(h3d__shader__Texture);
bool h3d_shader_Texture_set_specularAlpha(h3d__shader__Texture,bool);
double h3d_shader_Texture_get_killAlphaThreshold(h3d__shader__Texture);
double h3d_shader_Texture_set_killAlphaThreshold(h3d__shader__Texture,double);
h3d__mat__Texture h3d_shader_Texture_get_texture(h3d__shader__Texture);
h3d__mat__Texture h3d_shader_Texture_set_texture(h3d__shader__Texture,h3d__mat__Texture);
void h3d_shader_Texture_updateConstants(h3d__shader__Texture,hxsl__Globals);
vdynamic* h3d_shader_Texture_getParamValue(h3d__shader__Texture,int);
double h3d_shader_Texture_getParamFloatValue(h3d__shader__Texture,int);
hxsl__Shader h3d_shader_Texture_clone(h3d__shader__Texture);
void h3d_shader_UVDelta_new(h3d__shader__UVDelta,double*,double*,double*,double*);
h3d__Vector h3d_shader_UVDelta_get_uvDelta(h3d__shader__UVDelta);
h3d__Vector h3d_shader_UVDelta_set_uvDelta(h3d__shader__UVDelta,h3d__Vector);
h3d__Vector h3d_shader_UVDelta_get_uvScale(h3d__shader__UVDelta);
h3d__Vector h3d_shader_UVDelta_set_uvScale(h3d__shader__UVDelta,h3d__Vector);
void h3d_shader_UVDelta_updateConstants(h3d__shader__UVDelta,hxsl__Globals);
vdynamic* h3d_shader_UVDelta_getParamValue(h3d__shader__UVDelta,int);
double h3d_shader_UVDelta_getParamFloatValue(h3d__shader__UVDelta,int);
hxsl__Shader h3d_shader_UVDelta_clone(h3d__shader__UVDelta);
void h3d_shader_VertexColorAlpha_new(h3d__shader__VertexColorAlpha);
bool h3d_shader_VertexColorAlpha_get_additive(h3d__shader__VertexColorAlpha);
bool h3d_shader_VertexColorAlpha_set_additive(h3d__shader__VertexColorAlpha,bool);
void h3d_shader_VertexColorAlpha_updateConstants(h3d__shader__VertexColorAlpha,hxsl__Globals);
vdynamic* h3d_shader_VertexColorAlpha_getParamValue(h3d__shader__VertexColorAlpha,int);
double h3d_shader_VertexColorAlpha_getParamFloatValue(h3d__shader__VertexColorAlpha,int);
hxsl__Shader h3d_shader_VertexColorAlpha_clone(h3d__shader__VertexColorAlpha);
void h3d_shader_VolumeDecal_new(h3d__shader__VolumeDecal,double,double);
h3d__Vector h3d_shader_VolumeDecal_get_scale(h3d__shader__VolumeDecal);
h3d__Vector h3d_shader_VolumeDecal_set_scale(h3d__shader__VolumeDecal,h3d__Vector);
h3d__Vector h3d_shader_VolumeDecal_get_normal(h3d__shader__VolumeDecal);
h3d__Vector h3d_shader_VolumeDecal_set_normal(h3d__shader__VolumeDecal,h3d__Vector);
h3d__Vector h3d_shader_VolumeDecal_get_tangent(h3d__shader__VolumeDecal);
h3d__Vector h3d_shader_VolumeDecal_set_tangent(h3d__shader__VolumeDecal,h3d__Vector);
bool h3d_shader_VolumeDecal_get_isCentered(h3d__shader__VolumeDecal);
bool h3d_shader_VolumeDecal_set_isCentered(h3d__shader__VolumeDecal,bool);
void h3d_shader_VolumeDecal_updateConstants(h3d__shader__VolumeDecal,hxsl__Globals);
vdynamic* h3d_shader_VolumeDecal_getParamValue(h3d__shader__VolumeDecal,int);
double h3d_shader_VolumeDecal_getParamFloatValue(h3d__shader__VolumeDecal,int);
hxsl__Shader h3d_shader_VolumeDecal_clone(h3d__shader__VolumeDecal);
hl__types__ArrayObj haxe_CallStack_exceptionStack(void);
String haxe_CallStack_toString(hl__types__ArrayObj);
void haxe_CallStack_itemToString(StringBuf,venum*);
hl__types__ArrayObj haxe_CallStack_makeStack(varray*);
double haxe_EntryPoint_processEvents(void);
void haxe_EntryPoint_run(void);
void haxe__Int64____Int64_new(haxe___Int64_____Int64,int,int);
String haxe_Log_formatOutput(vdynamic*,vvirtual*);
void haxe_Log_trace(vdynamic*,vvirtual*);
void haxe_MainEvent_new(haxe__MainEvent,vclosure*,int);
void haxe_MainEvent_delay(haxe__MainEvent,vdynamic*);
void haxe_MainEvent_stop(haxe__MainEvent);
bool haxe_MainLoop_hasEvents(void);
haxe__MainEvent haxe_MainLoop_add(vclosure*,int*);
void haxe_MainLoop_sortEvents(void);
double haxe_MainLoop_tick(void);
haxe__io__Bytes haxe_Resource_getBytes(String);
String haxe_Serializer_run(vdynamic*);
void haxe_Serializer_new(haxe__Serializer);
String haxe_Serializer_toString(haxe__Serializer);
vbyte* haxe_Serializer___string(haxe__Serializer);
void haxe_Serializer_serializeString(haxe__Serializer,String);
bool haxe_Serializer_serializeRef(haxe__Serializer,vdynamic*);
void haxe_Serializer_serializeFields(haxe__Serializer,vdynamic*);
void haxe_Serializer_serialize(haxe__Serializer,vdynamic*);
void fun$3091(venum*);
haxe__Timer haxe_Timer_delay(vclosure*,int);
void fun$3092(venum*);
void haxe_Timer_new(haxe__Timer,int);
void haxe_Timer_stop(haxe__Timer);
void haxe_Timer_run(haxe__Timer);
void haxe__Unserializer_DefaultResolver_new(haxe___Unserializer__DefaultResolver);
hl__Class haxe__Unserializer_DefaultResolver_resolveClass(haxe___Unserializer__DefaultResolver,String);
hl__BaseType haxe__Unserializer_DefaultResolver_resolveEnum(haxe___Unserializer__DefaultResolver,String);
hl__types__ArrayBytes_Int haxe_Unserializer_initCodes(void);
vdynamic* haxe_Unserializer_run(String);
void haxe_Unserializer_new(haxe__Unserializer,String);
int haxe_Unserializer_readDigits(haxe__Unserializer);
double haxe_Unserializer_readFloat(haxe__Unserializer);
void haxe_Unserializer_unserializeObject(haxe__Unserializer,vdynamic*);
vdynamic* haxe_Unserializer_unserializeEnum(haxe__Unserializer,hl__BaseType,String);
vdynamic* haxe_Unserializer_unserialize(haxe__Unserializer);
haxe__io__Bytes haxe_io_Bytes_alloc(int);
haxe__io__Bytes haxe_io_Bytes_ofString(String,venum*);
void haxe_io_Bytes_new(haxe__io__Bytes,vbyte*,int);
int haxe_io_Bytes_get(haxe__io__Bytes,int);
void haxe_io_Bytes_set(haxe__io__Bytes,int,int);
void haxe_io_Bytes_blit(haxe__io__Bytes,int,haxe__io__Bytes,int,int);
void haxe_io_Bytes_fill(haxe__io__Bytes,int,int,int);
haxe__io__Bytes haxe_io_Bytes_sub(haxe__io__Bytes,int,int);
double haxe_io_Bytes_getDouble(haxe__io__Bytes,int);
double haxe_io_Bytes_getFloat(haxe__io__Bytes,int);
void haxe_io_Bytes_setFloat(haxe__io__Bytes,int,double);
int haxe_io_Bytes_getInt32(haxe__io__Bytes,int);
haxe___Int64_____Int64 haxe_io_Bytes_getInt64(haxe__io__Bytes,int);
void haxe_io_Bytes_setInt32(haxe__io__Bytes,int,int);
String haxe_io_Bytes_getString(haxe__io__Bytes,int,int,venum*);
String haxe_io_Bytes_toString(haxe__io__Bytes);
vbyte* haxe_io_Bytes___string(haxe__io__Bytes);
String haxe_io_Bytes_toHex(haxe__io__Bytes);
String haxe_crypto_Base64_encode(haxe__io__Bytes,bool*);
haxe__io__Bytes haxe_crypto_Base64_decode(String,bool*);
void haxe_crypto_BaseCode_new(haxe__crypto__BaseCode,haxe__io__Bytes);
haxe__io__Bytes haxe_crypto_BaseCode_encodeBytes(haxe__crypto__BaseCode,haxe__io__Bytes);
void haxe_crypto_BaseCode_initTable(haxe__crypto__BaseCode);
haxe__io__Bytes haxe_crypto_BaseCode_decodeBytes(haxe__crypto__BaseCode,haxe__io__Bytes);
void haxe_crypto_Crc32_new(haxe__crypto__Crc32);
void haxe_crypto_Crc32_byte(haxe__crypto__Crc32,int);
void haxe_crypto_Crc32_update(haxe__crypto__Crc32,haxe__io__Bytes,int,int);
int haxe_crypto_Crc32_get(haxe__crypto__Crc32);
String haxe_crypto_Md5_encode(String);
haxe__io__Bytes haxe_crypto_Sha1_make(haxe__io__Bytes);
void haxe_ds_ArraySort_sort(hl__types__ArrayDyn,vclosure*);
void haxe_ds_ArraySort_rec(hl__types__ArrayDyn,vclosure*,int,int);
void haxe_ds_ArraySort_doMerge(hl__types__ArrayDyn,vclosure*,int,int,int,int,int);
void haxe_ds_ArraySort_rotate(hl__types__ArrayDyn,vclosure*,int,int,int);
int haxe_ds_ArraySort_gcd(int,int);
int haxe_ds_ArraySort_upper(hl__types__ArrayDyn,vclosure*,int,int,int);
int haxe_ds_ArraySort_lower(hl__types__ArrayDyn,vclosure*,int,int,int);
void haxe_ds_ArraySort_swap(hl__types__ArrayDyn,int,int);
void haxe_ds_BalancedTree_new(haxe__ds__BalancedTree);
void haxe_ds_BalancedTree_set(haxe__ds__BalancedTree,vdynamic*,vdynamic*);
vdynamic* haxe_ds_BalancedTree_get(haxe__ds__BalancedTree,vdynamic*);
bool haxe_ds_BalancedTree_exists(haxe__ds__BalancedTree,vdynamic*);
vdynamic* haxe_ds_BalancedTree_iterator(haxe__ds__BalancedTree);
haxe__ds__TreeNode haxe_ds_BalancedTree_setLoop(haxe__ds__BalancedTree,vdynamic*,vdynamic*,haxe__ds__TreeNode);
void haxe_ds_BalancedTree_iteratorLoop(haxe__ds__BalancedTree,haxe__ds__TreeNode,hl__types__ArrayDyn);
haxe__ds__TreeNode haxe_ds_BalancedTree_balance(haxe__ds__BalancedTree,haxe__ds__TreeNode,vdynamic*,vdynamic*,haxe__ds__TreeNode);
int haxe_ds_BalancedTree_compare(haxe__ds__BalancedTree,vdynamic*,vdynamic*);
void haxe_ds_TreeNode_new(haxe__ds__TreeNode,haxe__ds__TreeNode,vdynamic*,vdynamic*,haxe__ds__TreeNode,int*);
void haxe_ds_EnumValueMap_new(haxe__ds__EnumValueMap);
int haxe_ds_EnumValueMap_compare(haxe__ds__EnumValueMap,vdynamic*,vdynamic*);
int haxe_ds_EnumValueMap_compareArgs(haxe__ds__EnumValueMap,hl__types__ArrayDyn,hl__types__ArrayDyn);
int haxe_ds_EnumValueMap_compareArg(haxe__ds__EnumValueMap,vdynamic*,vdynamic*);
void haxe_ds_IntMap_new(haxe__ds__IntMap);
void haxe_ds_IntMap_set(haxe__ds__IntMap,int,vdynamic*);
vdynamic* haxe_ds_IntMap_get(haxe__ds__IntMap,int);
bool haxe_ds_IntMap_exists(haxe__ds__IntMap,int);
bool haxe_ds_IntMap_remove(haxe__ds__IntMap,int);
vdynamic* haxe_ds_IntMap_keys(haxe__ds__IntMap);
vdynamic* haxe_ds_IntMap_iterator(haxe__ds__IntMap);
void haxe_ds_List_new(haxe__ds__List);
void haxe_ds_List_add(haxe__ds__List,vdynamic*);
void haxe_ds_List_push(haxe__ds__List,vdynamic*);
bool haxe_ds_List_remove(haxe__ds__List,vdynamic*);
void haxe_ds__List_ListNode_new(haxe__ds___List__ListNode,vdynamic*,haxe__ds___List__ListNode);
void haxe_ds_ObjectMap_new(haxe__ds__ObjectMap);
void haxe_ds_ObjectMap_set(haxe__ds__ObjectMap,vdynamic*,vdynamic*);
vdynamic* haxe_ds_ObjectMap_get(haxe__ds__ObjectMap,vdynamic*);
bool haxe_ds_ObjectMap_exists(haxe__ds__ObjectMap,vdynamic*);
bool haxe_ds_ObjectMap_remove(haxe__ds__ObjectMap,vdynamic*);
vdynamic* haxe_ds_ObjectMap_keys(haxe__ds__ObjectMap);
void haxe_ds__StringMap_StringMapKeysIterator_new(haxe__ds___StringMap__StringMapKeysIterator,hl_bytes_map*);
bool haxe_ds__StringMap_StringMapKeysIterator_hasNext(haxe__ds___StringMap__StringMapKeysIterator);
String haxe_ds__StringMap_StringMapKeysIterator_next(haxe__ds___StringMap__StringMapKeysIterator);
void haxe_ds_StringMap_new(haxe__ds__StringMap);
void haxe_ds_StringMap_set(haxe__ds__StringMap,String,vdynamic*);
vdynamic* haxe_ds_StringMap_get(haxe__ds__StringMap,String);
bool haxe_ds_StringMap_exists(haxe__ds__StringMap,String);
bool haxe_ds_StringMap_remove(haxe__ds__StringMap,String);
vdynamic* haxe_ds_StringMap_keys(haxe__ds__StringMap);
vdynamic* haxe_ds_StringMap_iterator(haxe__ds__StringMap);
void haxe_format_JsonParser_new(haxe__format__JsonParser,String);
vdynamic* haxe_format_JsonParser_doParse(haxe__format__JsonParser);
vdynamic* haxe_format_JsonParser_parseRec(haxe__format__JsonParser);
String haxe_format_JsonParser_parseString(haxe__format__JsonParser);
void haxe_format_JsonParser_invalidChar(haxe__format__JsonParser);
void haxe_format_JsonParser_invalidNumber(haxe__format__JsonParser,int);
String haxe_format_JsonPrinter_print(vdynamic*,vclosure*,String);
void haxe_format_JsonPrinter_new(haxe__format__JsonPrinter,vclosure*,String);
void haxe_format_JsonPrinter_write(haxe__format__JsonPrinter,vdynamic*,vdynamic*);
void haxe_format_JsonPrinter_classString(haxe__format__JsonPrinter,vdynamic*);
void haxe_format_JsonPrinter_fieldsString(haxe__format__JsonPrinter,vdynamic*,hl__types__ArrayObj);
void haxe_format_JsonPrinter_quote(haxe__format__JsonPrinter,String);
void haxe_io_BytesBuffer_new(haxe__io__BytesBuffer);
void haxe_io_BytesBuffer___expand(haxe__io__BytesBuffer,int);
void haxe_io_BytesBuffer___add(haxe__io__BytesBuffer,vbyte*,int,int);
haxe__io__Bytes haxe_io_BytesBuffer_getBytes(haxe__io__BytesBuffer);
void haxe_io_BytesDataImpl_new(haxe__io__BytesDataImpl,vbyte*,int);
int haxe_io_Input_readByte(haxe__io__Input);
int haxe_io_Input_readBytes(haxe__io__Input,haxe__io__Bytes,int,int);
void haxe_io_Input_close(haxe__io__Input);
bool haxe_io_Input_set_bigEndian(haxe__io__Input,bool);
haxe__io__Bytes haxe_io_Input_readAll(haxe__io__Input,vdynamic*);
void haxe_io_Input_readFullBytes(haxe__io__Input,haxe__io__Bytes,int,int);
haxe__io__Bytes haxe_io_Input_read(haxe__io__Input,int);
String haxe_io_Input_readUntil(haxe__io__Input,int);
double haxe_io_Input_readFloat(haxe__io__Input);
int haxe_io_Input_readInt16(haxe__io__Input);
int haxe_io_Input_readUInt16(haxe__io__Input);
int haxe_io_Input_readUInt24(haxe__io__Input);
int haxe_io_Input_readInt32(haxe__io__Input);
String haxe_io_Input_readString(haxe__io__Input,int,venum*);
void haxe_io_BytesInput_new(haxe__io__BytesInput,haxe__io__Bytes,vdynamic*,vdynamic*);
int haxe_io_BytesInput_set_position(haxe__io__BytesInput,int);
int haxe_io_BytesInput_readByte(haxe__io__BytesInput);
int haxe_io_BytesInput_readBytes(haxe__io__BytesInput,haxe__io__Bytes,int,int);
void haxe_io_Output_writeByte(haxe__io__Output,int);
int haxe_io_Output_writeBytes(haxe__io__Output,haxe__io__Bytes,int,int);
void haxe_io_Output_flush(haxe__io__Output);
void haxe_io_Output_close(haxe__io__Output);
bool haxe_io_Output_set_bigEndian(haxe__io__Output,bool);
void haxe_io_Output_write(haxe__io__Output,haxe__io__Bytes);
void haxe_io_Output_writeFullBytes(haxe__io__Output,haxe__io__Bytes,int,int);
void haxe_io_Output_writeFloat(haxe__io__Output,double);
void haxe_io_Output_writeInt16(haxe__io__Output,int);
void haxe_io_Output_writeUInt16(haxe__io__Output,int);
void haxe_io_Output_writeInt32(haxe__io__Output,int);
void haxe_io_Output_writeString(haxe__io__Output,String,venum*);
void haxe_io_BytesOutput_new(haxe__io__BytesOutput);
void haxe_io_BytesOutput_writeByte(haxe__io__BytesOutput,int);
int haxe_io_BytesOutput_writeBytes(haxe__io__BytesOutput,haxe__io__Bytes,int,int);
haxe__io__Bytes haxe_io_BytesOutput_getBytes(haxe__io__BytesOutput);
void haxe_io_Eof_new(haxe__io__Eof);
String haxe_io_Eof_toString(haxe__io__Eof);
vbyte* haxe_io_Eof___string(haxe__io__Eof);
float haxe_io_FPHelper_i32ToFloat(int);
int haxe_io_FPHelper_floatToI32(float);
String haxe_io_Path_directory(String);
String haxe_io_Path_withExtension(String,String);
bool fun$3158(String);
bool fun$3159(vclosure*,vdynamic*);
String haxe_io_Path_join(hl__types__ArrayObj);
String haxe_io_Path_normalize(String);
String haxe_io_Path_addTrailingSlash(String);
String haxe_io_Path_removeTrailingSlashes(String);
bool haxe_io_Path_isAbsolute(String);
void haxe_io_Path_new(haxe__io__Path,String);
String haxe_io_Path_toString(haxe__io__Path);
vbyte* haxe_io_Path___string(haxe__io__Path);
Xml haxe_xml__Access_NodeAccess_Impl__resolve(Xml,String);
String haxe_xml__Access_AttribAccess_Impl__resolve(Xml,String);
bool haxe_xml__Access_HasNodeAccess_Impl__resolve(Xml,String);
String haxe_xml__Access_Access_Impl__get_innerData(Xml);
void haxe_xml_XmlParserException_new(haxe__xml__XmlParserException,String,String,int);
String haxe_xml_XmlParserException_toString(haxe__xml__XmlParserException);
vbyte* haxe_xml_XmlParserException___string(haxe__xml__XmlParserException);
Xml haxe_xml_Parser_parse(String,bool*);
int haxe_xml_Parser_doParse(String,bool,int*,Xml);
String haxe_xml_Printer_print(Xml,vdynamic*);
void haxe_xml_Printer_new(haxe__xml__Printer,bool);
void haxe_xml_Printer_writeNode(haxe__xml__Printer,Xml,String);
bool haxe_xml_Printer_hasChildren(haxe__xml__Printer,Xml);
haxe__io__Bytes haxe_zip_Compress_run(haxe__io__Bytes,int);
void haxe_zip_Compress_new(haxe__zip__Compress,int);
vvirtual* haxe_zip_Compress_execute(haxe__zip__Compress,haxe__io__Bytes,int,haxe__io__Bytes,int);
void haxe_zip_Compress_setFlushMode(haxe__zip__Compress,venum*);
void haxe_zip_Compress_close(haxe__zip__Compress);
haxe__io__Bytes haxe_zip_Uncompress_run(haxe__io__Bytes,vdynamic*);
void haxe_zip_Uncompress_new(haxe__zip__Uncompress,vdynamic*);
vvirtual* haxe_zip_Uncompress_execute(haxe__zip__Uncompress,haxe__io__Bytes,int,haxe__io__Bytes,int);
void haxe_zip_Uncompress_setFlushMode(haxe__zip__Uncompress,venum*);
void haxe_zip_Uncompress_close(haxe__zip__Uncompress);
bool hl_BaseType_check(hl__BaseType,vdynamic*);
void hl_Mikktspace_new(hl__Mikktspace);
void hl_Mikktspace_compute(hl__Mikktspace,double*);
void hl_NativeArrayIterator_new(hl__NativeArrayIterator,varray*);
bool hl_NativeArrayIterator_hasNext(hl__NativeArrayIterator);
vdynamic* hl_NativeArrayIterator_next(hl__NativeArrayIterator);
void hl_NativeArrayIterator_Dynamic_new(hl__NativeArrayIterator_Dynamic,varray*);
bool hl_NativeArrayIterator_Dynamic_hasNext(hl__NativeArrayIterator_Dynamic);
vdynamic* hl_NativeArrayIterator_Dynamic_next(hl__NativeArrayIterator_Dynamic);
void hl_NativeArrayIterator_Int_new(hl__NativeArrayIterator_Int,varray*);
bool hl_NativeArrayIterator_Int_hasNext(hl__NativeArrayIterator_Int);
int hl_NativeArrayIterator_Int_next(hl__NativeArrayIterator_Int);
ui_sentinel* hl__UI_Sentinel_Impl___new(double,vclosure*);
bool hl__UI_Sentinel_Impl__get_pause(ui_sentinel*);
bool hl__UI_Sentinel_Impl__set_pause(ui_sentinel*,bool);
void hl__UI_Sentinel_Impl__tick(ui_sentinel*);
void hl_Window_destroy(hl__Window);
void fun$3215(hl__Button);
void hl_Button_new(hl__Button,hl__Window,String);
void hl_Button_onClick(hl__Button);
void hl_WinLog_new(hl__WinLog,String,int,int);
void hl_WinLog_setTextContent(hl__WinLog,String,bool*);
String hl_UI_loadFile(vvirtual*);
String hl_UI_saveFile(vvirtual*);
String hl_UI_chooseFile(bool,vvirtual*);
vdynamic* hl_types_ArrayAccess_getDyn(hl__types__ArrayAccess,int);
void hl_types_ArrayAccess_setDyn(hl__types__ArrayAccess,int,vdynamic*);
void hl_types_ArrayAccess_blit(hl__types__ArrayAccess,int,hl__types__ArrayAccess,int,int);
hl__types__ArrayBytes_Int hl_types_ArrayBase_allocI32(vbyte*,int);
hl__types__ArrayBytes_hl_UI16 hl_types_ArrayBase_allocUI16(vbyte*,int);
hl__types__ArrayBytes_Single hl_types_ArrayBase_allocF32(vbyte*,int);
hl__types__ArrayBytes_Float hl_types_ArrayBase_allocF64(vbyte*,int);
int hl_types_ArrayBase_pushDyn(hl__types__ArrayBase,vdynamic*);
vdynamic* hl_types_ArrayBase_popDyn(hl__types__ArrayBase);
vdynamic* hl_types_ArrayBase_shiftDyn(hl__types__ArrayBase);
void hl_types_ArrayBase_unshiftDyn(hl__types__ArrayBase,vdynamic*);
void hl_types_ArrayBase_insertDyn(hl__types__ArrayBase,int,vdynamic*);
bool hl_types_ArrayBase_removeDyn(hl__types__ArrayBase,vdynamic*);
void hl_types_ArrayBase_sortDyn(hl__types__ArrayBase,vclosure*);
hl__types__ArrayBase hl_types_ArrayBase_slice(hl__types__ArrayBase,int,vdynamic*);
hl__types__ArrayBase hl_types_ArrayBase_splice(hl__types__ArrayBase,int,int);
String hl_types_ArrayBase_join(hl__types__ArrayBase,String);
void hl_types_ArrayBase_reverse(hl__types__ArrayBase);
void hl_types_ArrayBase_resize(hl__types__ArrayBase,int);
String hl_types_ArrayBase_toString(hl__types__ArrayBase);
vbyte* hl_types_ArrayBase___string(hl__types__ArrayBase);
vdynamic* hl_types_ArrayBase___cast(hl__types__ArrayBase,hl_type*);
bool hl_types_ArrayBase_isArrayObj(hl__types__ArrayBase);
void hl_types_ArrayBytes_Float_new(hl__types__ArrayBytes_Float);
hl__types__ArrayBytes_Float hl_types_ArrayBytes_Float_concat(hl__types__ArrayBytes_Float,hl__types__ArrayBytes_Float);
String hl_types_ArrayBytes_Float_join(hl__types__ArrayBytes_Float,String);
vdynamic* hl_types_ArrayBytes_Float_pop(hl__types__ArrayBytes_Float);
int hl_types_ArrayBytes_Float_push(hl__types__ArrayBytes_Float,double);
void hl_types_ArrayBytes_Float_reverse(hl__types__ArrayBytes_Float);
vdynamic* hl_types_ArrayBytes_Float_shift(hl__types__ArrayBytes_Float);
void hl_types_ArrayBytes_Float_blit(hl__types__ArrayBytes_Float,int,hl__types__ArrayAccess,int,int);
hl__types__ArrayBase hl_types_ArrayBytes_Float_slice(hl__types__ArrayBytes_Float,int,vdynamic*);
int fun$3226(vclosure*,int,int);
void hl_types_ArrayBytes_Float_sort(hl__types__ArrayBytes_Float,vclosure*);
hl__types__ArrayBase hl_types_ArrayBytes_Float_splice(hl__types__ArrayBytes_Float,int,int);
String hl_types_ArrayBytes_Float_toString(hl__types__ArrayBytes_Float);
void hl_types_ArrayBytes_Float_unshift(hl__types__ArrayBytes_Float,double);
void hl_types_ArrayBytes_Float_insert(hl__types__ArrayBytes_Float,int,double);
bool hl_types_ArrayBytes_Float_remove(hl__types__ArrayBytes_Float,double);
int hl_types_ArrayBytes_Float_indexOf(hl__types__ArrayBytes_Float,double,vdynamic*);
int hl_types_ArrayBytes_Float_lastIndexOf(hl__types__ArrayBytes_Float,double,vdynamic*);
hl__types__ArrayBytes_Float hl_types_ArrayBytes_Float_copy(hl__types__ArrayBytes_Float);
vdynamic* hl_types_ArrayBytes_Float_iterator(hl__types__ArrayBytes_Float);
hl__types__ArrayDyn hl_types_ArrayBytes_Float_map(hl__types__ArrayBytes_Float,vclosure*);
hl__types__ArrayBytes_Float hl_types_ArrayBytes_Float_filter(hl__types__ArrayBytes_Float,vclosure*);
void hl_types_ArrayBytes_Float_resize(hl__types__ArrayBytes_Float,int);
vdynamic* hl_types_ArrayBytes_Float_getDyn(hl__types__ArrayBytes_Float,int);
void hl_types_ArrayBytes_Float_setDyn(hl__types__ArrayBytes_Float,int,vdynamic*);
int hl_types_ArrayBytes_Float_pushDyn(hl__types__ArrayBytes_Float,vdynamic*);
vdynamic* hl_types_ArrayBytes_Float_popDyn(hl__types__ArrayBytes_Float);
vdynamic* hl_types_ArrayBytes_Float_shiftDyn(hl__types__ArrayBytes_Float);
void hl_types_ArrayBytes_Float_unshiftDyn(hl__types__ArrayBytes_Float,vdynamic*);
void hl_types_ArrayBytes_Float_insertDyn(hl__types__ArrayBytes_Float,int,vdynamic*);
bool hl_types_ArrayBytes_Float_removeDyn(hl__types__ArrayBytes_Float,vdynamic*);
int fun$3230(vclosure*,double,double);
void hl_types_ArrayBytes_Float_sortDyn(hl__types__ArrayBytes_Float,vclosure*);
void hl_types_ArrayBytes_Float___expand(hl__types__ArrayBytes_Float,int);
void hl_types_ArrayBytes_Int_new(hl__types__ArrayBytes_Int);
hl__types__ArrayBytes_Int hl_types_ArrayBytes_Int_concat(hl__types__ArrayBytes_Int,hl__types__ArrayBytes_Int);
String hl_types_ArrayBytes_Int_join(hl__types__ArrayBytes_Int,String);
vdynamic* hl_types_ArrayBytes_Int_pop(hl__types__ArrayBytes_Int);
int hl_types_ArrayBytes_Int_push(hl__types__ArrayBytes_Int,int);
void hl_types_ArrayBytes_Int_reverse(hl__types__ArrayBytes_Int);
vdynamic* hl_types_ArrayBytes_Int_shift(hl__types__ArrayBytes_Int);
void hl_types_ArrayBytes_Int_blit(hl__types__ArrayBytes_Int,int,hl__types__ArrayAccess,int,int);
hl__types__ArrayBase hl_types_ArrayBytes_Int_slice(hl__types__ArrayBytes_Int,int,vdynamic*);
int fun$3231(vclosure*,double,double);
void hl_types_ArrayBytes_Int_sort(hl__types__ArrayBytes_Int,vclosure*);
hl__types__ArrayBase hl_types_ArrayBytes_Int_splice(hl__types__ArrayBytes_Int,int,int);
String hl_types_ArrayBytes_Int_toString(hl__types__ArrayBytes_Int);
void hl_types_ArrayBytes_Int_unshift(hl__types__ArrayBytes_Int,int);
void hl_types_ArrayBytes_Int_insert(hl__types__ArrayBytes_Int,int,int);
bool hl_types_ArrayBytes_Int_remove(hl__types__ArrayBytes_Int,int);
int hl_types_ArrayBytes_Int_indexOf(hl__types__ArrayBytes_Int,int,vdynamic*);
int hl_types_ArrayBytes_Int_lastIndexOf(hl__types__ArrayBytes_Int,int,vdynamic*);
hl__types__ArrayBytes_Int hl_types_ArrayBytes_Int_copy(hl__types__ArrayBytes_Int);
vdynamic* hl_types_ArrayBytes_Int_iterator(hl__types__ArrayBytes_Int);
hl__types__ArrayDyn hl_types_ArrayBytes_Int_map(hl__types__ArrayBytes_Int,vclosure*);
hl__types__ArrayBytes_Int hl_types_ArrayBytes_Int_filter(hl__types__ArrayBytes_Int,vclosure*);
void hl_types_ArrayBytes_Int_resize(hl__types__ArrayBytes_Int,int);
vdynamic* hl_types_ArrayBytes_Int_getDyn(hl__types__ArrayBytes_Int,int);
void hl_types_ArrayBytes_Int_setDyn(hl__types__ArrayBytes_Int,int,vdynamic*);
int hl_types_ArrayBytes_Int_pushDyn(hl__types__ArrayBytes_Int,vdynamic*);
vdynamic* hl_types_ArrayBytes_Int_popDyn(hl__types__ArrayBytes_Int);
vdynamic* hl_types_ArrayBytes_Int_shiftDyn(hl__types__ArrayBytes_Int);
void hl_types_ArrayBytes_Int_unshiftDyn(hl__types__ArrayBytes_Int,vdynamic*);
void hl_types_ArrayBytes_Int_insertDyn(hl__types__ArrayBytes_Int,int,vdynamic*);
bool hl_types_ArrayBytes_Int_removeDyn(hl__types__ArrayBytes_Int,vdynamic*);
int fun$3235(vclosure*,int,int);
void hl_types_ArrayBytes_Int_sortDyn(hl__types__ArrayBytes_Int,vclosure*);
void hl_types_ArrayBytes_Int___expand(hl__types__ArrayBytes_Int,int);
void hl_types_ArrayBytes_Single_new(hl__types__ArrayBytes_Single);
hl__types__ArrayBytes_Single hl_types_ArrayBytes_Single_concat(hl__types__ArrayBytes_Single,hl__types__ArrayBytes_Single);
String hl_types_ArrayBytes_Single_join(hl__types__ArrayBytes_Single,String);
vdynamic* hl_types_ArrayBytes_Single_pop(hl__types__ArrayBytes_Single);
int hl_types_ArrayBytes_Single_push(hl__types__ArrayBytes_Single,float);
void hl_types_ArrayBytes_Single_reverse(hl__types__ArrayBytes_Single);
vdynamic* hl_types_ArrayBytes_Single_shift(hl__types__ArrayBytes_Single);
void hl_types_ArrayBytes_Single_blit(hl__types__ArrayBytes_Single,int,hl__types__ArrayAccess,int,int);
hl__types__ArrayBase hl_types_ArrayBytes_Single_slice(hl__types__ArrayBytes_Single,int,vdynamic*);
int fun$3236(vclosure*,int,int);
int fun$3237(vclosure*,double,double);
void hl_types_ArrayBytes_Single_sort(hl__types__ArrayBytes_Single,vclosure*);
hl__types__ArrayBase hl_types_ArrayBytes_Single_splice(hl__types__ArrayBytes_Single,int,int);
String hl_types_ArrayBytes_Single_toString(hl__types__ArrayBytes_Single);
void hl_types_ArrayBytes_Single_unshift(hl__types__ArrayBytes_Single,float);
void hl_types_ArrayBytes_Single_insert(hl__types__ArrayBytes_Single,int,float);
bool hl_types_ArrayBytes_Single_remove(hl__types__ArrayBytes_Single,float);
int hl_types_ArrayBytes_Single_indexOf(hl__types__ArrayBytes_Single,float,vdynamic*);
int hl_types_ArrayBytes_Single_lastIndexOf(hl__types__ArrayBytes_Single,float,vdynamic*);
hl__types__ArrayBytes_Single hl_types_ArrayBytes_Single_copy(hl__types__ArrayBytes_Single);
vdynamic* hl_types_ArrayBytes_Single_iterator(hl__types__ArrayBytes_Single);
hl__types__ArrayDyn hl_types_ArrayBytes_Single_map(hl__types__ArrayBytes_Single,vclosure*);
hl__types__ArrayBytes_Single hl_types_ArrayBytes_Single_filter(hl__types__ArrayBytes_Single,vclosure*);
void hl_types_ArrayBytes_Single_resize(hl__types__ArrayBytes_Single,int);
vdynamic* hl_types_ArrayBytes_Single_getDyn(hl__types__ArrayBytes_Single,int);
void hl_types_ArrayBytes_Single_setDyn(hl__types__ArrayBytes_Single,int,vdynamic*);
int hl_types_ArrayBytes_Single_pushDyn(hl__types__ArrayBytes_Single,vdynamic*);
vdynamic* hl_types_ArrayBytes_Single_popDyn(hl__types__ArrayBytes_Single);
vdynamic* hl_types_ArrayBytes_Single_shiftDyn(hl__types__ArrayBytes_Single);
void hl_types_ArrayBytes_Single_unshiftDyn(hl__types__ArrayBytes_Single,vdynamic*);
void hl_types_ArrayBytes_Single_insertDyn(hl__types__ArrayBytes_Single,int,vdynamic*);
bool hl_types_ArrayBytes_Single_removeDyn(hl__types__ArrayBytes_Single,vdynamic*);
int fun$3241(vclosure*,float,float);
void hl_types_ArrayBytes_Single_sortDyn(hl__types__ArrayBytes_Single,vclosure*);
void hl_types_ArrayBytes_Single___expand(hl__types__ArrayBytes_Single,int);
void hl_types_ArrayBytes_hl_UI16_new(hl__types__ArrayBytes_hl_UI16);
hl__types__ArrayBytes_hl_UI16 hl_types_ArrayBytes_hl_UI16_concat(hl__types__ArrayBytes_hl_UI16,hl__types__ArrayBytes_hl_UI16);
String hl_types_ArrayBytes_hl_UI16_join(hl__types__ArrayBytes_hl_UI16,String);
vdynamic* hl_types_ArrayBytes_hl_UI16_pop(hl__types__ArrayBytes_hl_UI16);
int hl_types_ArrayBytes_hl_UI16_push(hl__types__ArrayBytes_hl_UI16,unsigned short);
void hl_types_ArrayBytes_hl_UI16_reverse(hl__types__ArrayBytes_hl_UI16);
vdynamic* hl_types_ArrayBytes_hl_UI16_shift(hl__types__ArrayBytes_hl_UI16);
void hl_types_ArrayBytes_hl_UI16_blit(hl__types__ArrayBytes_hl_UI16,int,hl__types__ArrayAccess,int,int);
hl__types__ArrayBase hl_types_ArrayBytes_hl_UI16_slice(hl__types__ArrayBytes_hl_UI16,int,vdynamic*);
int fun$3242(vclosure*,int,int);
int fun$3243(vclosure*,double,double);
void hl_types_ArrayBytes_hl_UI16_sort(hl__types__ArrayBytes_hl_UI16,vclosure*);
hl__types__ArrayBase hl_types_ArrayBytes_hl_UI16_splice(hl__types__ArrayBytes_hl_UI16,int,int);
String hl_types_ArrayBytes_hl_UI16_toString(hl__types__ArrayBytes_hl_UI16);
void hl_types_ArrayBytes_hl_UI16_unshift(hl__types__ArrayBytes_hl_UI16,unsigned short);
void hl_types_ArrayBytes_hl_UI16_insert(hl__types__ArrayBytes_hl_UI16,int,unsigned short);
bool hl_types_ArrayBytes_hl_UI16_remove(hl__types__ArrayBytes_hl_UI16,unsigned short);
int hl_types_ArrayBytes_hl_UI16_indexOf(hl__types__ArrayBytes_hl_UI16,unsigned short,vdynamic*);
int hl_types_ArrayBytes_hl_UI16_lastIndexOf(hl__types__ArrayBytes_hl_UI16,unsigned short,vdynamic*);
hl__types__ArrayBytes_hl_UI16 hl_types_ArrayBytes_hl_UI16_copy(hl__types__ArrayBytes_hl_UI16);
vdynamic* hl_types_ArrayBytes_hl_UI16_iterator(hl__types__ArrayBytes_hl_UI16);
hl__types__ArrayDyn hl_types_ArrayBytes_hl_UI16_map(hl__types__ArrayBytes_hl_UI16,vclosure*);
hl__types__ArrayBytes_hl_UI16 hl_types_ArrayBytes_hl_UI16_filter(hl__types__ArrayBytes_hl_UI16,vclosure*);
void hl_types_ArrayBytes_hl_UI16_resize(hl__types__ArrayBytes_hl_UI16,int);
vdynamic* hl_types_ArrayBytes_hl_UI16_getDyn(hl__types__ArrayBytes_hl_UI16,int);
void hl_types_ArrayBytes_hl_UI16_setDyn(hl__types__ArrayBytes_hl_UI16,int,vdynamic*);
int hl_types_ArrayBytes_hl_UI16_pushDyn(hl__types__ArrayBytes_hl_UI16,vdynamic*);
vdynamic* hl_types_ArrayBytes_hl_UI16_popDyn(hl__types__ArrayBytes_hl_UI16);
vdynamic* hl_types_ArrayBytes_hl_UI16_shiftDyn(hl__types__ArrayBytes_hl_UI16);
void hl_types_ArrayBytes_hl_UI16_unshiftDyn(hl__types__ArrayBytes_hl_UI16,vdynamic*);
void hl_types_ArrayBytes_hl_UI16_insertDyn(hl__types__ArrayBytes_hl_UI16,int,vdynamic*);
bool hl_types_ArrayBytes_hl_UI16_removeDyn(hl__types__ArrayBytes_hl_UI16,vdynamic*);
int fun$3247(vclosure*,unsigned short,unsigned short);
void hl_types_ArrayBytes_hl_UI16_sortDyn(hl__types__ArrayBytes_hl_UI16,vclosure*);
void hl_types_ArrayBytes_hl_UI16___expand(hl__types__ArrayBytes_hl_UI16,int);
void hl_types_ArrayDynIterator_new(hl__types__ArrayDynIterator,hl__types__ArrayBase);
bool hl_types_ArrayDynIterator_hasNext(hl__types__ArrayDynIterator);
vdynamic* hl_types_ArrayDynIterator_next(hl__types__ArrayDynIterator);
hl__types__ArrayDyn hl_types_ArrayDyn_alloc(hl__types__ArrayBase,bool*);
void hl_types_ArrayDyn_new(hl__types__ArrayDyn);
int hl_types_ArrayDyn_get_length(hl__types__ArrayDyn);
vdynamic* hl_types_ArrayDyn_getDyn(hl__types__ArrayDyn,int);
void hl_types_ArrayDyn_setDyn(hl__types__ArrayDyn,int,vdynamic*);
void hl_types_ArrayDyn_blit(hl__types__ArrayDyn,int,hl__types__ArrayAccess,int,int);
hl__types__ArrayDyn hl_types_ArrayDyn_concat(hl__types__ArrayDyn,hl__types__ArrayDyn);
String hl_types_ArrayDyn_join(hl__types__ArrayDyn,String);
vdynamic* hl_types_ArrayDyn_pop(hl__types__ArrayDyn);
int hl_types_ArrayDyn_push(hl__types__ArrayDyn,vdynamic*);
void hl_types_ArrayDyn_reverse(hl__types__ArrayDyn);
void hl_types_ArrayDyn_resize(hl__types__ArrayDyn,int);
vdynamic* hl_types_ArrayDyn_shift(hl__types__ArrayDyn);
hl__types__ArrayDyn hl_types_ArrayDyn_slice(hl__types__ArrayDyn,int,vdynamic*);
void hl_types_ArrayDyn_sort(hl__types__ArrayDyn,vclosure*);
hl__types__ArrayDyn hl_types_ArrayDyn_splice(hl__types__ArrayDyn,int,int);
String hl_types_ArrayDyn_toString(hl__types__ArrayDyn);
vbyte* hl_types_ArrayDyn___string(hl__types__ArrayDyn);
void hl_types_ArrayDyn_unshift(hl__types__ArrayDyn,vdynamic*);
void hl_types_ArrayDyn_insert(hl__types__ArrayDyn,int,vdynamic*);
bool hl_types_ArrayDyn_remove(hl__types__ArrayDyn,vdynamic*);
int hl_types_ArrayDyn_indexOf(hl__types__ArrayDyn,vdynamic*,vdynamic*);
int hl_types_ArrayDyn_lastIndexOf(hl__types__ArrayDyn,vdynamic*,vdynamic*);
hl__types__ArrayDyn hl_types_ArrayDyn_copy(hl__types__ArrayDyn);
vdynamic* hl_types_ArrayDyn_iterator(hl__types__ArrayDyn);
hl__types__ArrayDyn hl_types_ArrayDyn_map(hl__types__ArrayDyn,vclosure*);
hl__types__ArrayDyn hl_types_ArrayDyn_filter(hl__types__ArrayDyn,vclosure*);
vdynamic* hl_types_ArrayDyn___get_field(hl__types__ArrayDyn,int);
vdynamic* hl_types_ArrayDyn___cast(hl__types__ArrayDyn,hl_type*);
int hl_types_ArrayDyn___compare(hl__types__ArrayDyn,vdynamic*);
hl__types__ArrayObj hl_types_ArrayObj_alloc(varray*);
void hl_types_ArrayObj_new(hl__types__ArrayObj);
hl__types__ArrayObj hl_types_ArrayObj_concat(hl__types__ArrayObj,hl__types__ArrayObj);
String hl_types_ArrayObj_join(hl__types__ArrayObj,String);
bool hl_types_ArrayObj_isArrayObj(hl__types__ArrayObj);
vdynamic* hl_types_ArrayObj_pop(hl__types__ArrayObj);
int hl_types_ArrayObj_push(hl__types__ArrayObj,vdynamic*);
void hl_types_ArrayObj_reverse(hl__types__ArrayObj);
vdynamic* hl_types_ArrayObj_shift(hl__types__ArrayObj);
hl__types__ArrayBase hl_types_ArrayObj_slice(hl__types__ArrayObj,int,vdynamic*);
void hl_types_ArrayObj_sort(hl__types__ArrayObj,vclosure*);
hl__types__ArrayBase hl_types_ArrayObj_splice(hl__types__ArrayObj,int,int);
String hl_types_ArrayObj_toString(hl__types__ArrayObj);
void hl_types_ArrayObj_unshift(hl__types__ArrayObj,vdynamic*);
void hl_types_ArrayObj_insert(hl__types__ArrayObj,int,vdynamic*);
bool hl_types_ArrayObj_remove(hl__types__ArrayObj,vdynamic*);
int hl_types_ArrayObj_indexOf(hl__types__ArrayObj,vdynamic*,vdynamic*);
void hl_types_ArrayObj_blit(hl__types__ArrayObj,int,hl__types__ArrayAccess,int,int);
int hl_types_ArrayObj_lastIndexOf(hl__types__ArrayObj,vdynamic*,vdynamic*);
hl__types__ArrayObj hl_types_ArrayObj_copy(hl__types__ArrayObj);
vdynamic* hl_types_ArrayObj_iterator(hl__types__ArrayObj);
hl__types__ArrayDyn hl_types_ArrayObj_map(hl__types__ArrayObj,vclosure*);
hl__types__ArrayObj hl_types_ArrayObj_filter(hl__types__ArrayObj,vclosure*);
void hl_types_ArrayObj_resize(hl__types__ArrayObj,int);
void hl_types_ArrayObj___expand(hl__types__ArrayObj,int);
vdynamic* hl_types_ArrayObj_getDyn(hl__types__ArrayObj,int);
void hl_types_ArrayObj_setDyn(hl__types__ArrayObj,int,vdynamic*);
int hl_types_ArrayObj_pushDyn(hl__types__ArrayObj,vdynamic*);
vdynamic* hl_types_ArrayObj_popDyn(hl__types__ArrayObj);
vdynamic* hl_types_ArrayObj_shiftDyn(hl__types__ArrayObj);
void hl_types_ArrayObj_unshiftDyn(hl__types__ArrayObj,vdynamic*);
void hl_types_ArrayObj_insertDyn(hl__types__ArrayObj,int,vdynamic*);
bool hl_types_ArrayObj_removeDyn(hl__types__ArrayObj,vdynamic*);
void hl_types_ArrayObj_sortDyn(hl__types__ArrayObj,vclosure*);
void hl_types_BytesIterator_Float_new(hl__types__BytesIterator_Float,hl__types__ArrayBytes_Float);
bool hl_types_BytesIterator_Float_hasNext(hl__types__BytesIterator_Float);
double hl_types_BytesIterator_Float_next(hl__types__BytesIterator_Float);
void hl_types_BytesIterator_Int_new(hl__types__BytesIterator_Int,hl__types__ArrayBytes_Int);
bool hl_types_BytesIterator_Int_hasNext(hl__types__BytesIterator_Int);
int hl_types_BytesIterator_Int_next(hl__types__BytesIterator_Int);
void hl_types_BytesIterator_Single_new(hl__types__BytesIterator_Single,hl__types__ArrayBytes_Single);
bool hl_types_BytesIterator_Single_hasNext(hl__types__BytesIterator_Single);
float hl_types_BytesIterator_Single_next(hl__types__BytesIterator_Single);
void hl_types_BytesIterator_hl_UI16_new(hl__types__BytesIterator_hl_UI16,hl__types__ArrayBytes_hl_UI16);
bool hl_types_BytesIterator_hl_UI16_hasNext(hl__types__BytesIterator_hl_UI16);
unsigned short hl_types_BytesIterator_hl_UI16_next(hl__types__BytesIterator_hl_UI16);
void hxd_BitmapInnerDataImpl_new(hxd__BitmapInnerDataImpl);
void hxd_BitmapData_notImplemented(void);
hxd__BitmapData hxd_BitmapData_fromNative(hxd__BitmapInnerDataImpl);
void hxd_BitmapData_new(hxd__BitmapData,int,int);
void hxd_BitmapData_clear(hxd__BitmapData,int);
void hxd_BitmapData_fill(hxd__BitmapData,int,int,int,int,int);
void hxd_BitmapData_draw(hxd__BitmapData,int,int,hxd__BitmapData,int,int,int,int,venum*);
void hxd_BitmapData_drawScaled(hxd__BitmapData,int,int,int,int,hxd__BitmapData,int,int,int,int,venum*,bool*);
void hxd_BitmapData_line(hxd__BitmapData,int,int,int,int,int);
void hxd_BitmapData_dispose(hxd__BitmapData);
hxd__BitmapData hxd_BitmapData_clone(hxd__BitmapData);
hxd__BitmapData hxd_BitmapData_sub(hxd__BitmapData,int,int,int,int);
void hxd_BitmapData_lock(hxd__BitmapData);
void hxd_BitmapData_unlock(hxd__BitmapData);
int hxd_BitmapData_getPixel(hxd__BitmapData,int,int);
void hxd_BitmapData_setPixel(hxd__BitmapData,int,int,int);
int hxd_BitmapData_get_width(hxd__BitmapData);
int hxd_BitmapData_get_height(hxd__BitmapData);
hxd__Pixels hxd_BitmapData_getPixels(hxd__BitmapData);
void hxd_BitmapData_setPixels(hxd__BitmapData,hxd__Pixels);
hxd__BitmapInnerDataImpl hxd_BitmapData_toNative(hxd__BitmapData);
haxe__io__Bytes hxd_BitmapData_toPNG(hxd__BitmapData);
hxd__Charset hxd_Charset_getDefault(void);
void hxd_Charset_new(hxd__Charset);
vdynamic* hxd_Charset_resolveChar(hxd__Charset,int,haxe__ds__IntMap);
bool hxd_Charset_isCJK(hxd__Charset,int);
bool hxd_Charset_isSpace(hxd__Charset,int);
bool hxd_Charset_isBreakChar(hxd__Charset,int);
void hxd_CustomCursor_new(hxd__CustomCursor,hl__types__ArrayObj,double,int,int);
void hxd_CustomCursor_reset(hxd__CustomCursor);
int hxd_CustomCursor_update(hxd__CustomCursor,double);
void hxd_CustomCursor_dispose(hxd__CustomCursor);
void hxd_Event_new(hxd__Event,venum*,double*,double*);
String hxd_Event_toString(hxd__Event);
vbyte* hxd_Event___string(hxd__Event);
void fun$3254(venum*);
void fun$3252(String,vclosure*);
void hxd_File_browse(vclosure*,vvirtual*);
void hxd_File_saveAs(haxe__io__Bytes,vvirtual*);
bool hxd_File_exists(String);
void hxd_File_delete(String);
hl__types__ArrayObj hxd_File_listDirectory(String);
haxe__io__Bytes hxd_File_getBytes(String);
void hxd_File_saveBytes(String,haxe__io__Bytes);
void fun$3263(String);
void hxd_File_load(String,vclosure*,vclosure*);
void hxd_File_createDirectory(String);
String hxd_File_applicationPath(void);
void hxd__FloatBuffer_InnerIterator_new(hxd___FloatBuffer__InnerIterator,hl__types__ArrayBytes_Single);
bool hxd__FloatBuffer_InnerIterator_hasNext(hxd___FloatBuffer__InnerIterator);
float hxd__FloatBuffer_InnerIterator_next(hxd___FloatBuffer__InnerIterator);
hl__types__ArrayBytes_Single hxd__FloatBuffer_FloatBuffer_Impl___new(int*);
void hxd__FloatBuffer_FloatBuffer_Impl__push(hl__types__ArrayBytes_Single,float);
void hxd__FloatBuffer_FloatBuffer_Impl__grow(hl__types__ArrayBytes_Single,int);
void hxd__FloatBuffer_FloatBuffer_Impl__resize(hl__types__ArrayBytes_Single,int);
float hxd__FloatBuffer_FloatBuffer_Impl__arrayRead(hl__types__ArrayBytes_Single,int);
float hxd__FloatBuffer_FloatBuffer_Impl__arrayWrite(hl__types__ArrayBytes_Single,int,float);
hl__types__ArrayBytes_Single hxd__FloatBuffer_FloatBuffer_Impl__getNative(hl__types__ArrayBytes_Single);
hxd___FloatBuffer__InnerIterator hxd__FloatBuffer_FloatBuffer_Impl__iterator(hl__types__ArrayBytes_Single);
int hxd__FloatBuffer_FloatBuffer_Impl__get_length(hl__types__ArrayBytes_Single);
void hxd__IndexBuffer_InnerIterator_new(hxd___IndexBuffer__InnerIterator,hl__types__ArrayBytes_hl_UI16);
bool hxd__IndexBuffer_InnerIterator_hasNext(hxd___IndexBuffer__InnerIterator);
int hxd__IndexBuffer_InnerIterator_next(hxd___IndexBuffer__InnerIterator);
hl__types__ArrayBytes_hl_UI16 hxd__IndexBuffer_IndexBuffer_Impl___new(int*);
void hxd__IndexBuffer_IndexBuffer_Impl__push(hl__types__ArrayBytes_hl_UI16,int);
void hxd__IndexBuffer_IndexBuffer_Impl__grow(hl__types__ArrayBytes_hl_UI16,int);
int hxd__IndexBuffer_IndexBuffer_Impl__arrayRead(hl__types__ArrayBytes_hl_UI16,int);
int hxd__IndexBuffer_IndexBuffer_Impl__arrayWrite(hl__types__ArrayBytes_hl_UI16,int,int);
hl__types__ArrayBytes_hl_UI16 hxd__IndexBuffer_IndexBuffer_Impl__getNative(hl__types__ArrayBytes_hl_UI16);
hxd___IndexBuffer__InnerIterator hxd__IndexBuffer_IndexBuffer_Impl__iterator(hl__types__ArrayBytes_hl_UI16);
int hxd__IndexBuffer_IndexBuffer_Impl__get_length(hl__types__ArrayBytes_hl_UI16);
bool hxd_Key_isDown(int);
int hxd_Key_getFrame(void);
bool hxd_Key_isPressed(int);
bool hxd_Key_isReleased(int);
void hxd_Key_initialize(void);
void hxd_Key_dispose(void);
void hxd_Key_onEvent(hxd__Event);
String hxd_Key_getKeyName(int);
double hxd_Math_get_POSITIVE_INFINITY(void);
double hxd_Math_get_NEGATIVE_INFINITY(void);
double hxd_Math_get_NaN(void);
bool hxd_Math_isNaN(double);
double hxd_Math_fmt(double);
int hxd_Math_floor(double);
int hxd_Math_ceil(double);
int hxd_Math_round(double);
double hxd_Math_clamp(double,double*,double*);
double hxd_Math_pow(double,double);
double hxd_Math_scaleTime(double,double);
double hxd_Math_cos(double);
double hxd_Math_sin(double);
double hxd_Math_tan(double);
double hxd_Math_acos(double);
double hxd_Math_asin(double);
double hxd_Math_atan(double);
double hxd_Math_sqrt(double);
double hxd_Math_invSqrt(double);
double hxd_Math_atan2(double,double);
double hxd_Math_abs(double);
double hxd_Math_max(double,double);
double hxd_Math_min(double,double);
int hxd_Math_iabs(int);
int hxd_Math_imax(int,int);
int hxd_Math_imin(int,int);
int hxd_Math_iclamp(int,int,int);
double hxd_Math_lerp(double,double,double);
int hxd_Math_bitCount(int);
double hxd_Math_distanceSq(double,double,double*);
double hxd_Math_distance(double,double,double*);
int hxd_Math_colorLerp(int,int,double);
double hxd_Math_angle(double);
double hxd_Math_angleLerp(double,double,double);
double hxd_Math_angleMove(double,double,double);
void hxd_Math_shuffle(hl__types__ArrayDyn);
double hxd_Math_random(double*);
double hxd_Math_srand(double*);
double hxd_Math_b2f(int);
int hxd_Math_f2b(double);
int hxd_Math_umod(int,int);
double hxd_Math_ufmod(double,double);
double hxd_Math_degToRad(double);
double hxd_Math_radToDeg(double);
int hxd__Pixels_PixelsARGB_Impl__getPixel(hxd__Pixels,int,int);
void hxd__Pixels_PixelsARGB_Impl__setPixel(hxd__Pixels,int,int,int);
hxd__Pixels hxd__Pixels_PixelsARGB_Impl__fromPixels(hxd__Pixels);
h3d__Vector hxd__Pixels_PixelsFloat_Impl__getPixelF(hxd__Pixels,int,int);
void hxd__Pixels_PixelsFloat_Impl__setPixelF(hxd__Pixels,int,int,h3d__Vector);
hxd__Pixels hxd__Pixels_PixelsFloat_Impl__fromPixels(hxd__Pixels);
int hxd__Pixels_Channel_Impl__toInt(int);
int hxd__Pixels_Channel_Impl__fromInt(int);
int hxd_Pixels_switchEndian(int);
int hxd_Pixels_switchBR(int);
int hxd_Pixels_getBytesPerPixel(venum*);
int hxd_Pixels_getChannelOffset(venum*,int);
hxd__Pixels hxd_Pixels_alloc(int,int,venum*);
void hxd_Pixels_new(hxd__Pixels,int,int,haxe__io__Bytes,venum*,int*);
venum* hxd_Pixels_get_format(hxd__Pixels);
venum* hxd_Pixels_set_innerFormat(hxd__Pixels,venum*);
void hxd_Pixels_invalidFormat(hxd__Pixels);
hxd__Pixels hxd_Pixels_sub(hxd__Pixels,int,int,int,int);
int hxd_Pixels_yflip(hxd__Pixels,int);
void hxd_Pixels_blit(hxd__Pixels,int,int,hxd__Pixels,int,int,int,int);
void hxd_Pixels_clear(hxd__Pixels,int,int*);
hl__types__ArrayBytes_Int hxd_Pixels_toVector(hxd__Pixels);
hxd__Pixels hxd_Pixels_makeSquare(hxd__Pixels,vdynamic*);
void hxd_Pixels_copyInner(hxd__Pixels);
void hxd_Pixels_willChange(hxd__Pixels);
void hxd_Pixels_setFlip(hxd__Pixels,bool);
void hxd_Pixels_convert(hxd__Pixels,venum*);
int hxd_Pixels_getPixel(hxd__Pixels,int,int);
void hxd_Pixels_setPixel(hxd__Pixels,int,int,int);
void hxd_Pixels_dispose(hxd__Pixels);
haxe__io__Bytes hxd_Pixels_toPNG(hxd__Pixels,vdynamic*);
hxd__Pixels hxd_Pixels_clone(hxd__Pixels);
hxd__res__Any hxd_Res_load(String);
hxd__res__Loader hxd_Res_get_loader(void);
hxd__res__Loader hxd_Res_set_loader(hxd__res__Loader);
void hxd_SceneEvents_new(hxd__SceneEvents,hxd__Window);
void hxd_SceneEvents_onRemove(hxd__SceneEvents,vvirtual*);
void hxd_SceneEvents_addScene(hxd__SceneEvents,vvirtual*,vdynamic*);
void hxd_SceneEvents_removeScene(hxd__SceneEvents,vvirtual*);
void hxd_SceneEvents_dispose(hxd__SceneEvents);
void hxd_SceneEvents_focus(hxd__SceneEvents,vvirtual*);
void hxd_SceneEvents_blur(hxd__SceneEvents);
void hxd_SceneEvents_checkFocus(hxd__SceneEvents);
void hxd_SceneEvents_emitEvent(hxd__SceneEvents,hxd__Event);
void hxd_SceneEvents_checkEvents(hxd__SceneEvents);
void hxd_SceneEvents_startDrag(hxd__SceneEvents,vclosure*,vclosure*,hxd__Event);
void hxd_SceneEvents_stopDrag(hxd__SceneEvents);
vvirtual* hxd_SceneEvents_getFocus(hxd__SceneEvents);
void hxd_SceneEvents_onEvent(hxd__SceneEvents,hxd__Event);
void hxd_SceneEvents_dispatchListeners(hxd__SceneEvents,hxd__Event);
void hxd_Timer_update(void);
double hxd_Timer_get_tmod(void);
double hxd_Timer_set_tmod(double);
double hxd_Timer_fps(void);
void hxd_Timer_skip(void);
void hxd_Timer_reset(void);
vclosure* hxd_System_getCurrentLoop(void);
void hxd_System_setLoop(vclosure*);
bool hxd_System_mainLoop(void);
void hxd_System_start(vclosure*);
void fun$3348(vdynamic*);
void hxd_System_runMainLoop(void);
void fun$3349(void);
void fun$3350(void);
void fun$3351(void);
void hxd_System_reportError(vdynamic*);
void hxd_System_setNativeCursor(venum*);
void hxd_System_updateCursor(void);
String hxd_System_getDeviceName(void);
double hxd_System_getDefaultFrameRate(void);
bool hxd_System_getValue(venum*);
void hxd_System_exit(void);
String hxd_System_get_lang(void);
int hxd_System_get_width(void);
int hxd_System_get_height(void);
venum* hxd_System_get_platform(void);
int hxd_System_get_screenDPI(void);
void hxd_System_timeoutTick(void);
bool hxd_System_get_allowTimeout(void);
bool hxd_System_set_allowTimeout(bool);
void hxd_Window_initChars(void);
hxd__Window hxd_Window_getInstance(void);
void hxd_Window_new(hxd__Window,String,int,int);
bool hxd_Window_onClose(hxd__Window);
void hxd_Window_event(hxd__Window,hxd__Event);
void hxd_Window_addEventTarget(hxd__Window,vclosure*);
void hxd_Window_removeEventTarget(hxd__Window,vclosure*);
void hxd_Window_addResizeEvent(hxd__Window,vclosure*);
void hxd_Window_removeResizeEvent(hxd__Window,vclosure*);
void hxd_Window_onResize(hxd__Window,vdynamic*);
void hxd_Window_resize(hxd__Window,int,int);
void hxd_Window_setFullScreen(hxd__Window,bool);
int hxd_Window_get_mouseX(hxd__Window);
int hxd_Window_get_mouseY(hxd__Window);
int hxd_Window_get_width(hxd__Window);
int hxd_Window_get_height(hxd__Window);
bool hxd_Window_get_mouseLock(hxd__Window);
bool hxd_Window_set_mouseLock(hxd__Window,bool);
bool hxd_Window_get_vsync(hxd__Window);
bool hxd_Window_set_vsync(hxd__Window,bool);
bool hxd_Window_get_isFocused(hxd__Window);
bool hxd_Window_onEvent(hxd__Window,dx__Event);
h2d__Tile fun$3357(venum*,String);
h2d__Font hxd_fmt_bfnt_FontParser_parse(haxe__io__Bytes,String,vclosure*);
h2d__Font hxd_fmt_bfnt_Reader_parse(haxe__io__Bytes,vclosure*);
void hxd_fmt_bfnt_Reader_new(hxd__fmt__bfnt__Reader,haxe__io__Input);
h2d__Font hxd_fmt_bfnt_Reader_read(hxd__fmt__bfnt__Reader,vclosure*);
void hxd_fmt_bfnt_Writer_new(hxd__fmt__bfnt__Writer,haxe__io__Output);
void hxd_fmt_bfnt_Writer_write(hxd__fmt__bfnt__Writer,h2d__Font);
void hxd_fmt_bfnt_Writer_writeString(hxd__fmt__bfnt__Writer,String);
void hxd_fmt_fbx_TmpObject_new(hxd__fmt__fbx__TmpObject);
void hxd_fmt_fbx__BaseLibrary_AnimCurve_new(hxd__fmt__fbx___BaseLibrary__AnimCurve,hxd__fmt__fbx__DefaultMatrixes,String);
void hxd_fmt_fbx_DefaultMatrixes_rightHandToLeft(h3d__Matrix);
void hxd_fmt_fbx_DefaultMatrixes_new(hxd__fmt__fbx__DefaultMatrixes);
h3d__Matrix hxd_fmt_fbx_DefaultMatrixes_toMatrix(hxd__fmt__fbx__DefaultMatrixes,bool);
h3d__Quat hxd_fmt_fbx_DefaultMatrixes_toQuaternion(hxd__fmt__fbx__DefaultMatrixes,bool);
void hxd_fmt_fbx_BaseLibrary_new(hxd__fmt__fbx__BaseLibrary,String);
void hxd_fmt_fbx_BaseLibrary_reset(hxd__fmt__fbx__BaseLibrary);
void hxd_fmt_fbx_BaseLibrary_loadFile(hxd__fmt__fbx__BaseLibrary,haxe__io__Bytes);
void hxd_fmt_fbx_BaseLibrary_load(hxd__fmt__fbx__BaseLibrary,vvirtual*);
hl__types__ArrayBytes_Float fun$3405(vvirtual*);
void hxd_fmt_fbx_BaseLibrary_updateModelScale(hxd__fmt__fbx__BaseLibrary);
void hxd_fmt_fbx_BaseLibrary_convertPoints(hxd__fmt__fbx__BaseLibrary,hl__types__ArrayBytes_Float);
void hxd_fmt_fbx_BaseLibrary_leftHandConvert(hxd__fmt__fbx__BaseLibrary);
void hxd_fmt_fbx_BaseLibrary_init(hxd__fmt__fbx__BaseLibrary,vvirtual*);
hxd__fmt__fbx__Geometry hxd_fmt_fbx_BaseLibrary_getGeometry(hxd__fmt__fbx__BaseLibrary,String);
vvirtual* hxd_fmt_fbx_BaseLibrary_getParent(hxd__fmt__fbx__BaseLibrary,vvirtual*,String,vdynamic*);
vvirtual* hxd_fmt_fbx_BaseLibrary_getChild(hxd__fmt__fbx__BaseLibrary,vvirtual*,String,vdynamic*);
vvirtual* hxd_fmt_fbx_BaseLibrary_getSpecChild(hxd__fmt__fbx__BaseLibrary,vvirtual*,String);
hl__types__ArrayObj hxd_fmt_fbx_BaseLibrary_getChilds(hxd__fmt__fbx__BaseLibrary,vvirtual*,String);
hl__types__ArrayObj hxd_fmt_fbx_BaseLibrary_getParents(hxd__fmt__fbx__BaseLibrary,vvirtual*,String);
vvirtual* hxd_fmt_fbx_BaseLibrary_getRoot(hxd__fmt__fbx__BaseLibrary);
void hxd_fmt_fbx_BaseLibrary_ignoreMissingObject(hxd__fmt__fbx__BaseLibrary,String);
vvirtual* hxd_fmt_fbx_BaseLibrary_buildHierarchy(hxd__fmt__fbx__BaseLibrary);
hxd__fmt__fbx___BaseLibrary__AnimCurve hxd_fmt_fbx_BaseLibrary_getObjectCurve(hxd__fmt__fbx__BaseLibrary,haxe__ds__IntMap,vvirtual*,String,String);
vvirtual* fun$3426(hl__types__ArrayObj,String);
void hxd_fmt_fbx_BaseLibrary_mergeModels(hxd__fmt__fbx__BaseLibrary,hl__types__ArrayObj);
void hxd_fmt_fbx_BaseLibrary_addLink(hxd__fmt__fbx__BaseLibrary,vvirtual*,vvirtual*);
void hxd_fmt_fbx_BaseLibrary_removeLink(hxd__fmt__fbx__BaseLibrary,vvirtual*,vvirtual*);
bool hxd_fmt_fbx_BaseLibrary_checkData(hxd__fmt__fbx__BaseLibrary,vvirtual*);
bool hxd_fmt_fbx_BaseLibrary_roundValues(hxd__fmt__fbx__BaseLibrary,hl__types__ArrayBytes_Float,double,double*);
String fun$3428(vvirtual*);
int fun$3429(vclosure*,hxd__fmt__fbx___BaseLibrary__AnimCurve,hxd__fmt__fbx___BaseLibrary__AnimCurve);
int fun$3430(vclosure*,vdynamic*,vdynamic*);
h3d__anim__Animation hxd_fmt_fbx_BaseLibrary_loadAnimation(hxd__fmt__fbx__BaseLibrary,String,vvirtual*,hxd__fmt__fbx__BaseLibrary);
int hxd_fmt_fbx_BaseLibrary_sortDistinctFloats(hxd__fmt__fbx__BaseLibrary,double,double);
bool hxd_fmt_fbx_BaseLibrary_isNullJoint(hxd__fmt__fbx__BaseLibrary,vvirtual*);
String hxd_fmt_fbx_BaseLibrary_getModelPath(hxd__fmt__fbx__BaseLibrary,vvirtual*);
int fun$3431(vvirtual*,vvirtual*);
int fun$3432(vclosure*,vdynamic*,vdynamic*);
void hxd_fmt_fbx_BaseLibrary_autoMerge(hxd__fmt__fbx__BaseLibrary);
bool hxd_fmt_fbx_BaseLibrary_keepJoint(hxd__fmt__fbx__BaseLibrary,h3d__anim__Joint);
void fun$3433(venum*,h3d__anim__Joint);
h3d__anim__Skin hxd_fmt_fbx_BaseLibrary_createSkin(hxd__fmt__fbx__BaseLibrary,haxe__ds__IntMap,haxe__ds__IntMap,hl__types__ArrayObj,int);
double hxd_fmt_fbx_BaseLibrary_round(hxd__fmt__fbx__BaseLibrary,double);
hxd__fmt__fbx__DefaultMatrixes hxd_fmt_fbx_BaseLibrary_getDefaultMatrixes(hxd__fmt__fbx__BaseLibrary,vvirtual*);
vvirtual* hxd_fmt_fbx_FbxTools_get(vvirtual*,String,bool*);
hl__types__ArrayObj hxd_fmt_fbx_FbxTools_getAll(vvirtual*,String);
hl__types__ArrayBytes_Int hxd_fmt_fbx_FbxTools_getInts(vvirtual*);
hl__types__ArrayBytes_Float hxd_fmt_fbx_FbxTools_getFloats(vvirtual*);
bool hxd_fmt_fbx_FbxTools_hasProp(vvirtual*,venum*);
int hxd_fmt_fbx_FbxTools_idToInt(double);
int hxd_fmt_fbx_FbxTools_toInt(venum*);
double hxd_fmt_fbx_FbxTools_toFloat(venum*);
String hxd_fmt_fbx_FbxTools_toString(venum*);
int hxd_fmt_fbx_FbxTools_getId(vvirtual*);
String hxd_fmt_fbx_FbxTools_getName(vvirtual*);
String hxd_fmt_fbx_FbxTools_getType(vvirtual*);
void hxd_fmt_fbx_Geometry_new(hxd__fmt__fbx__Geometry,hxd__fmt__fbx__BaseLibrary,vvirtual*);
vvirtual* hxd_fmt_fbx_Geometry_getRoot(hxd__fmt__fbx__Geometry);
hl__types__ArrayBytes_Float hxd_fmt_fbx_Geometry_getVertices(hxd__fmt__fbx__Geometry);
hl__types__ArrayBytes_Int hxd_fmt_fbx_Geometry_getPolygons(hxd__fmt__fbx__Geometry);
hl__types__ArrayBytes_Int hxd_fmt_fbx_Geometry_getMaterials(hxd__fmt__fbx__Geometry);
hl__types__ArrayBytes_Int hxd_fmt_fbx_Geometry_getMaterialByTriangle(hxd__fmt__fbx__Geometry);
void hxd_fmt_fbx_Geometry_merge(hxd__fmt__fbx__Geometry,hxd__fmt__fbx__Geometry,hl__types__ArrayBytes_Int);
vvirtual* hxd_fmt_fbx_Geometry_getIndexes(hxd__fmt__fbx__Geometry);
hl__types__ArrayBytes_Float hxd_fmt_fbx_Geometry_getNormals(hxd__fmt__fbx__Geometry);
hl__types__ArrayBytes_Float hxd_fmt_fbx_Geometry_getTangents(hxd__fmt__fbx__Geometry,bool*);
hl__types__ArrayBytes_Float hxd_fmt_fbx_Geometry_getBinormals(hxd__fmt__fbx__Geometry,bool*);
hl__types__ArrayBytes_Float hxd_fmt_fbx_Geometry_processVectors(hxd__fmt__fbx__Geometry,String,String,bool*);
vvirtual* hxd_fmt_fbx_Geometry_getColors(hxd__fmt__fbx__Geometry);
hl__types__ArrayObj hxd_fmt_fbx_Geometry_getUVs(hxd__fmt__fbx__Geometry);
h3d__Matrix hxd_fmt_fbx_Geometry_getGeomMatrix(hxd__fmt__fbx__Geometry);
void hxd_fmt_fbx_HMDOut_new(hxd__fmt__fbx__HMDOut,String);
double hxd_fmt_fbx_HMDOut_int32tof(hxd__fmt__fbx__HMDOut,int);
bool hxd_fmt_fbx_HMDOut_keepJoint(hxd__fmt__fbx__HMDOut,h3d__anim__Joint);
vbyte* hxd_fmt_fbx_HMDOut_buildTangents(hxd__fmt__fbx__HMDOut,hxd__fmt__fbx__Geometry);
vvirtual* hxd_fmt_fbx_HMDOut_buildGeom(hxd__fmt__fbx__HMDOut,hxd__fmt__fbx__Geometry,h3d__anim__Skin,haxe__io__BytesOutput,bool);
void fun$3447(venum*,hxd__fmt__fbx__TmpObject);
vvirtual* fun$3448(venum*,hxd__fmt__fbx__TmpObject);
void fun$3449(h3d__anim__Skin);
int fun$3450(venum*);
void hxd_fmt_fbx_HMDOut_addModels(hxd__fmt__fbx__HMDOut,bool);
String hxd_fmt_fbx_HMDOut_makeTexturePath(hxd__fmt__fbx__HMDOut,vvirtual*);
hxd__fmt__hmd__Skin hxd_fmt_fbx_HMDOut_makeSkin(hxd__fmt__fbx__HMDOut,h3d__anim__Skin,hxd__fmt__fbx__TmpObject);
hxd__fmt__hmd__Position hxd_fmt_fbx_HMDOut_makePosition(hxd__fmt__fbx__HMDOut,h3d__Matrix);
void hxd_fmt_fbx_HMDOut_writeFloat(hxd__fmt__fbx__HMDOut,double);
int fun$3451(h3d__anim__LinearObject,h3d__anim__LinearObject);
hxd__fmt__hmd__Animation hxd_fmt_fbx_HMDOut_makeAnimation(hxd__fmt__fbx__HMDOut,h3d__anim__Animation);
hxd__fmt__hmd__Data hxd_fmt_fbx_HMDOut_toHMD(hxd__fmt__fbx__HMDOut,String,bool);
vvirtual* hxd_fmt_fbx_Parser_parse(haxe__io__Bytes);
void hxd_fmt_fbx_Parser_new(hxd__fmt__fbx__Parser);
vvirtual* hxd_fmt_fbx_Parser_parseText(hxd__fmt__fbx__Parser,String);
vvirtual* hxd_fmt_fbx_Parser_parseBytes(hxd__fmt__fbx__Parser,haxe__io__Bytes);
hl__types__ArrayObj hxd_fmt_fbx_Parser_parseNodes(hxd__fmt__fbx__Parser);
vvirtual* hxd_fmt_fbx_Parser_parseNode(hxd__fmt__fbx__Parser);
void hxd_fmt_fbx_Parser_parseBinaryNodes(hxd__fmt__fbx__Parser,hl__types__ArrayObj);
vvirtual* hxd_fmt_fbx_Parser_parseBinaryNode(hxd__fmt__fbx__Parser,int);
venum* hxd_fmt_fbx_Parser_readBinaryProperty(hxd__fmt__fbx__Parser);
void hxd_fmt_fbx_Parser_except(hxd__fmt__fbx__Parser,venum*);
venum* hxd_fmt_fbx_Parser_peek(hxd__fmt__fbx__Parser);
venum* hxd_fmt_fbx_Parser_next(hxd__fmt__fbx__Parser);
vdynamic* hxd_fmt_fbx_Parser_error(hxd__fmt__fbx__Parser,String);
vdynamic* hxd_fmt_fbx_Parser_unexpected(hxd__fmt__fbx__Parser,venum*);
String hxd_fmt_fbx_Parser_tokenStr(hxd__fmt__fbx__Parser,venum*);
int hxd_fmt_fbx_Parser_nextChar(hxd__fmt__fbx__Parser);
int hxd_fmt_fbx_Parser_getVersionedInt32(hxd__fmt__fbx__Parser);
int hxd_fmt_fbx_Parser_getInt32(hxd__fmt__fbx__Parser);
int hxd_fmt_fbx_Parser_getInt16(hxd__fmt__fbx__Parser);
double hxd_fmt_fbx_Parser_getFloat(hxd__fmt__fbx__Parser);
double hxd_fmt_fbx_Parser_getDouble(hxd__fmt__fbx__Parser);
double hxd_fmt_fbx_Parser_i64ToFloat(hxd__fmt__fbx__Parser,haxe___Int64_____Int64);
int hxd_fmt_fbx_Parser_getByte(hxd__fmt__fbx__Parser);
String hxd_fmt_fbx_Parser_getBuf(hxd__fmt__fbx__Parser,int,int);
bool hxd_fmt_fbx_Parser_isIdentChar(hxd__fmt__fbx__Parser,int);
venum* hxd_fmt_fbx_Parser_nextToken(hxd__fmt__fbx__Parser);
int hxd_fmt_hmd__Data_GeometryDataFormat_Impl___new(int);
int hxd_fmt_hmd__Data_GeometryDataFormat_Impl__getSize(int);
int hxd_fmt_hmd__Data_GeometryDataFormat_Impl__toInt(int);
String hxd_fmt_hmd__Data_GeometryDataFormat_Impl__toString(int);
int hxd_fmt_hmd__Data_GeometryDataFormat_Impl__fromInt(int);
void hxd_fmt_hmd_Position_new(hxd__fmt__hmd__Position);
void hxd_fmt_hmd_Position_loadQuaternion(hxd__fmt__hmd__Position,h3d__Quat);
double hxd_fmt_hmd_Position_get_qw(hxd__fmt__hmd__Position);
h3d__Matrix hxd_fmt_hmd_Position_toMatrix(hxd__fmt__hmd__Position,bool*);
void hxd_fmt_hmd_GeometryFormat_new(hxd__fmt__hmd__GeometryFormat,String,int);
void hxd_fmt_hmd_Geometry_new(hxd__fmt__hmd__Geometry);
int hxd_fmt_hmd_Geometry_get_indexCount(hxd__fmt__hmd__Geometry);
void hxd_fmt_hmd_Material_new(hxd__fmt__hmd__Material);
void hxd_fmt_hmd_SkinJoint_new(hxd__fmt__hmd__SkinJoint);
void hxd_fmt_hmd_SkinSplit_new(hxd__fmt__hmd__SkinSplit);
void hxd_fmt_hmd_Skin_new(hxd__fmt__hmd__Skin);
void hxd_fmt_hmd_Model_new(hxd__fmt__hmd__Model);
void hxd_fmt_hmd_AnimationObject_new(hxd__fmt__hmd__AnimationObject);
void hxd_fmt_hmd_AnimationEvent_new(hxd__fmt__hmd__AnimationEvent);
void hxd_fmt_hmd_Animation_new(hxd__fmt__hmd__Animation);
void hxd_fmt_hmd_Data_new(hxd__fmt__hmd__Data);
void hxd_fmt_hmd__Library_FormatMap_new(hxd__fmt__hmd___Library__FormatMap,int,int,h3d__Vector,hxd__fmt__hmd___Library__FormatMap);
void hxd_fmt_hmd_GeometryBuffer_new(hxd__fmt__hmd__GeometryBuffer);
void hxd_fmt_hmd_Library_new(hxd__fmt__hmd__Library,hxd__res__Resource,hxd__fmt__hmd__Data);
haxe__io__Bytes hxd_fmt_hmd_Library_getData(hxd__fmt__hmd__Library);
vvirtual* hxd_fmt_hmd_Library_getDefaultFormat(hxd__fmt__hmd__Library,int);
vvirtual* hxd_fmt_hmd_Library_load(hxd__fmt__hmd__Library,hl__types__ArrayObj,hl__types__ArrayObj,int*);
hxd__fmt__hmd__GeometryBuffer hxd_fmt_hmd_Library_getBuffers(hxd__fmt__hmd__Library,hxd__fmt__hmd__Geometry,hl__types__ArrayObj,hl__types__ArrayObj,vdynamic*);
h3d__prim__HMDModel hxd_fmt_hmd_Library_makePrimitive(hxd__fmt__hmd__Library,int);
h3d__mat__Material hxd_fmt_hmd_Library_makeMaterial(hxd__fmt__hmd__Library,hxd__fmt__hmd__Model,int,vclosure*);
h3d__anim__Skin hxd_fmt_hmd_Library_makeSkin(hxd__fmt__hmd__Library,hxd__fmt__hmd__Skin);
vdynamic* hxd_fmt_hmd_Library_getModelProperty(hxd__fmt__hmd__Library,String,venum*,vdynamic*);
h3d__mat__Texture fun$3483(String);
h3d__scene__Object hxd_fmt_hmd_Library_makeObject(hxd__fmt__hmd__Library,vclosure*);
h3d__anim__Animation hxd_fmt_hmd_Library_loadAnimation(hxd__fmt__hmd__Library,String);
h3d__anim__LinearAnimation hxd_fmt_hmd_Library_makeAnimation(hxd__fmt__hmd__Library,hxd__fmt__hmd__Animation);
void hxd_fmt_hmd_Library_loadSkin(hxd__fmt__hmd__Library,hxd__fmt__hmd__Geometry,h3d__anim__Skin);
int hxd_fmt_hmd_Library_ftoint32(hxd__fmt__hmd__Library,float);
void hxd_fmt_hmd_Reader_new(hxd__fmt__hmd__Reader,haxe__io__Input);
venum* hxd_fmt_hmd_Reader_readProperty(hxd__fmt__hmd__Reader);
hl__types__ArrayObj hxd_fmt_hmd_Reader_readProps(hxd__fmt__hmd__Reader);
String hxd_fmt_hmd_Reader_readName(hxd__fmt__hmd__Reader);
hxd__fmt__hmd__Position hxd_fmt_hmd_Reader_readPosition(hxd__fmt__hmd__Reader,bool*);
h3d__col__Bounds hxd_fmt_hmd_Reader_readBounds(hxd__fmt__hmd__Reader);
hxd__fmt__hmd__Skin hxd_fmt_hmd_Reader_readSkin(hxd__fmt__hmd__Reader);
hxd__fmt__hmd__Data hxd_fmt_hmd_Reader_readHeader(hxd__fmt__hmd__Reader);
hxd__fmt__hmd__Data hxd_fmt_hmd_Reader_read(hxd__fmt__hmd__Reader);
void hxd_fmt_hmd_Writer_new(hxd__fmt__hmd__Writer,haxe__io__Output);
void hxd_fmt_hmd_Writer_writeProperty(hxd__fmt__hmd__Writer,venum*);
void hxd_fmt_hmd_Writer_writeProps(hxd__fmt__hmd__Writer,hl__types__ArrayObj);
void hxd_fmt_hmd_Writer_writeName(hxd__fmt__hmd__Writer,String);
void hxd_fmt_hmd_Writer_writeFloat(hxd__fmt__hmd__Writer,double);
void hxd_fmt_hmd_Writer_writePosition(hxd__fmt__hmd__Writer,hxd__fmt__hmd__Position,bool*);
void hxd_fmt_hmd_Writer_writeBounds(hxd__fmt__hmd__Writer,h3d__col__Bounds);
void hxd_fmt_hmd_Writer_writeSkin(hxd__fmt__hmd__Writer,hxd__fmt__hmd__Skin);
void hxd_fmt_hmd_Writer_write(hxd__fmt__hmd__Writer,hxd__fmt__hmd__Data);
int hxd_fs_FileEntry_getSign(hxd__fs__FileEntry);
haxe__io__Bytes hxd_fs_FileEntry_getBytes(hxd__fs__FileEntry);
String hxd_fs_FileEntry_getText(hxd__fs__FileEntry);
void hxd_fs_FileEntry_open(hxd__fs__FileEntry);
void hxd_fs_FileEntry_skip(hxd__fs__FileEntry,int);
int hxd_fs_FileEntry_readByte(hxd__fs__FileEntry);
void hxd_fs_FileEntry_read(hxd__fs__FileEntry,haxe__io__Bytes,int,int);
void hxd_fs_FileEntry_close(hxd__fs__FileEntry);
void hxd_fs_FileEntry_load(hxd__fs__FileEntry,vclosure*);
void hxd_fs_FileEntry_loadBitmap(hxd__fs__FileEntry,vclosure*);
void hxd_fs_FileEntry_watch(hxd__fs__FileEntry,vclosure*);
bool hxd_fs_FileEntry_exists(hxd__fs__FileEntry,String);
hxd__fs__FileEntry hxd_fs_FileEntry_get(hxd__fs__FileEntry,String);
hxd__impl__ArrayIterator_hxd_fs_FileEntry hxd_fs_FileEntry_iterator(hxd__fs__FileEntry);
bool hxd_fs_FileEntry_get_isAvailable(hxd__fs__FileEntry);
bool hxd_fs_FileEntry_get_isDirectory(hxd__fs__FileEntry);
int hxd_fs_FileEntry_get_size(hxd__fs__FileEntry);
String hxd_fs_FileEntry_get_path(hxd__fs__FileEntry);
String hxd_fs_FileEntry_get_directory(hxd__fs__FileEntry);
String hxd_fs_FileEntry_get_extension(hxd__fs__FileEntry);
void hxd_fs_BytesFileEntry_new(hxd__fs__BytesFileEntry,String,haxe__io__Bytes);
String hxd_fs_BytesFileEntry_get_path(hxd__fs__BytesFileEntry);
int hxd_fs_BytesFileEntry_getSign(hxd__fs__BytesFileEntry);
haxe__io__Bytes hxd_fs_BytesFileEntry_getBytes(hxd__fs__BytesFileEntry);
void hxd_fs_BytesFileEntry_open(hxd__fs__BytesFileEntry);
void hxd_fs_BytesFileEntry_skip(hxd__fs__BytesFileEntry,int);
int hxd_fs_BytesFileEntry_readByte(hxd__fs__BytesFileEntry);
void hxd_fs_BytesFileEntry_read(hxd__fs__BytesFileEntry,haxe__io__Bytes,int,int);
void hxd_fs_BytesFileEntry_close(hxd__fs__BytesFileEntry);
void hxd_fs_BytesFileEntry_load(hxd__fs__BytesFileEntry,vclosure*);
void hxd_fs_BytesFileEntry_loadBitmap(hxd__fs__BytesFileEntry,vclosure*);
bool hxd_fs_BytesFileEntry_exists(hxd__fs__BytesFileEntry,String);
hxd__fs__FileEntry hxd_fs_BytesFileEntry_get(hxd__fs__BytesFileEntry,String);
hxd__impl__ArrayIterator_hxd_fs_FileEntry hxd_fs_BytesFileEntry_iterator(hxd__fs__BytesFileEntry);
int hxd_fs_BytesFileEntry_get_size(hxd__fs__BytesFileEntry);
void hxd_fs_BytesFileSystem_new(hxd__fs__BytesFileSystem);
hxd__fs__FileEntry hxd_fs_BytesFileSystem_getRoot(hxd__fs__BytesFileSystem);
haxe__io__Bytes hxd_fs_BytesFileSystem_getBytes(hxd__fs__BytesFileSystem,String);
bool hxd_fs_BytesFileSystem_exists(hxd__fs__BytesFileSystem,String);
hxd__fs__BytesFileEntry hxd_fs_BytesFileSystem_get(hxd__fs__BytesFileSystem,String);
void hxd_fs_BytesFileSystem_dispose(hxd__fs__BytesFileSystem);
hl__types__ArrayObj hxd_fs_BytesFileSystem_dir(hxd__fs__BytesFileSystem,String);
void hxd_fs_Convert_new(hxd__fs__Convert,String,String);
void hxd_fs_Convert_convert(hxd__fs__Convert);
void hxd_fs_Convert_save(hxd__fs__Convert,haxe__io__Bytes);
void hxd_fs_Convert_command(hxd__fs__Convert,String,hl__types__ArrayObj);
void hxd_fs_ConvertFBX2HMD_new(hxd__fs__ConvertFBX2HMD);
void hxd_fs_ConvertFBX2HMD_convert(hxd__fs__ConvertFBX2HMD);
void hxd_fs_Command_new(hxd__fs__Command,String,String,String,hl__types__ArrayObj);
void hxd_fs_Command_convert(hxd__fs__Command);
void hxd_fs_ConvertWAV2MP3_new(hxd__fs__ConvertWAV2MP3);
void hxd_fs_ConvertWAV2MP3_convert(hxd__fs__ConvertWAV2MP3);
void hxd_fs_ConvertWAV2OGG_new(hxd__fs__ConvertWAV2OGG);
void hxd_fs_ConvertWAV2OGG_convert(hxd__fs__ConvertWAV2OGG);
void hxd_fs_ConvertTGA2PNG_new(hxd__fs__ConvertTGA2PNG);
void hxd_fs_ConvertTGA2PNG_convert(hxd__fs__ConvertTGA2PNG);
void hxd_fs_ConvertFNT2BFNT_new(hxd__fs__ConvertFNT2BFNT);
void hxd_fs_ConvertFNT2BFNT_convert(hxd__fs__ConvertFNT2BFNT);
h2d__Tile hxd_fs_ConvertFNT2BFNT_resolveTile(hxd__fs__ConvertFNT2BFNT,String);
void hxd_fs__EmbedFileSystem_EmbedEntry_new(hxd__fs___EmbedFileSystem__EmbedEntry,hxd__fs__EmbedFileSystem,String,String,String);
int hxd_fs__EmbedFileSystem_EmbedEntry_getSign(hxd__fs___EmbedFileSystem__EmbedEntry);
haxe__io__Bytes hxd_fs__EmbedFileSystem_EmbedEntry_getBytes(hxd__fs___EmbedFileSystem__EmbedEntry);
void hxd_fs__EmbedFileSystem_EmbedEntry_open(hxd__fs___EmbedFileSystem__EmbedEntry);
void hxd_fs__EmbedFileSystem_EmbedEntry_skip(hxd__fs___EmbedFileSystem__EmbedEntry,int);
int hxd_fs__EmbedFileSystem_EmbedEntry_readByte(hxd__fs___EmbedFileSystem__EmbedEntry);
void hxd_fs__EmbedFileSystem_EmbedEntry_read(hxd__fs___EmbedFileSystem__EmbedEntry,haxe__io__Bytes,int,int);
void hxd_fs__EmbedFileSystem_EmbedEntry_close(hxd__fs___EmbedFileSystem__EmbedEntry);
void hxd_fs__EmbedFileSystem_EmbedEntry_load(hxd__fs___EmbedFileSystem__EmbedEntry,vclosure*);
void hxd_fs__EmbedFileSystem_EmbedEntry_loadBitmap(hxd__fs___EmbedFileSystem__EmbedEntry,vclosure*);
bool hxd_fs__EmbedFileSystem_EmbedEntry_get_isDirectory(hxd__fs___EmbedFileSystem__EmbedEntry);
String hxd_fs__EmbedFileSystem_EmbedEntry_get_path(hxd__fs___EmbedFileSystem__EmbedEntry);
bool hxd_fs__EmbedFileSystem_EmbedEntry_exists(hxd__fs___EmbedFileSystem__EmbedEntry,String);
hxd__fs__FileEntry hxd_fs__EmbedFileSystem_EmbedEntry_get(hxd__fs___EmbedFileSystem__EmbedEntry,String);
int hxd_fs__EmbedFileSystem_EmbedEntry_get_size(hxd__fs___EmbedFileSystem__EmbedEntry);
hxd__impl__ArrayIterator_hxd_fs_FileEntry hxd_fs__EmbedFileSystem_EmbedEntry_iterator(hxd__fs___EmbedFileSystem__EmbedEntry);
String hxd_fs_EmbedFileSystem_resolve(String);
void hxd_fs_EmbedFileSystem_new(hxd__fs__EmbedFileSystem,vdynamic*);
hxd__fs__FileEntry hxd_fs_EmbedFileSystem_getRoot(hxd__fs__EmbedFileSystem);
hl__types__ArrayObj hxd_fs_EmbedFileSystem_splitPath(hxd__fs__EmbedFileSystem,String);
hl__types__ArrayObj hxd_fs_EmbedFileSystem_subFiles(hxd__fs__EmbedFileSystem,String);
bool hxd_fs_EmbedFileSystem_isDirectory(hxd__fs__EmbedFileSystem,String);
bool hxd_fs_EmbedFileSystem_exists(hxd__fs__EmbedFileSystem,String);
hxd__fs___EmbedFileSystem__EmbedEntry hxd_fs_EmbedFileSystem_get(hxd__fs__EmbedFileSystem,String);
void hxd_fs_EmbedFileSystem_dispose(hxd__fs__EmbedFileSystem);
hl__types__ArrayObj hxd_fs_EmbedFileSystem_dir(hxd__fs__EmbedFileSystem,String);
void hxd_fs_FileInput_new(hxd__fs__FileInput,hxd__fs__FileEntry);
void hxd_fs_FileInput_skip(hxd__fs__FileInput,int);
int hxd_fs_FileInput_readByte(hxd__fs__FileInput);
int hxd_fs_FileInput_readBytes(hxd__fs__FileInput,haxe__io__Bytes,int,int);
void hxd_fs_FileInput_close(hxd__fs__FileInput);
hxd__BitmapData hxd_fs__LoadedBitmap_LoadedBitmap_Impl___new(hxd__BitmapData);
hxd__BitmapData hxd_fs__LoadedBitmap_LoadedBitmap_Impl__toBitmap(hxd__BitmapData);
hxd__BitmapData hxd_fs__LoadedBitmap_LoadedBitmap_Impl__toNative(hxd__BitmapData);
void hxd_fs__LocalFileSystem_LocalEntry_checkFiles(void);
void hxd_fs__LocalFileSystem_LocalEntry_new(hxd__fs___LocalFileSystem__LocalEntry,hxd__fs__LocalFileSystem,String,String,String);
int hxd_fs__LocalFileSystem_LocalEntry_getSign(hxd__fs___LocalFileSystem__LocalEntry);
haxe__io__Bytes hxd_fs__LocalFileSystem_LocalEntry_getBytes(hxd__fs___LocalFileSystem__LocalEntry);
void hxd_fs__LocalFileSystem_LocalEntry_open(hxd__fs___LocalFileSystem__LocalEntry);
void hxd_fs__LocalFileSystem_LocalEntry_skip(hxd__fs___LocalFileSystem__LocalEntry,int);
int hxd_fs__LocalFileSystem_LocalEntry_readByte(hxd__fs___LocalFileSystem__LocalEntry);
void hxd_fs__LocalFileSystem_LocalEntry_read(hxd__fs___LocalFileSystem__LocalEntry,haxe__io__Bytes,int,int);
void hxd_fs__LocalFileSystem_LocalEntry_close(hxd__fs___LocalFileSystem__LocalEntry);
bool hxd_fs__LocalFileSystem_LocalEntry_get_isDirectory(hxd__fs___LocalFileSystem__LocalEntry);
void hxd_fs__LocalFileSystem_LocalEntry_load(hxd__fs___LocalFileSystem__LocalEntry,vclosure*);
void hxd_fs__LocalFileSystem_LocalEntry_loadBitmap(hxd__fs___LocalFileSystem__LocalEntry,vclosure*);
String hxd_fs__LocalFileSystem_LocalEntry_get_path(hxd__fs___LocalFileSystem__LocalEntry);
bool hxd_fs__LocalFileSystem_LocalEntry_exists(hxd__fs___LocalFileSystem__LocalEntry,String);
hxd__fs__FileEntry hxd_fs__LocalFileSystem_LocalEntry_get(hxd__fs___LocalFileSystem__LocalEntry,String);
int hxd_fs__LocalFileSystem_LocalEntry_get_size(hxd__fs___LocalFileSystem__LocalEntry);
hxd__impl__ArrayIterator_hxd_fs_FileEntry hxd_fs__LocalFileSystem_LocalEntry_iterator(hxd__fs___LocalFileSystem__LocalEntry);
double hxd_fs__LocalFileSystem_LocalEntry_getModifTime(hxd__fs___LocalFileSystem__LocalEntry);
void hxd_fs__LocalFileSystem_LocalEntry_watch(hxd__fs___LocalFileSystem__LocalEntry,vclosure*);
void hxd_fs_LocalFileSystem_new(hxd__fs__LocalFileSystem,String);
void hxd_fs_LocalFileSystem_addConvert(hxd__fs__LocalFileSystem,hxd__fs__Convert);
void hxd_fs_LocalFileSystem_onConvert(hxd__fs__LocalFileSystem,hxd__fs__FileEntry);
String hxd_fs_LocalFileSystem_getAbsolutePath(hxd__fs__LocalFileSystem,hxd__fs__FileEntry);
hxd__fs__FileEntry hxd_fs_LocalFileSystem_getRoot(hxd__fs__LocalFileSystem);
bool hxd_fs_LocalFileSystem_checkPath(hxd__fs__LocalFileSystem,String);
hxd__fs___LocalFileSystem__LocalEntry hxd_fs_LocalFileSystem_open(hxd__fs__LocalFileSystem,String,bool*);
bool hxd_fs_LocalFileSystem_exists(hxd__fs__LocalFileSystem,String);
hxd__fs___LocalFileSystem__LocalEntry hxd_fs_LocalFileSystem_get(hxd__fs__LocalFileSystem,String);
void hxd_fs_LocalFileSystem_dispose(hxd__fs__LocalFileSystem);
double hxd_fs_LocalFileSystem_getFileTime(hxd__fs__LocalFileSystem,String);
void fun$3600(venum*);
void hxd_fs_LocalFileSystem_convert(hxd__fs__LocalFileSystem,hxd__fs___LocalFileSystem__LocalEntry);
hl__types__ArrayObj hxd_fs_LocalFileSystem_dir(hxd__fs__LocalFileSystem,String);
void hxd_fs_NotFound_new(hxd__fs__NotFound,String);
String hxd_fs_NotFound_toString(hxd__fs__NotFound);
vbyte* hxd_fs_NotFound___string(hxd__fs__NotFound);
void hxd_impl_ArrayIterator_new(hxd__impl__ArrayIterator,hl__types__ArrayDyn);
bool hxd_impl_ArrayIterator_hasNext(hxd__impl__ArrayIterator);
vdynamic* hxd_impl_ArrayIterator_next(hxd__impl__ArrayIterator);
void hxd_impl_ArrayIterator_h2d_Object_new(hxd__impl__ArrayIterator_h2d_Object,hl__types__ArrayObj);
bool hxd_impl_ArrayIterator_h2d_Object_hasNext(hxd__impl__ArrayIterator_h2d_Object);
h2d__Object hxd_impl_ArrayIterator_h2d_Object_next(hxd__impl__ArrayIterator_h2d_Object);
void hxd_impl_ArrayIterator_h3d_scene_Object_new(hxd__impl__ArrayIterator_h3d_scene_Object,hl__types__ArrayObj);
bool hxd_impl_ArrayIterator_h3d_scene_Object_hasNext(hxd__impl__ArrayIterator_h3d_scene_Object);
h3d__scene__Object hxd_impl_ArrayIterator_h3d_scene_Object_next(hxd__impl__ArrayIterator_h3d_scene_Object);
void hxd_impl_ArrayIterator_hxd_fs_FileEntry_new(hxd__impl__ArrayIterator_hxd_fs_FileEntry,hl__types__ArrayObj);
bool hxd_impl_ArrayIterator_hxd_fs_FileEntry_hasNext(hxd__impl__ArrayIterator_hxd_fs_FileEntry);
hxd__fs__FileEntry hxd_impl_ArrayIterator_hxd_fs_FileEntry_next(hxd__impl__ArrayIterator_hxd_fs_FileEntry);
void hxd_impl_ArrayIterator_hxd_res_Any_new(hxd__impl__ArrayIterator_hxd_res_Any,hl__types__ArrayObj);
bool hxd_impl_ArrayIterator_hxd_res_Any_hasNext(hxd__impl__ArrayIterator_hxd_res_Any);
hxd__res__Any hxd_impl_ArrayIterator_hxd_res_Any_next(hxd__impl__ArrayIterator_hxd_res_Any);
vbyte* hxd_impl__UncheckedBytes_UncheckedBytes_Impl___new(vbyte*);
int hxd_impl__UncheckedBytes_UncheckedBytes_Impl__get(vbyte*,int);
int hxd_impl__UncheckedBytes_UncheckedBytes_Impl__set(vbyte*,int,int);
vbyte* hxd_impl__UncheckedBytes_UncheckedBytes_Impl__fromBytes(haxe__io__Bytes);
void hxd_prefab_Context_new(hxd__prefab__Context);
void hxd_prefab_Context_init(hxd__prefab__Context);
hxd__prefab__Context hxd_prefab_Context_clone(hxd__prefab__Context,hxd__prefab__Prefab);
h3d__scene__Object hxd_prefab_Context_loadModel(hxd__prefab__Context,String);
h3d__anim__Animation hxd_prefab_Context_loadAnimation(hxd__prefab__Context,String);
h3d__mat__Texture hxd_prefab_Context_loadTexture(hxd__prefab__Context,String);
vvirtual* hxd_prefab_Context_loadShader(hxd__prefab__Context,String);
h3d__scene__Object hxd_prefab_Context_locateObject(hxd__prefab__Context,String);
void hxd_prefab_ContextShared_new(hxd__prefab__ContextShared);
void hxd_prefab_ContextShared_onError(hxd__prefab__ContextShared,vdynamic*);
hl__types__ArrayObj hxd_prefab_ContextShared_elements(hxd__prefab__ContextShared);
hl__types__ArrayObj hxd_prefab_ContextShared_getContexts(hxd__prefab__ContextShared,hxd__prefab__Prefab);
hl__types__ArrayObj hxd_prefab_ContextShared_loadDir(hxd__prefab__ContextShared,String,String);
hxd__res__Any hxd_prefab_ContextShared_loadPrefabDat(hxd__prefab__ContextShared,String,String,String);
void hxd_prefab_ContextShared_savePrefabDat(hxd__prefab__ContextShared,String,String,String,haxe__io__Bytes);
hxd__prefab__Prefab hxd_prefab_ContextShared_loadPrefab(hxd__prefab__ContextShared,String);
vvirtual* hxd_prefab_ContextShared_loadShader(hxd__prefab__ContextShared,String);
h3d__scene__Object hxd_prefab_ContextShared_loadModel(hxd__prefab__ContextShared,String);
h3d__anim__Animation hxd_prefab_ContextShared_loadAnimation(hxd__prefab__ContextShared,String);
h3d__mat__Texture hxd_prefab_ContextShared_loadTexture(hxd__prefab__ContextShared,String);
haxe__io__Bytes hxd_prefab_ContextShared_loadBytes(hxd__prefab__ContextShared,String);
haxe__io__Bytes hxd_prefab_ContextShared_loadBakedBytes(hxd__prefab__ContextShared,String);
vdynamic* fun$3641(haxe__ds__StringMap);
void hxd_prefab_ContextShared_saveBakedBytes(hxd__prefab__ContextShared,String,haxe__io__Bytes);
void hxd_prefab_ContextShared_saveTexture(hxd__prefab__ContextShared,String,haxe__io__Bytes,String,String);
void hxd_prefab_ContextShared_saveBakedFile(hxd__prefab__ContextShared,haxe__io__Bytes);
haxe__io__Bytes hxd_prefab_ContextShared_loadBakedFile(hxd__prefab__ContextShared);
void hxd_prefab_ContextShared_loadBakedData(hxd__prefab__ContextShared);
hl__types__ArrayObj hxd_prefab_ContextShared_getChildrenRoots(hxd__prefab__ContextShared,h3d__scene__Object,hxd__prefab__Prefab,hl__types__ArrayObj);
void fun$3642(venum*,h3d__scene__Object);
hl__types__ArrayObj hxd_prefab_ContextShared_getObjects(hxd__prefab__ContextShared,hxd__prefab__Prefab,hl__Class);
void fun$3643(venum*,h3d__scene__Object);
hl__types__ArrayObj hxd_prefab_ContextShared_getMaterials(hxd__prefab__ContextShared,hxd__prefab__Prefab);
hxd__prefab__Prefab hxd_prefab_Prefab_loadRec(vdynamic*,hxd__prefab__Prefab);
void hxd_prefab_Prefab_new(hxd__prefab__Prefab,hxd__prefab__Prefab);
String hxd_prefab_Prefab_set_name(hxd__prefab__Prefab,String);
String hxd_prefab_Prefab_set_source(hxd__prefab__Prefab,String);
hxd__prefab__Prefab hxd_prefab_Prefab_set_parent(hxd__prefab__Prefab,hxd__prefab__Prefab);
vdynamic* hxd_prefab_Prefab_iterator(hxd__prefab__Prefab);
void hxd_prefab_Prefab_load(hxd__prefab__Prefab,vdynamic*);
vdynamic* hxd_prefab_Prefab_save(hxd__prefab__Prefab);
hxd__prefab__Context hxd_prefab_Prefab_makeInstance(hxd__prefab__Prefab,hxd__prefab__Context);
void hxd_prefab_Prefab_updateInstance(hxd__prefab__Prefab,hxd__prefab__Context,String);
vdynamic* hxd_prefab_Prefab_saveRec(hxd__prefab__Prefab);
void hxd_prefab_Prefab_reload(hxd__prefab__Prefab,vdynamic*);
hxd__prefab__Context hxd_prefab_Prefab_makeInstanceRec(hxd__prefab__Prefab,hxd__prefab__Context);
hxd__prefab__Prefab hxd_prefab_Prefab_getPrefabByName(hxd__prefab__Prefab,String);
hxd__prefab__Prefab hxd_prefab_Prefab_getOpt(hxd__prefab__Prefab,hl__Class,String);
hxd__prefab__Prefab hxd_prefab_Prefab_get(hxd__prefab__Prefab,hl__Class,String);
hxd__prefab__Prefab fun$3651(hl__Class,hxd__prefab__Prefab);
hl__types__ArrayObj hxd_prefab_Prefab_getAll(hxd__prefab__Prefab,hl__Class,hl__types__ArrayObj);
hl__types__ArrayDyn hxd_prefab_Prefab_findAll(hxd__prefab__Prefab,vclosure*,hl__types__ArrayDyn);
hl__types__ArrayObj hxd_prefab_Prefab_flatten(hxd__prefab__Prefab,hl__Class,hl__types__ArrayObj);
void hxd_prefab_Prefab_visitChildren(hxd__prefab__Prefab,vclosure*);
hxd__prefab__Prefab hxd_prefab_Prefab_getParent(hxd__prefab__Prefab,hl__Class);
hxd__prefab__Prefab hxd_prefab_Prefab_to(hxd__prefab__Prefab,hl__Class);
String hxd_prefab_Prefab_getAbsPath(hxd__prefab__Prefab);
String hxd_prefab_Prefab_getDefaultName(hxd__prefab__Prefab);
hxd__prefab__Prefab hxd_prefab_Prefab_clone(hxd__prefab__Prefab);
haxe__ds__StringMap hxd_prefab_Library_getRegistered(void);
bool hxd_prefab_Library_isOfType(String,hl__Class);
bool hxd_prefab_Library_register(String,hl__Class,String);
hxd__prefab__Prefab hxd_prefab_Library_create(String);
String hxd_prefab_Library_getPrefabType(String);
void hxd_prefab_Library_new(hxd__prefab__Library);
void hxd_prefab_Library_load(hxd__prefab__Library,vdynamic*);
void hxd_prefab_Library_reload(hxd__prefab__Library,vdynamic*);
vdynamic* hxd_prefab_Library_save(hxd__prefab__Library);
hxd__prefab__Context hxd_prefab_Library_makeInstance(hxd__prefab__Library,hxd__prefab__Context);
void hxd_prefab_Unknown_new(hxd__prefab__Unknown,hxd__prefab__Prefab);
void hxd_prefab_Unknown_load(hxd__prefab__Unknown,vdynamic*);
vdynamic* hxd_prefab_Unknown_save(hxd__prefab__Unknown);
void hxd_prefab_rfx_RendererFX_new(hxd__prefab__rfx__RendererFX,hxd__prefab__Prefab);
void hxd_prefab_rfx_RendererFX_apply(hxd__prefab__rfx__RendererFX,h3d__scene__Renderer,venum*);
vdynamic* hxd_prefab_rfx_RendererFX_save(hxd__prefab__rfx__RendererFX);
void hxd_prefab_rfx_RendererFX_load(hxd__prefab__rfx__RendererFX,vdynamic*);
void hxd_prefab_rfx_RendererFX_dispose(hxd__prefab__rfx__RendererFX);
void hxd_res__Any_SingleFileSystem_new(hxd__res___Any__SingleFileSystem,String,haxe__io__Bytes);
haxe__io__Bytes hxd_res__Any_SingleFileSystem_getBytes(hxd__res___Any__SingleFileSystem,String);
void hxd_res_Resource_new(hxd__res__Resource,hxd__fs__FileEntry);
String hxd_res_Resource_get_name(hxd__res__Resource);
String hxd_res_Resource_toString(hxd__res__Resource);
vbyte* hxd_res_Resource___string(hxd__res__Resource);
void hxd_res_Resource_watch(hxd__res__Resource,vclosure*);
hxd__res__Any hxd_res_Any_fromBytes(String,haxe__io__Bytes);
void hxd_res_Any_new(hxd__res__Any,hxd__res__Loader,hxd__fs__FileEntry);
hxd__res__Model hxd_res_Any_toModel(hxd__res__Any);
h3d__mat__Texture hxd_res_Any_toTexture(hxd__res__Any);
h2d__Tile hxd_res_Any_toTile(hxd__res__Any);
String hxd_res_Any_toText(hxd__res__Any);
hxd__res__Image hxd_res_Any_toImage(hxd__res__Any);
hxd__res__Sound hxd_res_Any_toSound(hxd__res__Any);
hxd__res__Prefab hxd_res_Any_toPrefab(hxd__res__Any);
hxd__res__Resource hxd_res_Any_to(hxd__res__Any,hl__Class);
hxd__impl__ArrayIterator_hxd_res_Any hxd_res_Any_iterator(hxd__res__Any);
void hxd_res_BitmapFont_new(hxd__res__BitmapFont,hxd__fs__FileEntry);
h2d__Font hxd_res_BitmapFont_toFont(hxd__res__BitmapFont);
h2d__Tile hxd_res_BitmapFont_resolveTile(hxd__res__BitmapFont,String);
h2d__Font hxd_res_DefaultFont_get(void);
bool hxd_res__Image_ImageFormat_Impl__get_useAsyncDecode(int);
int hxd_res__Image_ImageFormat_Impl__toInt(int);
hxd__Pixels hxd_res_Image_decodeJPG(haxe__io__Bytes,int,int,venum*,bool);
hxd__Pixels hxd_res_Image_decodePNG(haxe__io__Bytes,int,int,venum*,bool);
void hxd_res_Image_new(hxd__res__Image,hxd__fs__FileEntry);
int hxd_res_Image_getFormat(hxd__res__Image);
vvirtual* hxd_res_Image_getSize(hxd__res__Image);
hxd__Pixels hxd_res_Image_getPixels(hxd__res__Image,venum*,vdynamic*);
hxd__BitmapData hxd_res_Image_toBitmap(hxd__res__Image);
void hxd_res_Image_watchCallb(hxd__res__Image);
void fun$3745(hxd__res__Image);
void fun$3746(hxd__res__Image,hxd__BitmapData);
void hxd_res_Image_loadTexture(hxd__res__Image);
h3d__mat__Texture hxd_res_Image_toTexture(hxd__res__Image);
h2d__Tile hxd_res_Image_toTile(hxd__res__Image);
void hxd_res_Loader_new(hxd__res__Loader,vvirtual*);
void hxd_res_Loader_cleanCache(hxd__res__Loader);
hl__types__ArrayObj hxd_res_Loader_dir(hxd__res__Loader,String);
bool hxd_res_Loader_exists(hxd__res__Loader,String);
hxd__res__Any hxd_res_Loader_load(hxd__res__Loader,String);
hxd__res__Resource hxd_res_Loader_loadCache(hxd__res__Loader,String,hl__Class);
void hxd_res_Loader_dispose(hxd__res__Loader);
void hxd_res_Model_new(hxd__res__Model,hxd__fs__FileEntry);
hxd__fmt__hmd__Library hxd_res_Model_toHmd(hxd__res__Model);
void hxd_res_Prefab_new(hxd__res__Prefab,hxd__fs__FileEntry);
void fun$3747(hxd__res__Prefab);
hxd__prefab__Prefab hxd_res_Prefab_load(hxd__res__Prefab);
bool hxd_res_Sound_supportedFormat(venum*);
bool hxd_res_Sound_startWorker(void);
void hxd_res_Sound_new(hxd__res__Sound,hxd__fs__FileEntry);
hxd__snd__Data hxd_res_Sound_getData(hxd__res__Sound);
void hxd_res_Sound_dispose(hxd__res__Sound);
void hxd_res_Sound_stop(hxd__res__Sound);
hxd__snd__Channel hxd_res_Sound_play(hxd__res__Sound,vdynamic*,vdynamic*,hxd__snd__ChannelGroup,hxd__snd__SoundGroup);
void hxd_snd_ChannelBase_new(hxd__snd__ChannelBase);
hxd__snd__Effect hxd_snd_ChannelBase_getEffect(hxd__snd__ChannelBase,hl__Class);
double hxd_snd_ChannelBase_set_volume(hxd__snd__ChannelBase,double);
void hxd_snd_ChannelBase_fadeTo(hxd__snd__ChannelBase,double,vdynamic*,vclosure*);
void hxd_snd_ChannelBase_updateCurrentVolume(hxd__snd__ChannelBase,double);
hxd__snd__Effect hxd_snd_ChannelBase_addEffect(hxd__snd__ChannelBase,hxd__snd__Effect);
void hxd_snd_ChannelBase_removeEffect(hxd__snd__ChannelBase,hxd__snd__Effect);
void hxd_snd_Channel_new(hxd__snd__Channel);
void hxd_snd_Channel_onEnd(hxd__snd__Channel);
double hxd_snd_Channel_set_position(hxd__snd__Channel,double);
bool hxd_snd_Channel_set_pause(hxd__snd__Channel,bool);
void hxd_snd_Channel_updateCurrentVolume(hxd__snd__Channel,double);
void hxd_snd_Channel_calcAudibleGain(hxd__snd__Channel,double);
void hxd_snd_Channel_queueSound(hxd__snd__Channel,hxd__res__Sound);
void hxd_snd_Channel_stop(hxd__snd__Channel);
void hxd_snd_ChannelGroup_new(hxd__snd__ChannelGroup,String);
int hxd_snd_Data_formatBytes(venum*);
bool hxd_snd_Data_isLoading(hxd__snd__Data);
void hxd_snd_Data_decode(hxd__snd__Data,haxe__io__Bytes,int,int,int);
hxd__snd__Data hxd_snd_Data_resample(hxd__snd__Data,int,venum*,int);
void hxd_snd_Data_resampleBuffer(hxd__snd__Data,haxe__io__Bytes,int,haxe__io__Bytes,int,int,venum*,int,int);
void hxd_snd_Data_decodeBuffer(hxd__snd__Data,haxe__io__Bytes,int,int,int);
int hxd_snd_Data_getBytesPerSample(hxd__snd__Data);
void hxd_snd_Data_load(hxd__snd__Data,vclosure*);
double hxd_snd_Data_get_duration(hxd__snd__Data);
void hxd_snd_EffectDriver_new(hxd__snd__EffectDriver);
void hxd_snd_EffectDriver_acquire(hxd__snd__EffectDriver);
void hxd_snd_EffectDriver_release(hxd__snd__EffectDriver);
void hxd_snd_EffectDriver_update(hxd__snd__EffectDriver,vdynamic*);
void hxd_snd_EffectDriver_bind(hxd__snd__EffectDriver,vdynamic*,hxd__snd__openal__SourceHandle);
void hxd_snd_EffectDriver_apply(hxd__snd__EffectDriver,vdynamic*,hxd__snd__openal__SourceHandle);
void hxd_snd_EffectDriver_unbind(hxd__snd__EffectDriver,vdynamic*,hxd__snd__openal__SourceHandle);
void hxd_snd_Effect_new(hxd__snd__Effect,String);
double hxd_snd_Effect_applyAudibleGainModifier(hxd__snd__Effect,double);
double hxd_snd_Effect_getVolumeModifier(hxd__snd__Effect);
void hxd_snd_Listener_new(hxd__snd__Listener);
void hxd_snd_Listener_syncCamera(hxd__snd__Listener,h3d__Camera);
void hxd_snd_Source_new(hxd__snd__Source,vvirtual*);
void hxd_snd_Source_dispose(hxd__snd__Source);
void hxd_snd_Buffer_new(hxd__snd__Buffer,vvirtual*);
void hxd_snd_Buffer_dispose(hxd__snd__Buffer);
hxd__snd__Manager hxd_snd_Manager_get(void);
hxd__snd__Effect hxd_snd_Manager_regEffect(hxd__snd__Effect,hxd__snd__Effect);
void hxd_snd_Manager_new(hxd__snd__Manager);
haxe__io__Bytes hxd_snd_Manager_getTmpBytes(hxd__snd__Manager,int);
haxe__io__Bytes hxd_snd_Manager_getResampleBytes(hxd__snd__Manager,int);
void hxd_snd_Manager_stopAll(hxd__snd__Manager);
void hxd_snd_Manager_cleanCache(hxd__snd__Manager);
void hxd_snd_Manager_dispose(hxd__snd__Manager);
hxd__snd__Channel hxd_snd_Manager_play(hxd__snd__Manager,hxd__res__Sound,hxd__snd__ChannelGroup,hxd__snd__SoundGroup);
void hxd_snd_Manager_updateVirtualChannels(hxd__snd__Manager,double);
void hxd_snd_Manager_update(hxd__snd__Manager);
bool hxd_snd_Manager_progressiveDecodeBuffer(hxd__snd__Manager,hxd__snd__Source,hxd__res__Sound,int);
bool hxd_snd_Manager_queueBuffer(hxd__snd__Manager,hxd__snd__Source,hxd__res__Sound,int);
hxd__snd__Buffer hxd_snd_Manager_unqueueBuffer(hxd__snd__Manager,hxd__snd__Source);
void hxd_snd_Manager_bindEffect(hxd__snd__Manager,hxd__snd__Channel,hxd__snd__Source,hxd__snd__Effect);
void hxd_snd_Manager_unbindEffect(hxd__snd__Manager,hxd__snd__Channel,hxd__snd__Source,hxd__snd__Effect);
void hxd_snd_Manager_releaseSource(hxd__snd__Manager,hxd__snd__Source);
bool hxd_snd_Manager_checkTargetFormat(hxd__snd__Manager,hxd__snd__Data,bool*);
void fun$3775(venum*);
hxd__snd__Buffer hxd_snd_Manager_getSoundBuffer(hxd__snd__Manager,hxd__res__Sound,hxd__snd__SoundGroup);
void hxd_snd_Manager_fillSoundBuffer(hxd__snd__Manager,hxd__snd__Buffer,hxd__snd__Data,bool*);
hxd__snd__Buffer hxd_snd_Manager_getStreamBuffer(hxd__snd__Manager,hxd__snd__Source,hxd__res__Sound,hxd__snd__SoundGroup,int);
int hxd_snd_Manager_sortChannel(hxd__snd__Manager,hxd__snd__Channel,hxd__snd__Channel);
int hxd_snd_Manager_sortEffect(hxd__snd__Manager,hxd__snd__Effect,hxd__snd__Effect);
void hxd_snd_Manager_releaseChannel(hxd__snd__Manager,hxd__snd__Channel);
void hxd_snd_Mp3Data_new(hxd__snd__Mp3Data,haxe__io__Bytes);
void hxd_snd_Mp3Data_decodeBuffer(hxd__snd__Mp3Data,haxe__io__Bytes,int,int,int);
void hxd_snd_OggData_new(hxd__snd__OggData,haxe__io__Bytes);
hxd__snd__Data hxd_snd_OggData_resample(hxd__snd__OggData,int,venum*,int);
void hxd_snd_OggData_decodeBuffer(hxd__snd__OggData,haxe__io__Bytes,int,int,int);
void hxd_snd_SoundGroup_new(hxd__snd__SoundGroup,String);
void hxd_snd_WavData_new(hxd__snd__WavData,haxe__io__Bytes);
void hxd_snd_WavData_init(hxd__snd__WavData,vvirtual*);
void hxd_snd_WavData_decodeBuffer(hxd__snd__WavData,haxe__io__Bytes,int,int,int);
void hxd_snd_effect_LowPass_new(hxd__snd__effect__LowPass);
void hxd_snd_effect_Pitch_new(hxd__snd__effect__Pitch,double*);
void hxd_snd_effect_Reverb_new(hxd__snd__effect__Reverb,hxd__snd__effect__ReverbPreset);
void hxd_snd_effect_Reverb_loadPreset(hxd__snd__effect__Reverb,hxd__snd__effect__ReverbPreset);
void hxd_snd_effect_ReverbPreset_new(hxd__snd__effect__ReverbPreset,double,double,double,double,double,double,double,double,double,double,double,double);
void hxd_snd_effect_Spatialization_new(hxd__snd__effect__Spatialization);
double hxd_snd_effect_Spatialization_getVolumeModifier(hxd__snd__effect__Spatialization);
double hxd_snd_effect_Spatialization_applyAudibleGainModifier(hxd__snd__effect__Spatialization,double);
void hxd_snd_openal_BufferHandle_new(hxd__snd__openal__BufferHandle);
void hxd_snd_openal_SourceHandle_new(hxd__snd__openal__SourceHandle);
int hxd_snd_openal_SourceHandle_acquireAuxiliarySend(hxd__snd__openal__SourceHandle,hxd__snd__Effect);
int hxd_snd_openal_SourceHandle_getAuxiliarySend(hxd__snd__openal__SourceHandle,hxd__snd__Effect);
int hxd_snd_openal_SourceHandle_releaseAuxiliarySend(hxd__snd__openal__SourceHandle,hxd__snd__Effect);
void hxd_snd_openal_Driver_new(hxd__snd__openal__Driver);
haxe__io__Bytes hxd_snd_openal_Driver_getTmpBytes(hxd__snd__openal__Driver,int);
void hxd_snd_openal_Driver_setMasterVolume(hxd__snd__openal__Driver,double);
void hxd_snd_openal_Driver_setListenerParams(hxd__snd__openal__Driver,h3d__Vector,h3d__Vector,h3d__Vector,h3d__Vector);
hxd__snd__openal__SourceHandle hxd_snd_openal_Driver_createSource(hxd__snd__openal__Driver);
void hxd_snd_openal_Driver_destroySource(hxd__snd__openal__Driver,hxd__snd__openal__SourceHandle);
void hxd_snd_openal_Driver_playSource(hxd__snd__openal__Driver,hxd__snd__openal__SourceHandle);
void hxd_snd_openal_Driver_stopSource(hxd__snd__openal__Driver,hxd__snd__openal__SourceHandle);
void hxd_snd_openal_Driver_setSourceVolume(hxd__snd__openal__Driver,hxd__snd__openal__SourceHandle,double);
hxd__snd__openal__BufferHandle hxd_snd_openal_Driver_createBuffer(hxd__snd__openal__Driver);
void hxd_snd_openal_Driver_destroyBuffer(hxd__snd__openal__Driver,hxd__snd__openal__BufferHandle);
void hxd_snd_openal_Driver_setBufferData(hxd__snd__openal__Driver,hxd__snd__openal__BufferHandle,haxe__io__Bytes,int,venum*,int,int);
int hxd_snd_openal_Driver_getPlayedSampleCount(hxd__snd__openal__Driver,hxd__snd__openal__SourceHandle);
int hxd_snd_openal_Driver_getProcessedBuffers(hxd__snd__openal__Driver,hxd__snd__openal__SourceHandle);
void hxd_snd_openal_Driver_queueBuffer(hxd__snd__openal__Driver,hxd__snd__openal__SourceHandle,hxd__snd__openal__BufferHandle,int,bool);
void hxd_snd_openal_Driver_unqueueBuffer(hxd__snd__openal__Driver,hxd__snd__openal__SourceHandle,hxd__snd__openal__BufferHandle);
void hxd_snd_openal_Driver_update(hxd__snd__openal__Driver);
void hxd_snd_openal_Driver_dispose(hxd__snd__openal__Driver);
hxd__snd__EffectDriver hxd_snd_openal_Driver_getEffectDriver(hxd__snd__openal__Driver,String);
void hxd_snd_openal_LowPassDriver_new(hxd__snd__openal__LowPassDriver,hxd__snd__openal__Driver);
void hxd_snd_openal_LowPassDriver_acquire(hxd__snd__openal__LowPassDriver);
void hxd_snd_openal_LowPassDriver_release(hxd__snd__openal__LowPassDriver);
void hxd_snd_openal_LowPassDriver_update(hxd__snd__openal__LowPassDriver,vdynamic*);
void hxd_snd_openal_LowPassDriver_apply(hxd__snd__openal__LowPassDriver,vdynamic*,hxd__snd__openal__SourceHandle);
void hxd_snd_openal_LowPassDriver_unbind(hxd__snd__openal__LowPassDriver,vdynamic*,hxd__snd__openal__SourceHandle);
void hxd_snd_openal_PitchDriver_new(hxd__snd__openal__PitchDriver);
void hxd_snd_openal_PitchDriver_apply(hxd__snd__openal__PitchDriver,vdynamic*,hxd__snd__openal__SourceHandle);
void hxd_snd_openal_PitchDriver_unbind(hxd__snd__openal__PitchDriver,vdynamic*,hxd__snd__openal__SourceHandle);
void hxd_snd_openal_ReverbDriver_new(hxd__snd__openal__ReverbDriver,hxd__snd__openal__Driver);
void hxd_snd_openal_ReverbDriver_acquire(hxd__snd__openal__ReverbDriver);
void hxd_snd_openal_ReverbDriver_release(hxd__snd__openal__ReverbDriver);
void hxd_snd_openal_ReverbDriver_update(hxd__snd__openal__ReverbDriver,vdynamic*);
void hxd_snd_openal_ReverbDriver_bind(hxd__snd__openal__ReverbDriver,vdynamic*,hxd__snd__openal__SourceHandle);
void hxd_snd_openal_ReverbDriver_apply(hxd__snd__openal__ReverbDriver,vdynamic*,hxd__snd__openal__SourceHandle);
void hxd_snd_openal_ReverbDriver_unbind(hxd__snd__openal__ReverbDriver,vdynamic*,hxd__snd__openal__SourceHandle);
void hxd_snd_openal_SpatializationDriver_new(hxd__snd__openal__SpatializationDriver,vvirtual*);
void hxd_snd_openal_SpatializationDriver_bind(hxd__snd__openal__SpatializationDriver,vdynamic*,hxd__snd__openal__SourceHandle);
void hxd_snd_openal_SpatializationDriver_apply(hxd__snd__openal__SpatializationDriver,vdynamic*,hxd__snd__openal__SourceHandle);
void hxd_snd_openal_SpatializationDriver_unbind(hxd__snd__openal__SpatializationDriver,vdynamic*,hxd__snd__openal__SourceHandle);
vdynamic* hxsl_Error_t(String,vvirtual*);
void hxsl_Error_new(hxsl__Error,String,vvirtual*);
String hxsl_Error_toString(hxsl__Error);
vbyte* hxsl_Error___string(hxsl__Error);
int hxsl_Tools_allocVarId(void);
String hxsl_Tools_getName(vvirtual*);
int hxsl_Tools_getConstBits(vvirtual*);
bool hxsl_Tools_isConst(vvirtual*);
bool hxsl_Tools_isStruct(vvirtual*);
bool hxsl_Tools_isArray(vvirtual*);
bool hxsl_Tools_hasQualifier(vvirtual*,venum*);
bool hxsl_Tools_isSampler(venum*);
String hxsl_Tools_toString(venum*);
venum* hxsl_Tools_toType(venum*);
bool hxsl_Tools_hasSideEffect(vvirtual*);
void hxsl_Tools_iter(vvirtual*,vclosure*);
vvirtual* hxsl_Tools_map(vvirtual*,vclosure*);
int hxsl_Tools_size(venum*);
vdynamic* hxsl_Tools_evalConst(vvirtual*);
String hxsl_Tools2_toString(venum*);
String hxsl_Tools3_toString(vvirtual*);
String hxsl_Tools4_toString(vvirtual*);
void hxsl_SearchMap_new(hxsl__SearchMap);
hxsl__Cache hxsl_Cache_get(void);
void hxsl_Cache_set(hxsl__Cache);
void hxsl_Cache_clear(void);
void hxsl_Cache_new(hxsl__Cache);
vvirtual* fun$3869(vvirtual*,venum*,int,hl__types__ArrayObj,vclosure*);
vvirtual* fun$3870(venum*,String,venum*,vvirtual*);
vvirtual* fun$3871(venum*,venum*,int);
vvirtual* fun$3872(venum*,venum*);
void fun$3873(venum*,venum*,hl__types__ArrayObj);
hxsl__Shader hxsl_Cache_getLinkShader(hxsl__Cache,hl__types__ArrayObj);
hxsl__RuntimeShader hxsl_Cache_link(hxsl__Cache,hxsl__ShaderList);
int fun$3874(vvirtual*,vvirtual*);
int fun$3875(vclosure*,vdynamic*,vdynamic*);
hxsl__RuntimeShader hxsl_Cache_compileRuntimeShader(hxsl__Cache,hxsl__ShaderList);
hxsl__RuntimeShader hxsl_Cache_buildRuntimeShader(hxsl__Cache,vvirtual*,vvirtual*,haxe__ds__IntMap);
void hxsl_Cache_initGlobals(hxsl__Cache,hxsl__RuntimeShader,hxsl__RuntimeShaderData);
String hxsl_Cache_getPath(hxsl__Cache,vvirtual*);
int fun$3926(vvirtual*,vvirtual*);
int fun$3927(vclosure*,vdynamic*,vdynamic*);
hxsl__RuntimeShaderData hxsl_Cache_flattenShader(hxsl__Cache,vvirtual*,venum*,haxe__ds__IntMap);
vvirtual* hxsl_Clone_shaderData(vvirtual*);
void hxsl_Clone_new(hxsl__Clone);
vvirtual* hxsl_Clone_tvar(hxsl__Clone,vvirtual*);
vvirtual* hxsl_Clone_tfun(hxsl__Clone,vvirtual*);
venum* hxsl_Clone_ttype(hxsl__Clone,venum*);
vvirtual* hxsl_Clone_texpr(hxsl__Clone,vvirtual*);
vvirtual* hxsl_Clone_shader(hxsl__Clone,vvirtual*);
void hxsl__Dce_Exit_new(hxsl___Dce__Exit);
void hxsl__Dce_VarDeps_new(hxsl___Dce__VarDeps,vvirtual*);
void hxsl_Dce_new(hxsl__Dce);
void hxsl_Dce_debug(hxsl__Dce,String,vvirtual*);
vvirtual* hxsl_Dce_dce(hxsl__Dce,vvirtual*,vvirtual*);
hxsl___Dce__VarDeps hxsl_Dce_get(hxsl__Dce,vvirtual*);
void hxsl_Dce_markRec(hxsl__Dce,hxsl___Dce__VarDeps);
void hxsl_Dce_link(hxsl__Dce,vvirtual*,hl__types__ArrayObj);
void fun$3937(venum*,vvirtual*);
void fun$3938(venum*,vvirtual*);
void fun$3939(venum*,vvirtual*);
void fun$3940(venum*,vvirtual*);
void fun$3941(venum*,vvirtual*);
void fun$3942(venum*,vvirtual*);
void fun$3943(venum*,vvirtual*);
void fun$3944(venum*,vvirtual*);
void fun$3945(venum*,vvirtual*);
void hxsl_Dce_check(hxsl__Dce,vvirtual*,hl__types__ArrayObj,hl__types__ArrayObj);
void hxsl_Dce_checkBranches(hxsl__Dce,vvirtual*);
vvirtual* fun$3946(hxsl__Dce,vvirtual*);
vvirtual* fun$3947(hxsl__Dce,vvirtual*);
vvirtual* fun$3948(hxsl__Dce,vvirtual*);
vvirtual* fun$3949(hxsl__Dce,vvirtual*);
vvirtual* fun$3950(hxsl__Dce,vvirtual*);
vvirtual* fun$3951(hxsl__Dce,vvirtual*);
vvirtual* fun$3952(hxsl__Dce,vvirtual*);
vvirtual* fun$3953(hxsl__Dce,vvirtual*);
vvirtual* fun$3954(hxsl__Dce,vvirtual*);
vvirtual* fun$3955(hxsl__Dce,vvirtual*);
vvirtual* fun$3956(hxsl__Dce,vvirtual*);
vvirtual* hxsl_Dce_mapExpr(hxsl__Dce,vvirtual*,bool);
void hxsl_Eval_new(hxsl__Eval);
void hxsl_Eval_setConstant(hxsl__Eval,vvirtual*,venum*);
vvirtual* hxsl_Eval_mapVar(hxsl__Eval,vvirtual*);
vvirtual* hxsl_Eval_eval(hxsl__Eval,vvirtual*);
bool hxsl_Eval_hasReturn(hxsl__Eval,vvirtual*);
void hxsl_Eval_hasReturnLoop(hxsl__Eval,vvirtual*);
vvirtual* hxsl_Eval_handleReturn(hxsl__Eval,vvirtual*,bool*);
vvirtual* hxsl_Eval_handleReturnDef(hxsl__Eval,vvirtual*);
venum* hxsl_Eval_evalCall(hxsl__Eval,venum*,hl__types__ArrayObj,hl__types__ArrayObj,vvirtual*);
String hxsl_Eval_constantsToString(hxsl__Eval);
void fun$3981(venum*);
void fun$3982(venum*);
void fun$3983(venum*);
void fun$3984(venum*);
void fun$3985(venum*);
void fun$3986(venum*);
vvirtual* hxsl_Eval_evalExpr(hxsl__Eval,vvirtual*,bool*);
void hxsl__Flatten_Alloc_new(hxsl___Flatten__Alloc,vvirtual*,venum*,int,int);
void hxsl_Flatten_new(hxsl__Flatten);
vvirtual* hxsl_Flatten_flatten(hxsl__Flatten,vvirtual*,venum*,bool);
vvirtual* hxsl_Flatten_mapFun(hxsl__Flatten,vvirtual*,vclosure*);
vvirtual* hxsl_Flatten_mapExpr(hxsl__Flatten,vvirtual*);
vvirtual* hxsl_Flatten_mapConsts(hxsl__Flatten,vvirtual*);
vvirtual* hxsl_Flatten_allocConst(hxsl__Flatten,double,vvirtual*);
vvirtual* hxsl_Flatten_allocConsts(hxsl__Flatten,hl__types__ArrayBytes_Float,vvirtual*);
vvirtual* hxsl_Flatten_mkInt(hxsl__Flatten,int,vvirtual*);
vvirtual* hxsl_Flatten_readIndex(hxsl__Flatten,hxsl___Flatten__Alloc,int,vvirtual*);
vvirtual* hxsl_Flatten_readOffset(hxsl__Flatten,hxsl___Flatten__Alloc,int,vvirtual*,int,vvirtual*);
vvirtual* hxsl_Flatten_access(hxsl__Flatten,hxsl___Flatten__Alloc,venum*,vvirtual*,venum*);
vvirtual* hxsl_Flatten_optimize(hxsl__Flatten,vvirtual*);
hl__types__ArrayObj hxsl_Flatten_packTextures(hxsl__Flatten,String,hl__types__ArrayObj,venum*);
void hxsl_Flatten_packBuffers(hxsl__Flatten,hl__types__ArrayObj);
vvirtual* hxsl_Flatten_pack(hxsl__Flatten,String,venum*,hl__types__ArrayObj,venum*);
int hxsl_Flatten_varSize(hxsl__Flatten,venum*,venum*);
void hxsl_Flatten_gatherVar(hxsl__Flatten,vvirtual*);
int hxsl__Globals_GlobalSlot_Impl___new(String);
int hxsl__Globals_GlobalSlot_Impl__toInt(int);
void hxsl__Globals_GlobalSlot_Impl__set(int,hxsl__Globals,vdynamic*);
vdynamic* hxsl__Globals_GlobalSlot_Impl__get(int,hxsl__Globals);
vdynamic* hxsl_Globals_allocID(String);
String hxsl_Globals_getIDName(int);
void hxsl_Globals_new(hxsl__Globals);
void hxsl_Globals_set(hxsl__Globals,String,vdynamic*);
vdynamic* hxsl_Globals_get(hxsl__Globals,String);
void hxsl_Globals_fastSet(hxsl__Globals,int,vdynamic*);
vdynamic* hxsl_Globals_fastGet(hxsl__Globals,int);
void hxsl_Globals_resetChannels(hxsl__Globals);
int hxsl_Globals_allocChannelID(hxsl__Globals,h3d__mat__Texture);
String hxsl_HlslOut_semanticName(String);
void hxsl_HlslOut_new(hxsl__HlslOut);
void hxsl_HlslOut_add(hxsl__HlslOut,vdynamic*);
void hxsl_HlslOut_ident(hxsl__HlslOut,vvirtual*);
void hxsl_HlslOut_decl(hxsl__HlslOut,String);
void hxsl_HlslOut_addType(hxsl__HlslOut,venum*);
void hxsl_HlslOut_addArraySize(hxsl__HlslOut,venum*);
void hxsl_HlslOut_addVar(hxsl__HlslOut,vvirtual*);
void hxsl_HlslOut_addValue(hxsl__HlslOut,vvirtual*,String);
void hxsl_HlslOut_addBlock(hxsl__HlslOut,vvirtual*,String);
void hxsl_HlslOut_declMods(hxsl__HlslOut);
void hxsl_HlslOut_addExpr(hxsl__HlslOut,vvirtual*,String);
String hxsl_HlslOut_varName(hxsl__HlslOut,vvirtual*);
void hxsl_HlslOut_newLine(hxsl__HlslOut,vvirtual*);
bool hxsl_HlslOut_isBlock(hxsl__HlslOut,vvirtual*);
void fun$3991(venum*,vvirtual*);
void hxsl_HlslOut_collectGlobals(hxsl__HlslOut,haxe__ds__EnumValueMap,vvirtual*);
void fun$3992(venum*,String,vvirtual*);
void hxsl_HlslOut_initVars(hxsl__HlslOut,vvirtual*);
void hxsl_HlslOut_initGlobals(hxsl__HlslOut,vvirtual*);
void hxsl_HlslOut_initParams(hxsl__HlslOut,vvirtual*);
void hxsl_HlslOut_initStatics(hxsl__HlslOut,vvirtual*);
void hxsl_HlslOut_emitMain(hxsl__HlslOut,vvirtual*);
int fun$3993(vvirtual*,vvirtual*);
int fun$3994(vclosure*,vdynamic*,vdynamic*);
void hxsl_HlslOut_initLocals(hxsl__HlslOut);
String hxsl_HlslOut_run(hxsl__HlslOut,vvirtual*);
void hxsl__Linker_AllocatedVar_new(hxsl___Linker__AllocatedVar);
void hxsl__Linker_ShaderInfos_new(hxsl___Linker__ShaderInfos,String,vdynamic*);
void hxsl_Linker_new(hxsl__Linker);
void hxsl_Linker_debug(hxsl__Linker,String,vvirtual*);
vdynamic* hxsl_Linker_error(hxsl__Linker,String,vvirtual*);
void hxsl_Linker_mergeVar(hxsl__Linker,String,vvirtual*,vvirtual*,vvirtual*);
hxsl___Linker__AllocatedVar hxsl_Linker_allocVar(hxsl__Linker,vvirtual*,vvirtual*,String,hxsl___Linker__AllocatedVar);
vvirtual* hxsl_Linker_mapExprVar(hxsl__Linker,vvirtual*);
hxsl___Linker__ShaderInfos hxsl_Linker_addShader(hxsl__Linker,String,vdynamic*,vvirtual*,int);
int hxsl_Linker_sortByPriorityDesc(hxsl__Linker,hxsl___Linker__ShaderInfos,hxsl___Linker__ShaderInfos);
void hxsl_Linker_buildDependency(hxsl__Linker,hxsl___Linker__ShaderInfos,hxsl___Linker__AllocatedVar,bool);
void hxsl_Linker_initDependencies(hxsl__Linker,hxsl___Linker__ShaderInfos);
int fun$3995(vclosure*,vdynamic*,vdynamic*);
void hxsl_Linker_collect(hxsl__Linker,hxsl___Linker__ShaderInfos,hl__types__ArrayObj,bool);
void fun$3996(venum*,vvirtual*);
void hxsl_Linker_uniqueLocals(hxsl__Linker,vvirtual*,haxe__ds__StringMap);
void fun$3997(venum*,hxsl___Linker__AllocatedVar);
void fun$3998(venum*,vvirtual*);
vvirtual* fun$3999(venum*,venum*,String,hl__types__ArrayObj);
vvirtual* hxsl_Linker_link(hxsl__Linker,hl__types__ArrayObj);
String hxsl_Printer_opStr(venum*);
String hxsl_Printer_toString(vvirtual*,bool*);
String hxsl_Printer_shaderToString(vvirtual*,bool*);
void fun$4000(venum*,vvirtual*,bool);
void fun$4001(venum*,vvirtual*);
void hxsl_Printer_check(vvirtual*,hl__types__ArrayObj);
void hxsl_Printer_new(hxsl__Printer,bool*);
void hxsl_Printer_add(hxsl__Printer,vdynamic*);
String hxsl_Printer_shaderString(hxsl__Printer,vvirtual*);
String hxsl_Printer_varString(hxsl__Printer,vvirtual*);
String hxsl_Printer_funString(hxsl__Printer,vvirtual*);
String hxsl_Printer_exprString(hxsl__Printer,vvirtual*);
void hxsl_Printer_addVar(hxsl__Printer,vvirtual*,venum*,String,vvirtual*);
void hxsl_Printer_addFun(hxsl__Printer,vvirtual*);
void hxsl_Printer_addVarName(hxsl__Printer,vvirtual*);
void hxsl_Printer_addConst(hxsl__Printer,venum*);
void hxsl_Printer_addExpr(hxsl__Printer,vvirtual*,String);
void hxsl_AllocParam_new(hxsl__AllocParam,String,int,int,int,venum*);
hxsl__AllocParam hxsl_AllocParam_clone(hxsl__AllocParam,bool*);
void hxsl_AllocGlobal_new(hxsl__AllocGlobal,int,String,venum*);
hxsl__AllocGlobal hxsl_AllocGlobal_clone(hxsl__AllocGlobal,bool*);
void hxsl_RuntimeShaderData_new(hxsl__RuntimeShaderData);
void hxsl_ShaderInstanceDesc_new(hxsl__ShaderInstanceDesc,hxsl__SharedShader,int);
void hxsl_RuntimeShader_new(hxsl__RuntimeShader);
bool hxsl_RuntimeShader_hasGlobal(hxsl__RuntimeShader,int);
hxsl__ShaderList hxsl_ShaderList_addSort(hxsl__Shader,hxsl__ShaderList);
void hxsl_ShaderList_new(hxsl__ShaderList,hxsl__Shader,hxsl__ShaderList);
hxsl__ShaderList hxsl_ShaderList_clone(hxsl__ShaderList);
hxsl___ShaderList__ShaderIterator hxsl_ShaderList_iterator(hxsl__ShaderList);
hxsl___ShaderList__ShaderIterator hxsl_ShaderList_iterateTo(hxsl__ShaderList,hxsl__ShaderList);
void hxsl__ShaderList_ShaderIterator_new(hxsl___ShaderList__ShaderIterator,hxsl__ShaderList,hxsl__ShaderList);
bool hxsl__ShaderList_ShaderIterator_hasNext(hxsl___ShaderList__ShaderIterator);
hxsl__Shader hxsl__ShaderList_ShaderIterator_next(hxsl___ShaderList__ShaderIterator);
void hxsl_ShaderInstance_new(hxsl__ShaderInstance,vvirtual*);
void hxsl_ShaderGlobal_new(hxsl__ShaderGlobal,vvirtual*,int);
void hxsl_ShaderConst_new(hxsl__ShaderConst,vvirtual*,int,int);
void hxsl_SharedShader_new(hxsl__SharedShader,String);
void hxsl_SharedShader_initialize(hxsl__SharedShader);
hxsl__ShaderInstance hxsl_SharedShader_getInstance(hxsl__SharedShader,int);
hxsl__ShaderInstance hxsl_SharedShader_makeInstance(hxsl__SharedShader,int);
void hxsl_SharedShader_addSelfParam(hxsl__SharedShader,hxsl__ShaderInstance,vvirtual*);
void hxsl_SharedShader_addParam(hxsl__SharedShader,hxsl__Eval,hxsl__ShaderInstance,vvirtual*);
void hxsl_SharedShader_browseVar(hxsl__SharedShader,vvirtual*,String);
void hxsl__Splitter_VarProps_new(hxsl___Splitter__VarProps,vvirtual*);
void hxsl_Splitter_new(hxsl__Splitter);
int fun$4003(vvirtual*,vvirtual*);
int fun$4004(vvirtual*,vvirtual*);
vvirtual* hxsl_Splitter_split(hxsl__Splitter,vvirtual*);
void hxsl_Splitter_addExpr(hxsl__Splitter,vvirtual*,vvirtual*);
void hxsl_Splitter_checkVar(hxsl__Splitter,hxsl___Splitter__VarProps,bool,haxe__ds__IntMap,vvirtual*);
vvirtual* hxsl_Splitter_mapVars(hxsl__Splitter,vvirtual*);
hxsl___Splitter__VarProps hxsl_Splitter_get(hxsl__Splitter,vvirtual*);
void hxsl_Splitter_uniqueName(hxsl__Splitter,vvirtual*);
void hxsl_Splitter_checkExpr(hxsl__Splitter,vvirtual*);
bool hxsl_ChannelTools_isPackedFormat(h3d__mat__Texture);
int openal__AL_Buffer_Impl__toInt(int);
int openal__AL_Buffer_Impl__ofInt(int);
int openal__AL_Source_Impl__toInt(int);
int openal__AL_Source_Impl__ofInt(int);
int openal__EFX_Effect_Impl__toInt(int);
int openal__EFX_Effect_Impl__ofInt(int);
int openal__EFX_Filter_Impl__toInt(int);
int openal__EFX_Filter_Impl__ofInt(int);
int openal__EFX_EffectSlot_Impl__toInt(int);
int openal__EFX_EffectSlot_Impl__ofInt(int);
haxe__io__Bytes sys_io_File_getBytes(String);
void sys_io_File_saveContent(String,String);
void sys_io_File_saveBytes(String,haxe__io__Bytes);
sys__io__FileInput sys_io_File_read(String,bool*);
sys__io__FileOutput sys_io_File_write(String,bool*);
sys__io__FileOutput sys_io_File_append(String,bool*);
void sys_io_FileInput_new(sys__io__FileInput,hl_fdesc*);
int sys_io_FileInput_readByte(sys__io__FileInput);
int sys_io_FileInput_readBytes(sys__io__FileInput,haxe__io__Bytes,int,int);
void sys_io_FileInput_close(sys__io__FileInput);
void sys_io_FileInput_seek(sys__io__FileInput,int,venum*);
int sys_io_FileInput_tell(sys__io__FileInput);
void sys_io_FileOutput_new(sys__io__FileOutput,hl_fdesc*);
void sys_io_FileOutput_writeByte(sys__io__FileOutput,int);
int sys_io_FileOutput_writeBytes(sys__io__FileOutput,haxe__io__Bytes,int,int);
void sys_io_FileOutput_flush(sys__io__FileOutput);
void sys_io_FileOutput_close(sys__io__FileOutput);
void fun$4115(vdynamic*);
void fun$4116(void);
String fun$4117(void);
haxe__ds__StringMap fun$4118(void);
hl__types__ArrayBytes_Int fun$4119(void);
haxe__ds__StringMap fun$4120(void);
haxe__ds__EnumValueMap fun$4121(void);
void fun$4114(void);

extern void *hl_functions_ptrs[];
extern hl_type *hl_functions_types[];
